// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_Login_FullMethodName                       = "/pb.userService/Login"
	UserService_ConfirmRegister_FullMethodName             = "/pb.userService/ConfirmRegister"
	UserService_Register_FullMethodName                    = "/pb.userService/Register"
	UserService_MapUserByIds_FullMethodName                = "/pb.userService/MapUserByIds"
	UserService_BatchGetUserBaseInfo_FullMethodName        = "/pb.userService/BatchGetUserBaseInfo"
	UserService_SearchUsersByKeyword_FullMethodName        = "/pb.userService/SearchUsersByKeyword"
	UserService_GetUserHome_FullMethodName                 = "/pb.userService/GetUserHome"
	UserService_GetUserSettings_FullMethodName             = "/pb.userService/GetUserSettings"
	UserService_SetUserSettings_FullMethodName             = "/pb.userService/SetUserSettings"
	UserService_AfterConnect_FullMethodName                = "/pb.userService/AfterConnect"
	UserService_AfterDisconnect_FullMethodName             = "/pb.userService/AfterDisconnect"
	UserService_BatchGetUserAllDevices_FullMethodName      = "/pb.userService/BatchGetUserAllDevices"
	UserService_UpdateUserInfo_FullMethodName              = "/pb.userService/UpdateUserInfo"
	UserService_UpdateUserPassword_FullMethodName          = "/pb.userService/UpdateUserPassword"
	UserService_ResetPassword_FullMethodName               = "/pb.userService/ResetPassword"
	UserService_GetAllUserInvitationCode_FullMethodName    = "/pb.userService/GetAllUserInvitationCode"
	UserService_GetUserInvitationCodeDetail_FullMethodName = "/pb.userService/GetUserInvitationCodeDetail"
	UserService_AddUserInvitationCode_FullMethodName       = "/pb.userService/AddUserInvitationCode"
	UserService_UpdateUserInvitationCode_FullMethodName    = "/pb.userService/UpdateUserInvitationCode"
	UserService_DeleteUserInvitationCode_FullMethodName    = "/pb.userService/DeleteUserInvitationCode"
	UserService_GetAllUserIpWhiteList_FullMethodName       = "/pb.userService/GetAllUserIpWhiteList"
	UserService_GetUserIpWhiteListDetail_FullMethodName    = "/pb.userService/GetUserIpWhiteListDetail"
	UserService_AddUserIpWhiteList_FullMethodName          = "/pb.userService/AddUserIpWhiteList"
	UserService_UpdateUserIpWhiteList_FullMethodName       = "/pb.userService/UpdateUserIpWhiteList"
	UserService_DeleteUserIpWhiteList_FullMethodName       = "/pb.userService/DeleteUserIpWhiteList"
	UserService_GetAllUserIpBlackList_FullMethodName       = "/pb.userService/GetAllUserIpBlackList"
	UserService_GetUserIpBlackListDetail_FullMethodName    = "/pb.userService/GetUserIpBlackListDetail"
	UserService_AddUserIpBlackList_FullMethodName          = "/pb.userService/AddUserIpBlackList"
	UserService_UpdateUserIpBlackList_FullMethodName       = "/pb.userService/UpdateUserIpBlackList"
	UserService_DeleteUserIpBlackList_FullMethodName       = "/pb.userService/DeleteUserIpBlackList"
	UserService_GetAllUserDefaultConv_FullMethodName       = "/pb.userService/GetAllUserDefaultConv"
	UserService_GetUserDefaultConvDetail_FullMethodName    = "/pb.userService/GetUserDefaultConvDetail"
	UserService_AddUserDefaultConv_FullMethodName          = "/pb.userService/AddUserDefaultConv"
	UserService_UpdateUserDefaultConv_FullMethodName       = "/pb.userService/UpdateUserDefaultConv"
	UserService_DeleteUserDefaultConv_FullMethodName       = "/pb.userService/DeleteUserDefaultConv"
	UserService_GetAllUserModel_FullMethodName             = "/pb.userService/GetAllUserModel"
	UserService_GetUserModelDetail_FullMethodName          = "/pb.userService/GetUserModelDetail"
	UserService_AddUserModel_FullMethodName                = "/pb.userService/AddUserModel"
	UserService_UpdateUserModel_FullMethodName             = "/pb.userService/UpdateUserModel"
	UserService_DeleteUserModel_FullMethodName             = "/pb.userService/DeleteUserModel"
	UserService_SwitchUserModel_FullMethodName             = "/pb.userService/SwitchUserModel"
	UserService_GetAllLoginRecord_FullMethodName           = "/pb.userService/GetAllLoginRecord"
	UserService_SendSms_FullMethodName                     = "/pb.userService/SendSms"
	UserService_VerifySms_FullMethodName                   = "/pb.userService/VerifySms"
	UserService_GetCaptchaCode_FullMethodName              = "/pb.userService/GetCaptchaCode"
	UserService_VerifyCaptchaCode_FullMethodName           = "/pb.userService/VerifyCaptchaCode"
	UserService_ReportUser_FullMethodName                  = "/pb.userService/ReportUser"
	UserService_BatchCreateZombieUser_FullMethodName       = "/pb.userService/BatchCreateZombieUser"
	UserService_DestroyAccount_FullMethodName              = "/pb.userService/DestroyAccount"
	UserService_RecoverAccount_FullMethodName              = "/pb.userService/RecoverAccount"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	ConfirmRegister(ctx context.Context, in *ConfirmRegisterReq, opts ...grpc.CallOption) (*ConfirmRegisterResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	MapUserByIds(ctx context.Context, in *MapUserByIdsReq, opts ...grpc.CallOption) (*MapUserByIdsResp, error)
	BatchGetUserBaseInfo(ctx context.Context, in *BatchGetUserBaseInfoReq, opts ...grpc.CallOption) (*BatchGetUserBaseInfoResp, error)
	SearchUsersByKeyword(ctx context.Context, in *SearchUsersByKeywordReq, opts ...grpc.CallOption) (*SearchUsersByKeywordResp, error)
	GetUserHome(ctx context.Context, in *GetUserHomeReq, opts ...grpc.CallOption) (*GetUserHomeResp, error)
	GetUserSettings(ctx context.Context, in *GetUserSettingsReq, opts ...grpc.CallOption) (*GetUserSettingsResp, error)
	SetUserSettings(ctx context.Context, in *SetUserSettingsReq, opts ...grpc.CallOption) (*SetUserSettingsResp, error)
	// AfterConnect conn hook
	AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error)
	// AfterDisconnect conn hook
	AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error)
	BatchGetUserAllDevices(ctx context.Context, in *BatchGetUserAllDevicesReq, opts ...grpc.CallOption) (*BatchGetUserAllDevicesResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...grpc.CallOption) (*UpdateUserPasswordResp, error)
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error)
	GetAllUserInvitationCode(ctx context.Context, in *GetAllUserInvitationCodeReq, opts ...grpc.CallOption) (*GetAllUserInvitationCodeResp, error)
	GetUserInvitationCodeDetail(ctx context.Context, in *GetUserInvitationCodeDetailReq, opts ...grpc.CallOption) (*GetUserInvitationCodeDetailResp, error)
	AddUserInvitationCode(ctx context.Context, in *AddUserInvitationCodeReq, opts ...grpc.CallOption) (*AddUserInvitationCodeResp, error)
	UpdateUserInvitationCode(ctx context.Context, in *UpdateUserInvitationCodeReq, opts ...grpc.CallOption) (*UpdateUserInvitationCodeResp, error)
	DeleteUserInvitationCode(ctx context.Context, in *DeleteUserInvitationCodeReq, opts ...grpc.CallOption) (*DeleteUserInvitationCodeResp, error)
	GetAllUserIpWhiteList(ctx context.Context, in *GetAllUserIpWhiteListReq, opts ...grpc.CallOption) (*GetAllUserIpWhiteListResp, error)
	GetUserIpWhiteListDetail(ctx context.Context, in *GetUserIpWhiteListDetailReq, opts ...grpc.CallOption) (*GetUserIpWhiteListDetailResp, error)
	AddUserIpWhiteList(ctx context.Context, in *AddUserIpWhiteListReq, opts ...grpc.CallOption) (*AddUserIpWhiteListResp, error)
	UpdateUserIpWhiteList(ctx context.Context, in *UpdateUserIpWhiteListReq, opts ...grpc.CallOption) (*UpdateUserIpWhiteListResp, error)
	DeleteUserIpWhiteList(ctx context.Context, in *DeleteUserIpWhiteListReq, opts ...grpc.CallOption) (*DeleteUserIpWhiteListResp, error)
	GetAllUserIpBlackList(ctx context.Context, in *GetAllUserIpBlackListReq, opts ...grpc.CallOption) (*GetAllUserIpBlackListResp, error)
	GetUserIpBlackListDetail(ctx context.Context, in *GetUserIpBlackListDetailReq, opts ...grpc.CallOption) (*GetUserIpBlackListDetailResp, error)
	AddUserIpBlackList(ctx context.Context, in *AddUserIpBlackListReq, opts ...grpc.CallOption) (*AddUserIpBlackListResp, error)
	UpdateUserIpBlackList(ctx context.Context, in *UpdateUserIpBlackListReq, opts ...grpc.CallOption) (*UpdateUserIpBlackListResp, error)
	DeleteUserIpBlackList(ctx context.Context, in *DeleteUserIpBlackListReq, opts ...grpc.CallOption) (*DeleteUserIpBlackListResp, error)
	GetAllUserDefaultConv(ctx context.Context, in *GetAllUserDefaultConvReq, opts ...grpc.CallOption) (*GetAllUserDefaultConvResp, error)
	GetUserDefaultConvDetail(ctx context.Context, in *GetUserDefaultConvDetailReq, opts ...grpc.CallOption) (*GetUserDefaultConvDetailResp, error)
	AddUserDefaultConv(ctx context.Context, in *AddUserDefaultConvReq, opts ...grpc.CallOption) (*AddUserDefaultConvResp, error)
	UpdateUserDefaultConv(ctx context.Context, in *UpdateUserDefaultConvReq, opts ...grpc.CallOption) (*UpdateUserDefaultConvResp, error)
	DeleteUserDefaultConv(ctx context.Context, in *DeleteUserDefaultConvReq, opts ...grpc.CallOption) (*DeleteUserDefaultConvResp, error)
	GetAllUserModel(ctx context.Context, in *GetAllUserModelReq, opts ...grpc.CallOption) (*GetAllUserModelResp, error)
	GetUserModelDetail(ctx context.Context, in *GetUserModelDetailReq, opts ...grpc.CallOption) (*GetUserModelDetailResp, error)
	AddUserModel(ctx context.Context, in *AddUserModelReq, opts ...grpc.CallOption) (*AddUserModelResp, error)
	UpdateUserModel(ctx context.Context, in *UpdateUserModelReq, opts ...grpc.CallOption) (*UpdateUserModelResp, error)
	DeleteUserModel(ctx context.Context, in *DeleteUserModelReq, opts ...grpc.CallOption) (*DeleteUserModelResp, error)
	SwitchUserModel(ctx context.Context, in *SwitchUserModelReq, opts ...grpc.CallOption) (*SwitchUserModelResp, error)
	GetAllLoginRecord(ctx context.Context, in *GetAllLoginRecordReq, opts ...grpc.CallOption) (*GetAllLoginRecordResp, error)
	SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*SendSmsResp, error)
	VerifySms(ctx context.Context, in *VerifySmsReq, opts ...grpc.CallOption) (*VerifySmsResp, error)
	GetCaptchaCode(ctx context.Context, in *GetCaptchaCodeReq, opts ...grpc.CallOption) (*GetCaptchaCodeResp, error)
	VerifyCaptchaCode(ctx context.Context, in *VerifyCaptchaCodeReq, opts ...grpc.CallOption) (*VerifyCaptchaCodeResp, error)
	ReportUser(ctx context.Context, in *ReportUserReq, opts ...grpc.CallOption) (*ReportUserResp, error)
	BatchCreateZombieUser(ctx context.Context, in *BatchCreateZombieUserReq, opts ...grpc.CallOption) (*BatchCreateZombieUserResp, error)
	DestroyAccount(ctx context.Context, in *DestroyAccountReq, opts ...grpc.CallOption) (*DestroyAccountResp, error)
	RecoverAccount(ctx context.Context, in *RecoverAccountReq, opts ...grpc.CallOption) (*RecoverAccountResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ConfirmRegister(ctx context.Context, in *ConfirmRegisterReq, opts ...grpc.CallOption) (*ConfirmRegisterResp, error) {
	out := new(ConfirmRegisterResp)
	err := c.cc.Invoke(ctx, UserService_ConfirmRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, UserService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) MapUserByIds(ctx context.Context, in *MapUserByIdsReq, opts ...grpc.CallOption) (*MapUserByIdsResp, error) {
	out := new(MapUserByIdsResp)
	err := c.cc.Invoke(ctx, UserService_MapUserByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchGetUserBaseInfo(ctx context.Context, in *BatchGetUserBaseInfoReq, opts ...grpc.CallOption) (*BatchGetUserBaseInfoResp, error) {
	out := new(BatchGetUserBaseInfoResp)
	err := c.cc.Invoke(ctx, UserService_BatchGetUserBaseInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUsersByKeyword(ctx context.Context, in *SearchUsersByKeywordReq, opts ...grpc.CallOption) (*SearchUsersByKeywordResp, error) {
	out := new(SearchUsersByKeywordResp)
	err := c.cc.Invoke(ctx, UserService_SearchUsersByKeyword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserHome(ctx context.Context, in *GetUserHomeReq, opts ...grpc.CallOption) (*GetUserHomeResp, error) {
	out := new(GetUserHomeResp)
	err := c.cc.Invoke(ctx, UserService_GetUserHome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserSettings(ctx context.Context, in *GetUserSettingsReq, opts ...grpc.CallOption) (*GetUserSettingsResp, error) {
	out := new(GetUserSettingsResp)
	err := c.cc.Invoke(ctx, UserService_GetUserSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetUserSettings(ctx context.Context, in *SetUserSettingsReq, opts ...grpc.CallOption) (*SetUserSettingsResp, error) {
	out := new(SetUserSettingsResp)
	err := c.cc.Invoke(ctx, UserService_SetUserSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, UserService_AfterConnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, UserService_AfterDisconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchGetUserAllDevices(ctx context.Context, in *BatchGetUserAllDevicesReq, opts ...grpc.CallOption) (*BatchGetUserAllDevicesResp, error) {
	out := new(BatchGetUserAllDevicesResp)
	err := c.cc.Invoke(ctx, UserService_BatchGetUserAllDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...grpc.CallOption) (*UpdateUserPasswordResp, error) {
	out := new(UpdateUserPasswordResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error) {
	out := new(ResetPasswordResp)
	err := c.cc.Invoke(ctx, UserService_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUserInvitationCode(ctx context.Context, in *GetAllUserInvitationCodeReq, opts ...grpc.CallOption) (*GetAllUserInvitationCodeResp, error) {
	out := new(GetAllUserInvitationCodeResp)
	err := c.cc.Invoke(ctx, UserService_GetAllUserInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInvitationCodeDetail(ctx context.Context, in *GetUserInvitationCodeDetailReq, opts ...grpc.CallOption) (*GetUserInvitationCodeDetailResp, error) {
	out := new(GetUserInvitationCodeDetailResp)
	err := c.cc.Invoke(ctx, UserService_GetUserInvitationCodeDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserInvitationCode(ctx context.Context, in *AddUserInvitationCodeReq, opts ...grpc.CallOption) (*AddUserInvitationCodeResp, error) {
	out := new(AddUserInvitationCodeResp)
	err := c.cc.Invoke(ctx, UserService_AddUserInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserInvitationCode(ctx context.Context, in *UpdateUserInvitationCodeReq, opts ...grpc.CallOption) (*UpdateUserInvitationCodeResp, error) {
	out := new(UpdateUserInvitationCodeResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserInvitationCode(ctx context.Context, in *DeleteUserInvitationCodeReq, opts ...grpc.CallOption) (*DeleteUserInvitationCodeResp, error) {
	out := new(DeleteUserInvitationCodeResp)
	err := c.cc.Invoke(ctx, UserService_DeleteUserInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUserIpWhiteList(ctx context.Context, in *GetAllUserIpWhiteListReq, opts ...grpc.CallOption) (*GetAllUserIpWhiteListResp, error) {
	out := new(GetAllUserIpWhiteListResp)
	err := c.cc.Invoke(ctx, UserService_GetAllUserIpWhiteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserIpWhiteListDetail(ctx context.Context, in *GetUserIpWhiteListDetailReq, opts ...grpc.CallOption) (*GetUserIpWhiteListDetailResp, error) {
	out := new(GetUserIpWhiteListDetailResp)
	err := c.cc.Invoke(ctx, UserService_GetUserIpWhiteListDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserIpWhiteList(ctx context.Context, in *AddUserIpWhiteListReq, opts ...grpc.CallOption) (*AddUserIpWhiteListResp, error) {
	out := new(AddUserIpWhiteListResp)
	err := c.cc.Invoke(ctx, UserService_AddUserIpWhiteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserIpWhiteList(ctx context.Context, in *UpdateUserIpWhiteListReq, opts ...grpc.CallOption) (*UpdateUserIpWhiteListResp, error) {
	out := new(UpdateUserIpWhiteListResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserIpWhiteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserIpWhiteList(ctx context.Context, in *DeleteUserIpWhiteListReq, opts ...grpc.CallOption) (*DeleteUserIpWhiteListResp, error) {
	out := new(DeleteUserIpWhiteListResp)
	err := c.cc.Invoke(ctx, UserService_DeleteUserIpWhiteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUserIpBlackList(ctx context.Context, in *GetAllUserIpBlackListReq, opts ...grpc.CallOption) (*GetAllUserIpBlackListResp, error) {
	out := new(GetAllUserIpBlackListResp)
	err := c.cc.Invoke(ctx, UserService_GetAllUserIpBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserIpBlackListDetail(ctx context.Context, in *GetUserIpBlackListDetailReq, opts ...grpc.CallOption) (*GetUserIpBlackListDetailResp, error) {
	out := new(GetUserIpBlackListDetailResp)
	err := c.cc.Invoke(ctx, UserService_GetUserIpBlackListDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserIpBlackList(ctx context.Context, in *AddUserIpBlackListReq, opts ...grpc.CallOption) (*AddUserIpBlackListResp, error) {
	out := new(AddUserIpBlackListResp)
	err := c.cc.Invoke(ctx, UserService_AddUserIpBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserIpBlackList(ctx context.Context, in *UpdateUserIpBlackListReq, opts ...grpc.CallOption) (*UpdateUserIpBlackListResp, error) {
	out := new(UpdateUserIpBlackListResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserIpBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserIpBlackList(ctx context.Context, in *DeleteUserIpBlackListReq, opts ...grpc.CallOption) (*DeleteUserIpBlackListResp, error) {
	out := new(DeleteUserIpBlackListResp)
	err := c.cc.Invoke(ctx, UserService_DeleteUserIpBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUserDefaultConv(ctx context.Context, in *GetAllUserDefaultConvReq, opts ...grpc.CallOption) (*GetAllUserDefaultConvResp, error) {
	out := new(GetAllUserDefaultConvResp)
	err := c.cc.Invoke(ctx, UserService_GetAllUserDefaultConv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserDefaultConvDetail(ctx context.Context, in *GetUserDefaultConvDetailReq, opts ...grpc.CallOption) (*GetUserDefaultConvDetailResp, error) {
	out := new(GetUserDefaultConvDetailResp)
	err := c.cc.Invoke(ctx, UserService_GetUserDefaultConvDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserDefaultConv(ctx context.Context, in *AddUserDefaultConvReq, opts ...grpc.CallOption) (*AddUserDefaultConvResp, error) {
	out := new(AddUserDefaultConvResp)
	err := c.cc.Invoke(ctx, UserService_AddUserDefaultConv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserDefaultConv(ctx context.Context, in *UpdateUserDefaultConvReq, opts ...grpc.CallOption) (*UpdateUserDefaultConvResp, error) {
	out := new(UpdateUserDefaultConvResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserDefaultConv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserDefaultConv(ctx context.Context, in *DeleteUserDefaultConvReq, opts ...grpc.CallOption) (*DeleteUserDefaultConvResp, error) {
	out := new(DeleteUserDefaultConvResp)
	err := c.cc.Invoke(ctx, UserService_DeleteUserDefaultConv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUserModel(ctx context.Context, in *GetAllUserModelReq, opts ...grpc.CallOption) (*GetAllUserModelResp, error) {
	out := new(GetAllUserModelResp)
	err := c.cc.Invoke(ctx, UserService_GetAllUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserModelDetail(ctx context.Context, in *GetUserModelDetailReq, opts ...grpc.CallOption) (*GetUserModelDetailResp, error) {
	out := new(GetUserModelDetailResp)
	err := c.cc.Invoke(ctx, UserService_GetUserModelDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserModel(ctx context.Context, in *AddUserModelReq, opts ...grpc.CallOption) (*AddUserModelResp, error) {
	out := new(AddUserModelResp)
	err := c.cc.Invoke(ctx, UserService_AddUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserModel(ctx context.Context, in *UpdateUserModelReq, opts ...grpc.CallOption) (*UpdateUserModelResp, error) {
	out := new(UpdateUserModelResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserModel(ctx context.Context, in *DeleteUserModelReq, opts ...grpc.CallOption) (*DeleteUserModelResp, error) {
	out := new(DeleteUserModelResp)
	err := c.cc.Invoke(ctx, UserService_DeleteUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SwitchUserModel(ctx context.Context, in *SwitchUserModelReq, opts ...grpc.CallOption) (*SwitchUserModelResp, error) {
	out := new(SwitchUserModelResp)
	err := c.cc.Invoke(ctx, UserService_SwitchUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllLoginRecord(ctx context.Context, in *GetAllLoginRecordReq, opts ...grpc.CallOption) (*GetAllLoginRecordResp, error) {
	out := new(GetAllLoginRecordResp)
	err := c.cc.Invoke(ctx, UserService_GetAllLoginRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*SendSmsResp, error) {
	out := new(SendSmsResp)
	err := c.cc.Invoke(ctx, UserService_SendSms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifySms(ctx context.Context, in *VerifySmsReq, opts ...grpc.CallOption) (*VerifySmsResp, error) {
	out := new(VerifySmsResp)
	err := c.cc.Invoke(ctx, UserService_VerifySms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetCaptchaCode(ctx context.Context, in *GetCaptchaCodeReq, opts ...grpc.CallOption) (*GetCaptchaCodeResp, error) {
	out := new(GetCaptchaCodeResp)
	err := c.cc.Invoke(ctx, UserService_GetCaptchaCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyCaptchaCode(ctx context.Context, in *VerifyCaptchaCodeReq, opts ...grpc.CallOption) (*VerifyCaptchaCodeResp, error) {
	out := new(VerifyCaptchaCodeResp)
	err := c.cc.Invoke(ctx, UserService_VerifyCaptchaCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReportUser(ctx context.Context, in *ReportUserReq, opts ...grpc.CallOption) (*ReportUserResp, error) {
	out := new(ReportUserResp)
	err := c.cc.Invoke(ctx, UserService_ReportUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchCreateZombieUser(ctx context.Context, in *BatchCreateZombieUserReq, opts ...grpc.CallOption) (*BatchCreateZombieUserResp, error) {
	out := new(BatchCreateZombieUserResp)
	err := c.cc.Invoke(ctx, UserService_BatchCreateZombieUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DestroyAccount(ctx context.Context, in *DestroyAccountReq, opts ...grpc.CallOption) (*DestroyAccountResp, error) {
	out := new(DestroyAccountResp)
	err := c.cc.Invoke(ctx, UserService_DestroyAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RecoverAccount(ctx context.Context, in *RecoverAccountReq, opts ...grpc.CallOption) (*RecoverAccountResp, error) {
	out := new(RecoverAccountResp)
	err := c.cc.Invoke(ctx, UserService_RecoverAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	ConfirmRegister(context.Context, *ConfirmRegisterReq) (*ConfirmRegisterResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	MapUserByIds(context.Context, *MapUserByIdsReq) (*MapUserByIdsResp, error)
	BatchGetUserBaseInfo(context.Context, *BatchGetUserBaseInfoReq) (*BatchGetUserBaseInfoResp, error)
	SearchUsersByKeyword(context.Context, *SearchUsersByKeywordReq) (*SearchUsersByKeywordResp, error)
	GetUserHome(context.Context, *GetUserHomeReq) (*GetUserHomeResp, error)
	GetUserSettings(context.Context, *GetUserSettingsReq) (*GetUserSettingsResp, error)
	SetUserSettings(context.Context, *SetUserSettingsReq) (*SetUserSettingsResp, error)
	// AfterConnect conn hook
	AfterConnect(context.Context, *AfterConnectReq) (*CommonResp, error)
	// AfterDisconnect conn hook
	AfterDisconnect(context.Context, *AfterDisconnectReq) (*CommonResp, error)
	BatchGetUserAllDevices(context.Context, *BatchGetUserAllDevicesReq) (*BatchGetUserAllDevicesResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	UpdateUserPassword(context.Context, *UpdateUserPasswordReq) (*UpdateUserPasswordResp, error)
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error)
	GetAllUserInvitationCode(context.Context, *GetAllUserInvitationCodeReq) (*GetAllUserInvitationCodeResp, error)
	GetUserInvitationCodeDetail(context.Context, *GetUserInvitationCodeDetailReq) (*GetUserInvitationCodeDetailResp, error)
	AddUserInvitationCode(context.Context, *AddUserInvitationCodeReq) (*AddUserInvitationCodeResp, error)
	UpdateUserInvitationCode(context.Context, *UpdateUserInvitationCodeReq) (*UpdateUserInvitationCodeResp, error)
	DeleteUserInvitationCode(context.Context, *DeleteUserInvitationCodeReq) (*DeleteUserInvitationCodeResp, error)
	GetAllUserIpWhiteList(context.Context, *GetAllUserIpWhiteListReq) (*GetAllUserIpWhiteListResp, error)
	GetUserIpWhiteListDetail(context.Context, *GetUserIpWhiteListDetailReq) (*GetUserIpWhiteListDetailResp, error)
	AddUserIpWhiteList(context.Context, *AddUserIpWhiteListReq) (*AddUserIpWhiteListResp, error)
	UpdateUserIpWhiteList(context.Context, *UpdateUserIpWhiteListReq) (*UpdateUserIpWhiteListResp, error)
	DeleteUserIpWhiteList(context.Context, *DeleteUserIpWhiteListReq) (*DeleteUserIpWhiteListResp, error)
	GetAllUserIpBlackList(context.Context, *GetAllUserIpBlackListReq) (*GetAllUserIpBlackListResp, error)
	GetUserIpBlackListDetail(context.Context, *GetUserIpBlackListDetailReq) (*GetUserIpBlackListDetailResp, error)
	AddUserIpBlackList(context.Context, *AddUserIpBlackListReq) (*AddUserIpBlackListResp, error)
	UpdateUserIpBlackList(context.Context, *UpdateUserIpBlackListReq) (*UpdateUserIpBlackListResp, error)
	DeleteUserIpBlackList(context.Context, *DeleteUserIpBlackListReq) (*DeleteUserIpBlackListResp, error)
	GetAllUserDefaultConv(context.Context, *GetAllUserDefaultConvReq) (*GetAllUserDefaultConvResp, error)
	GetUserDefaultConvDetail(context.Context, *GetUserDefaultConvDetailReq) (*GetUserDefaultConvDetailResp, error)
	AddUserDefaultConv(context.Context, *AddUserDefaultConvReq) (*AddUserDefaultConvResp, error)
	UpdateUserDefaultConv(context.Context, *UpdateUserDefaultConvReq) (*UpdateUserDefaultConvResp, error)
	DeleteUserDefaultConv(context.Context, *DeleteUserDefaultConvReq) (*DeleteUserDefaultConvResp, error)
	GetAllUserModel(context.Context, *GetAllUserModelReq) (*GetAllUserModelResp, error)
	GetUserModelDetail(context.Context, *GetUserModelDetailReq) (*GetUserModelDetailResp, error)
	AddUserModel(context.Context, *AddUserModelReq) (*AddUserModelResp, error)
	UpdateUserModel(context.Context, *UpdateUserModelReq) (*UpdateUserModelResp, error)
	DeleteUserModel(context.Context, *DeleteUserModelReq) (*DeleteUserModelResp, error)
	SwitchUserModel(context.Context, *SwitchUserModelReq) (*SwitchUserModelResp, error)
	GetAllLoginRecord(context.Context, *GetAllLoginRecordReq) (*GetAllLoginRecordResp, error)
	SendSms(context.Context, *SendSmsReq) (*SendSmsResp, error)
	VerifySms(context.Context, *VerifySmsReq) (*VerifySmsResp, error)
	GetCaptchaCode(context.Context, *GetCaptchaCodeReq) (*GetCaptchaCodeResp, error)
	VerifyCaptchaCode(context.Context, *VerifyCaptchaCodeReq) (*VerifyCaptchaCodeResp, error)
	ReportUser(context.Context, *ReportUserReq) (*ReportUserResp, error)
	BatchCreateZombieUser(context.Context, *BatchCreateZombieUserReq) (*BatchCreateZombieUserResp, error)
	DestroyAccount(context.Context, *DestroyAccountReq) (*DestroyAccountResp, error)
	RecoverAccount(context.Context, *RecoverAccountReq) (*RecoverAccountResp, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) ConfirmRegister(context.Context, *ConfirmRegisterReq) (*ConfirmRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRegister not implemented")
}
func (UnimplementedUserServiceServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) MapUserByIds(context.Context, *MapUserByIdsReq) (*MapUserByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapUserByIds not implemented")
}
func (UnimplementedUserServiceServer) BatchGetUserBaseInfo(context.Context, *BatchGetUserBaseInfoReq) (*BatchGetUserBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserBaseInfo not implemented")
}
func (UnimplementedUserServiceServer) SearchUsersByKeyword(context.Context, *SearchUsersByKeywordReq) (*SearchUsersByKeywordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsersByKeyword not implemented")
}
func (UnimplementedUserServiceServer) GetUserHome(context.Context, *GetUserHomeReq) (*GetUserHomeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserHome not implemented")
}
func (UnimplementedUserServiceServer) GetUserSettings(context.Context, *GetUserSettingsReq) (*GetUserSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSettings not implemented")
}
func (UnimplementedUserServiceServer) SetUserSettings(context.Context, *SetUserSettingsReq) (*SetUserSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserSettings not implemented")
}
func (UnimplementedUserServiceServer) AfterConnect(context.Context, *AfterConnectReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterConnect not implemented")
}
func (UnimplementedUserServiceServer) AfterDisconnect(context.Context, *AfterDisconnectReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterDisconnect not implemented")
}
func (UnimplementedUserServiceServer) BatchGetUserAllDevices(context.Context, *BatchGetUserAllDevicesReq) (*BatchGetUserAllDevicesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserAllDevices not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserPassword(context.Context, *UpdateUserPasswordReq) (*UpdateUserPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedUserServiceServer) ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserServiceServer) GetAllUserInvitationCode(context.Context, *GetAllUserInvitationCodeReq) (*GetAllUserInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserInvitationCode not implemented")
}
func (UnimplementedUserServiceServer) GetUserInvitationCodeDetail(context.Context, *GetUserInvitationCodeDetailReq) (*GetUserInvitationCodeDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInvitationCodeDetail not implemented")
}
func (UnimplementedUserServiceServer) AddUserInvitationCode(context.Context, *AddUserInvitationCodeReq) (*AddUserInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserInvitationCode not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserInvitationCode(context.Context, *UpdateUserInvitationCodeReq) (*UpdateUserInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInvitationCode not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserInvitationCode(context.Context, *DeleteUserInvitationCodeReq) (*DeleteUserInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInvitationCode not implemented")
}
func (UnimplementedUserServiceServer) GetAllUserIpWhiteList(context.Context, *GetAllUserIpWhiteListReq) (*GetAllUserIpWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserIpWhiteList not implemented")
}
func (UnimplementedUserServiceServer) GetUserIpWhiteListDetail(context.Context, *GetUserIpWhiteListDetailReq) (*GetUserIpWhiteListDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIpWhiteListDetail not implemented")
}
func (UnimplementedUserServiceServer) AddUserIpWhiteList(context.Context, *AddUserIpWhiteListReq) (*AddUserIpWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserIpWhiteList not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserIpWhiteList(context.Context, *UpdateUserIpWhiteListReq) (*UpdateUserIpWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIpWhiteList not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserIpWhiteList(context.Context, *DeleteUserIpWhiteListReq) (*DeleteUserIpWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserIpWhiteList not implemented")
}
func (UnimplementedUserServiceServer) GetAllUserIpBlackList(context.Context, *GetAllUserIpBlackListReq) (*GetAllUserIpBlackListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserIpBlackList not implemented")
}
func (UnimplementedUserServiceServer) GetUserIpBlackListDetail(context.Context, *GetUserIpBlackListDetailReq) (*GetUserIpBlackListDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIpBlackListDetail not implemented")
}
func (UnimplementedUserServiceServer) AddUserIpBlackList(context.Context, *AddUserIpBlackListReq) (*AddUserIpBlackListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserIpBlackList not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserIpBlackList(context.Context, *UpdateUserIpBlackListReq) (*UpdateUserIpBlackListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIpBlackList not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserIpBlackList(context.Context, *DeleteUserIpBlackListReq) (*DeleteUserIpBlackListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserIpBlackList not implemented")
}
func (UnimplementedUserServiceServer) GetAllUserDefaultConv(context.Context, *GetAllUserDefaultConvReq) (*GetAllUserDefaultConvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserDefaultConv not implemented")
}
func (UnimplementedUserServiceServer) GetUserDefaultConvDetail(context.Context, *GetUserDefaultConvDetailReq) (*GetUserDefaultConvDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDefaultConvDetail not implemented")
}
func (UnimplementedUserServiceServer) AddUserDefaultConv(context.Context, *AddUserDefaultConvReq) (*AddUserDefaultConvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserDefaultConv not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserDefaultConv(context.Context, *UpdateUserDefaultConvReq) (*UpdateUserDefaultConvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDefaultConv not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserDefaultConv(context.Context, *DeleteUserDefaultConvReq) (*DeleteUserDefaultConvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserDefaultConv not implemented")
}
func (UnimplementedUserServiceServer) GetAllUserModel(context.Context, *GetAllUserModelReq) (*GetAllUserModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserModel not implemented")
}
func (UnimplementedUserServiceServer) GetUserModelDetail(context.Context, *GetUserModelDetailReq) (*GetUserModelDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserModelDetail not implemented")
}
func (UnimplementedUserServiceServer) AddUserModel(context.Context, *AddUserModelReq) (*AddUserModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserModel not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserModel(context.Context, *UpdateUserModelReq) (*UpdateUserModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserModel not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserModel(context.Context, *DeleteUserModelReq) (*DeleteUserModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserModel not implemented")
}
func (UnimplementedUserServiceServer) SwitchUserModel(context.Context, *SwitchUserModelReq) (*SwitchUserModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchUserModel not implemented")
}
func (UnimplementedUserServiceServer) GetAllLoginRecord(context.Context, *GetAllLoginRecordReq) (*GetAllLoginRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLoginRecord not implemented")
}
func (UnimplementedUserServiceServer) SendSms(context.Context, *SendSmsReq) (*SendSmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedUserServiceServer) VerifySms(context.Context, *VerifySmsReq) (*VerifySmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySms not implemented")
}
func (UnimplementedUserServiceServer) GetCaptchaCode(context.Context, *GetCaptchaCodeReq) (*GetCaptchaCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptchaCode not implemented")
}
func (UnimplementedUserServiceServer) VerifyCaptchaCode(context.Context, *VerifyCaptchaCodeReq) (*VerifyCaptchaCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCaptchaCode not implemented")
}
func (UnimplementedUserServiceServer) ReportUser(context.Context, *ReportUserReq) (*ReportUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUser not implemented")
}
func (UnimplementedUserServiceServer) BatchCreateZombieUser(context.Context, *BatchCreateZombieUserReq) (*BatchCreateZombieUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateZombieUser not implemented")
}
func (UnimplementedUserServiceServer) DestroyAccount(context.Context, *DestroyAccountReq) (*DestroyAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAccount not implemented")
}
func (UnimplementedUserServiceServer) RecoverAccount(context.Context, *RecoverAccountReq) (*RecoverAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAccount not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ConfirmRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ConfirmRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ConfirmRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ConfirmRegister(ctx, req.(*ConfirmRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_MapUserByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapUserByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).MapUserByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_MapUserByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).MapUserByIds(ctx, req.(*MapUserByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchGetUserBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchGetUserBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchGetUserBaseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchGetUserBaseInfo(ctx, req.(*BatchGetUserBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchUsersByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersByKeywordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUsersByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SearchUsersByKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUsersByKeyword(ctx, req.(*SearchUsersByKeywordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserHomeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserHome(ctx, req.(*GetUserHomeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserSettings(ctx, req.(*GetUserSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetUserSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetUserSettings(ctx, req.(*SetUserSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AfterConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AfterConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AfterConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AfterConnect(ctx, req.(*AfterConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AfterDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterDisconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AfterDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AfterDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AfterDisconnect(ctx, req.(*AfterDisconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchGetUserAllDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserAllDevicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchGetUserAllDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchGetUserAllDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchGetUserAllDevices(ctx, req.(*BatchGetUserAllDevicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUserInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUserInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllUserInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUserInvitationCode(ctx, req.(*GetAllUserInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInvitationCodeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInvitationCodeDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInvitationCodeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserInvitationCodeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInvitationCodeDetail(ctx, req.(*GetUserInvitationCodeDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserInvitationCode(ctx, req.(*AddUserInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserInvitationCode(ctx, req.(*UpdateUserInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserInvitationCode(ctx, req.(*DeleteUserInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUserIpWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserIpWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUserIpWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllUserIpWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUserIpWhiteList(ctx, req.(*GetAllUserIpWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserIpWhiteListDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIpWhiteListDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserIpWhiteListDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserIpWhiteListDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserIpWhiteListDetail(ctx, req.(*GetUserIpWhiteListDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserIpWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserIpWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserIpWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserIpWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserIpWhiteList(ctx, req.(*AddUserIpWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserIpWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIpWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserIpWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserIpWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserIpWhiteList(ctx, req.(*UpdateUserIpWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserIpWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserIpWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserIpWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserIpWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserIpWhiteList(ctx, req.(*DeleteUserIpWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUserIpBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserIpBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUserIpBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllUserIpBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUserIpBlackList(ctx, req.(*GetAllUserIpBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserIpBlackListDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIpBlackListDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserIpBlackListDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserIpBlackListDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserIpBlackListDetail(ctx, req.(*GetUserIpBlackListDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserIpBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserIpBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserIpBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserIpBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserIpBlackList(ctx, req.(*AddUserIpBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserIpBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIpBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserIpBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserIpBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserIpBlackList(ctx, req.(*UpdateUserIpBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserIpBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserIpBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserIpBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserIpBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserIpBlackList(ctx, req.(*DeleteUserIpBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUserDefaultConv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserDefaultConvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUserDefaultConv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllUserDefaultConv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUserDefaultConv(ctx, req.(*GetAllUserDefaultConvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserDefaultConvDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDefaultConvDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserDefaultConvDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserDefaultConvDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserDefaultConvDetail(ctx, req.(*GetUserDefaultConvDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserDefaultConv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserDefaultConvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserDefaultConv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserDefaultConv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserDefaultConv(ctx, req.(*AddUserDefaultConvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserDefaultConv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDefaultConvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserDefaultConv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserDefaultConv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserDefaultConv(ctx, req.(*UpdateUserDefaultConvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserDefaultConv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDefaultConvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserDefaultConv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserDefaultConv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserDefaultConv(ctx, req.(*DeleteUserDefaultConvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUserModel(ctx, req.(*GetAllUserModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserModelDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserModelDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserModelDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserModelDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserModelDetail(ctx, req.(*GetUserModelDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserModel(ctx, req.(*AddUserModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserModel(ctx, req.(*UpdateUserModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserModel(ctx, req.(*DeleteUserModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SwitchUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchUserModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SwitchUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SwitchUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SwitchUserModel(ctx, req.(*SwitchUserModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllLoginRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLoginRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllLoginRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllLoginRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllLoginRecord(ctx, req.(*GetAllLoginRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendSms(ctx, req.(*SendSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifySms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifySms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifySms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifySms(ctx, req.(*VerifySmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetCaptchaCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaptchaCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCaptchaCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetCaptchaCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCaptchaCode(ctx, req.(*GetCaptchaCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyCaptchaCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCaptchaCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyCaptchaCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyCaptchaCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyCaptchaCode(ctx, req.(*VerifyCaptchaCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReportUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReportUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ReportUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReportUser(ctx, req.(*ReportUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchCreateZombieUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateZombieUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchCreateZombieUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchCreateZombieUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchCreateZombieUser(ctx, req.(*BatchCreateZombieUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DestroyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DestroyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DestroyAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DestroyAccount(ctx, req.(*DestroyAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RecoverAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RecoverAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RecoverAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RecoverAccount(ctx, req.(*RecoverAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.userService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "ConfirmRegister",
			Handler:    _UserService_ConfirmRegister_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "MapUserByIds",
			Handler:    _UserService_MapUserByIds_Handler,
		},
		{
			MethodName: "BatchGetUserBaseInfo",
			Handler:    _UserService_BatchGetUserBaseInfo_Handler,
		},
		{
			MethodName: "SearchUsersByKeyword",
			Handler:    _UserService_SearchUsersByKeyword_Handler,
		},
		{
			MethodName: "GetUserHome",
			Handler:    _UserService_GetUserHome_Handler,
		},
		{
			MethodName: "GetUserSettings",
			Handler:    _UserService_GetUserSettings_Handler,
		},
		{
			MethodName: "SetUserSettings",
			Handler:    _UserService_SetUserSettings_Handler,
		},
		{
			MethodName: "AfterConnect",
			Handler:    _UserService_AfterConnect_Handler,
		},
		{
			MethodName: "AfterDisconnect",
			Handler:    _UserService_AfterDisconnect_Handler,
		},
		{
			MethodName: "BatchGetUserAllDevices",
			Handler:    _UserService_BatchGetUserAllDevices_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _UserService_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _UserService_UpdateUserPassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UserService_ResetPassword_Handler,
		},
		{
			MethodName: "GetAllUserInvitationCode",
			Handler:    _UserService_GetAllUserInvitationCode_Handler,
		},
		{
			MethodName: "GetUserInvitationCodeDetail",
			Handler:    _UserService_GetUserInvitationCodeDetail_Handler,
		},
		{
			MethodName: "AddUserInvitationCode",
			Handler:    _UserService_AddUserInvitationCode_Handler,
		},
		{
			MethodName: "UpdateUserInvitationCode",
			Handler:    _UserService_UpdateUserInvitationCode_Handler,
		},
		{
			MethodName: "DeleteUserInvitationCode",
			Handler:    _UserService_DeleteUserInvitationCode_Handler,
		},
		{
			MethodName: "GetAllUserIpWhiteList",
			Handler:    _UserService_GetAllUserIpWhiteList_Handler,
		},
		{
			MethodName: "GetUserIpWhiteListDetail",
			Handler:    _UserService_GetUserIpWhiteListDetail_Handler,
		},
		{
			MethodName: "AddUserIpWhiteList",
			Handler:    _UserService_AddUserIpWhiteList_Handler,
		},
		{
			MethodName: "UpdateUserIpWhiteList",
			Handler:    _UserService_UpdateUserIpWhiteList_Handler,
		},
		{
			MethodName: "DeleteUserIpWhiteList",
			Handler:    _UserService_DeleteUserIpWhiteList_Handler,
		},
		{
			MethodName: "GetAllUserIpBlackList",
			Handler:    _UserService_GetAllUserIpBlackList_Handler,
		},
		{
			MethodName: "GetUserIpBlackListDetail",
			Handler:    _UserService_GetUserIpBlackListDetail_Handler,
		},
		{
			MethodName: "AddUserIpBlackList",
			Handler:    _UserService_AddUserIpBlackList_Handler,
		},
		{
			MethodName: "UpdateUserIpBlackList",
			Handler:    _UserService_UpdateUserIpBlackList_Handler,
		},
		{
			MethodName: "DeleteUserIpBlackList",
			Handler:    _UserService_DeleteUserIpBlackList_Handler,
		},
		{
			MethodName: "GetAllUserDefaultConv",
			Handler:    _UserService_GetAllUserDefaultConv_Handler,
		},
		{
			MethodName: "GetUserDefaultConvDetail",
			Handler:    _UserService_GetUserDefaultConvDetail_Handler,
		},
		{
			MethodName: "AddUserDefaultConv",
			Handler:    _UserService_AddUserDefaultConv_Handler,
		},
		{
			MethodName: "UpdateUserDefaultConv",
			Handler:    _UserService_UpdateUserDefaultConv_Handler,
		},
		{
			MethodName: "DeleteUserDefaultConv",
			Handler:    _UserService_DeleteUserDefaultConv_Handler,
		},
		{
			MethodName: "GetAllUserModel",
			Handler:    _UserService_GetAllUserModel_Handler,
		},
		{
			MethodName: "GetUserModelDetail",
			Handler:    _UserService_GetUserModelDetail_Handler,
		},
		{
			MethodName: "AddUserModel",
			Handler:    _UserService_AddUserModel_Handler,
		},
		{
			MethodName: "UpdateUserModel",
			Handler:    _UserService_UpdateUserModel_Handler,
		},
		{
			MethodName: "DeleteUserModel",
			Handler:    _UserService_DeleteUserModel_Handler,
		},
		{
			MethodName: "SwitchUserModel",
			Handler:    _UserService_SwitchUserModel_Handler,
		},
		{
			MethodName: "GetAllLoginRecord",
			Handler:    _UserService_GetAllLoginRecord_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _UserService_SendSms_Handler,
		},
		{
			MethodName: "VerifySms",
			Handler:    _UserService_VerifySms_Handler,
		},
		{
			MethodName: "GetCaptchaCode",
			Handler:    _UserService_GetCaptchaCode_Handler,
		},
		{
			MethodName: "VerifyCaptchaCode",
			Handler:    _UserService_VerifyCaptchaCode_Handler,
		},
		{
			MethodName: "ReportUser",
			Handler:    _UserService_ReportUser_Handler,
		},
		{
			MethodName: "BatchCreateZombieUser",
			Handler:    _UserService_BatchCreateZombieUser_Handler,
		},
		{
			MethodName: "DestroyAccount",
			Handler:    _UserService_DestroyAccount_Handler,
		},
		{
			MethodName: "RecoverAccount",
			Handler:    _UserService_RecoverAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
