// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: group.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupDisturbOpt int32

const (
	// 接收消息但不提醒
	GroupDisturbOpt_DisturbReceive GroupDisturbOpt = 0
	// 收进群助手且不提醒
	GroupDisturbOpt_DisturbFold GroupDisturbOpt = 1
	// 屏蔽消息
	GroupDisturbOpt_DisturbBlock GroupDisturbOpt = 2
)

// Enum value maps for GroupDisturbOpt.
var (
	GroupDisturbOpt_name = map[int32]string{
		0: "DisturbReceive",
		1: "DisturbFold",
		2: "DisturbBlock",
	}
	GroupDisturbOpt_value = map[string]int32{
		"DisturbReceive": 0,
		"DisturbFold":    1,
		"DisturbBlock":   2,
	}
)

func (x GroupDisturbOpt) Enum() *GroupDisturbOpt {
	p := new(GroupDisturbOpt)
	*p = x
	return p
}

func (x GroupDisturbOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupDisturbOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[0].Descriptor()
}

func (GroupDisturbOpt) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[0]
}

func (x GroupDisturbOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupDisturbOpt.Descriptor instead.
func (GroupDisturbOpt) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{0}
}

type GroupRole int32

const (
	// 普通成员
	GroupRole_MEMBER GroupRole = 0
	// 管理员
	GroupRole_MANAGER GroupRole = 1
	// 群主
	GroupRole_OWNER GroupRole = 2
)

// Enum value maps for GroupRole.
var (
	GroupRole_name = map[int32]string{
		0: "MEMBER",
		1: "MANAGER",
		2: "OWNER",
	}
	GroupRole_value = map[string]int32{
		"MEMBER":  0,
		"MANAGER": 1,
		"OWNER":   2,
	}
)

func (x GroupRole) Enum() *GroupRole {
	p := new(GroupRole)
	*p = x
	return p
}

func (x GroupRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupRole) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[1].Descriptor()
}

func (GroupRole) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[1]
}

func (x GroupRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupRole.Descriptor instead.
func (GroupRole) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{1}
}

type GroupApplyHandleResult int32

const (
	// 未处理
	GroupApplyHandleResult_UNHANDLED GroupApplyHandleResult = 0
	// 同意
	GroupApplyHandleResult_AGREE GroupApplyHandleResult = 1
	// 拒绝
	GroupApplyHandleResult_REJECT GroupApplyHandleResult = 2
)

// Enum value maps for GroupApplyHandleResult.
var (
	GroupApplyHandleResult_name = map[int32]string{
		0: "UNHANDLED",
		1: "AGREE",
		2: "REJECT",
	}
	GroupApplyHandleResult_value = map[string]int32{
		"UNHANDLED": 0,
		"AGREE":     1,
		"REJECT":    2,
	}
)

func (x GroupApplyHandleResult) Enum() *GroupApplyHandleResult {
	p := new(GroupApplyHandleResult)
	*p = x
	return p
}

func (x GroupApplyHandleResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupApplyHandleResult) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[2].Descriptor()
}

func (GroupApplyHandleResult) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[2]
}

func (x GroupApplyHandleResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupApplyHandleResult.Descriptor instead.
func (GroupApplyHandleResult) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{2}
}

type GetMyGroupListReq_Opt int32

const (
	// 默认
	GetMyGroupListReq_DEFAULT GetMyGroupListReq_Opt = 0
	// 只获取id
	GetMyGroupListReq_ONLY_ID GetMyGroupListReq_Opt = 1
)

// Enum value maps for GetMyGroupListReq_Opt.
var (
	GetMyGroupListReq_Opt_name = map[int32]string{
		0: "DEFAULT",
		1: "ONLY_ID",
	}
	GetMyGroupListReq_Opt_value = map[string]int32{
		"DEFAULT": 0,
		"ONLY_ID": 1,
	}
)

func (x GetMyGroupListReq_Opt) Enum() *GetMyGroupListReq_Opt {
	p := new(GetMyGroupListReq_Opt)
	*p = x
	return p
}

func (x GetMyGroupListReq_Opt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMyGroupListReq_Opt) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[3].Descriptor()
}

func (GetMyGroupListReq_Opt) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[3]
}

func (x GetMyGroupListReq_Opt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMyGroupListReq_Opt.Descriptor instead.
func (GetMyGroupListReq_Opt) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{30, 0}
}

//CreateGroupReq 创建群聊
type CreateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 拉人进群
	Members []string `protobuf:"bytes,2,rep,name=members,proto3" json:"members"`
	// 群名称(可选参数)
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name"`
	// 群头像(可选参数)
	Avatar *string `protobuf:"bytes,4,opt,name=avatar,proto3,oneof" json:"avatar"`
}

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{0}
}

func (x *CreateGroupReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *CreateGroupReq) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CreateGroupReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateGroupReq) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

//CreateGroupResp 创建群聊
type CreateGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	// 群ID
	GroupId *string `protobuf:"bytes,2,opt,name=groupId,proto3,oneof" json:"groupId"`
}

func (x *CreateGroupResp) Reset() {
	*x = CreateGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResp) ProtoMessage() {}

func (x *CreateGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResp.ProtoReflect.Descriptor instead.
func (*CreateGroupResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{1}
}

func (x *CreateGroupResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *CreateGroupResp) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

//GetGroupHomeReq 获取群聊首页
type GetGroupHomeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
}

func (x *GetGroupHomeReq) Reset() {
	*x = GetGroupHomeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupHomeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupHomeReq) ProtoMessage() {}

func (x *GetGroupHomeReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupHomeReq.ProtoReflect.Descriptor instead.
func (*GetGroupHomeReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{2}
}

func (x *GetGroupHomeReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetGroupHomeReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

//GetGroupHomeResp 获取群聊首页
type GetGroupHomeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 群名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// 群头像
	Avatar string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar"`
	// 创建日期
	CreatedAt string `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt"`
	// 成员人数
	MemberCount int32 `protobuf:"varint,6,opt,name=memberCount,proto3" json:"memberCount"`
	// 群介绍
	Introduction     string                               `protobuf:"bytes,7,opt,name=introduction,proto3" json:"introduction"`
	MemberStatistics []*GetGroupHomeResp_MemberStatistics `protobuf:"bytes,21,rep,name=memberStatistics,proto3" json:"memberStatistics"`
}

func (x *GetGroupHomeResp) Reset() {
	*x = GetGroupHomeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupHomeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupHomeResp) ProtoMessage() {}

func (x *GetGroupHomeResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupHomeResp.ProtoReflect.Descriptor instead.
func (*GetGroupHomeResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{3}
}

func (x *GetGroupHomeResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetGroupHomeResp) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetGroupHomeResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupHomeResp) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GetGroupHomeResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetGroupHomeResp) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *GetGroupHomeResp) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *GetGroupHomeResp) GetMemberStatistics() []*GetGroupHomeResp_MemberStatistics {
	if x != nil {
		return x.MemberStatistics
	}
	return nil
}

//InviteFriendToGroupReq 邀请好友进群
type InviteFriendToGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 好友ID
	FriendIds []string `protobuf:"bytes,3,rep,name=friendIds,proto3" json:"friendIds"`
	MinSeq    *string  `protobuf:"bytes,4,opt,name=minSeq,proto3,oneof" json:"minSeq"` // 设置所有成员的最小seq
}

func (x *InviteFriendToGroupReq) Reset() {
	*x = InviteFriendToGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteFriendToGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteFriendToGroupReq) ProtoMessage() {}

func (x *InviteFriendToGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteFriendToGroupReq.ProtoReflect.Descriptor instead.
func (*InviteFriendToGroupReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{4}
}

func (x *InviteFriendToGroupReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *InviteFriendToGroupReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *InviteFriendToGroupReq) GetFriendIds() []string {
	if x != nil {
		return x.FriendIds
	}
	return nil
}

func (x *InviteFriendToGroupReq) GetMinSeq() string {
	if x != nil && x.MinSeq != nil {
		return *x.MinSeq
	}
	return ""
}

//InviteFriendToGroupResp 邀请好友进群
type InviteFriendToGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *InviteFriendToGroupResp) Reset() {
	*x = InviteFriendToGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteFriendToGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteFriendToGroupResp) ProtoMessage() {}

func (x *InviteFriendToGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteFriendToGroupResp.ProtoReflect.Descriptor instead.
func (*InviteFriendToGroupResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{5}
}

func (x *InviteFriendToGroupResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//CreateGroupNoticeReq 创建群公告
type CreateGroupNoticeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 公告标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	// 公告内容
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
}

func (x *CreateGroupNoticeReq) Reset() {
	*x = CreateGroupNoticeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupNoticeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupNoticeReq) ProtoMessage() {}

func (x *CreateGroupNoticeReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupNoticeReq.ProtoReflect.Descriptor instead.
func (*CreateGroupNoticeReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{6}
}

func (x *CreateGroupNoticeReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *CreateGroupNoticeReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateGroupNoticeReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateGroupNoticeReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

//CreateGroupNoticeResp 创建群公告
type CreateGroupNoticeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *CreateGroupNoticeResp) Reset() {
	*x = CreateGroupNoticeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupNoticeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupNoticeResp) ProtoMessage() {}

func (x *CreateGroupNoticeResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupNoticeResp.ProtoReflect.Descriptor instead.
func (*CreateGroupNoticeResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{7}
}

func (x *CreateGroupNoticeResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//DeleteGroupNoticeReq 删除群公告
type DeleteGroupNoticeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 公告ID
	NoticeId string `protobuf:"bytes,3,opt,name=noticeId,proto3" json:"noticeId"`
}

func (x *DeleteGroupNoticeReq) Reset() {
	*x = DeleteGroupNoticeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupNoticeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupNoticeReq) ProtoMessage() {}

func (x *DeleteGroupNoticeReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupNoticeReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupNoticeReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteGroupNoticeReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *DeleteGroupNoticeReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *DeleteGroupNoticeReq) GetNoticeId() string {
	if x != nil {
		return x.NoticeId
	}
	return ""
}

//DeleteGroupNoticeResp 删除群公告
type DeleteGroupNoticeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *DeleteGroupNoticeResp) Reset() {
	*x = DeleteGroupNoticeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupNoticeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupNoticeResp) ProtoMessage() {}

func (x *DeleteGroupNoticeResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupNoticeResp.ProtoReflect.Descriptor instead.
func (*DeleteGroupNoticeResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteGroupNoticeResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//EditGroupNoticeReq 编辑群公告
type EditGroupNoticeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 公告ID
	NoticeId string `protobuf:"bytes,3,opt,name=noticeId,proto3" json:"noticeId"`
	// 公告标题
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	// 公告内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content"`
}

func (x *EditGroupNoticeReq) Reset() {
	*x = EditGroupNoticeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditGroupNoticeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditGroupNoticeReq) ProtoMessage() {}

func (x *EditGroupNoticeReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditGroupNoticeReq.ProtoReflect.Descriptor instead.
func (*EditGroupNoticeReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{10}
}

func (x *EditGroupNoticeReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *EditGroupNoticeReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *EditGroupNoticeReq) GetNoticeId() string {
	if x != nil {
		return x.NoticeId
	}
	return ""
}

func (x *EditGroupNoticeReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EditGroupNoticeReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

//EditGroupNoticeResp 编辑群公告
type EditGroupNoticeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *EditGroupNoticeResp) Reset() {
	*x = EditGroupNoticeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditGroupNoticeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditGroupNoticeResp) ProtoMessage() {}

func (x *EditGroupNoticeResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditGroupNoticeResp.ProtoReflect.Descriptor instead.
func (*EditGroupNoticeResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{11}
}

func (x *EditGroupNoticeResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//GetGroupNoticeListReq 获取群公告列表
type GetGroupNoticeListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 分页参数
	Page *Page `protobuf:"bytes,3,opt,name=page,proto3,oneof" json:"page"`
}

func (x *GetGroupNoticeListReq) Reset() {
	*x = GetGroupNoticeListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupNoticeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupNoticeListReq) ProtoMessage() {}

func (x *GetGroupNoticeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupNoticeListReq.ProtoReflect.Descriptor instead.
func (*GetGroupNoticeListReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{12}
}

func (x *GetGroupNoticeListReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetGroupNoticeListReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetGroupNoticeListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type GroupNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 公告ID
	NoticeId string `protobuf:"bytes,1,opt,name=noticeId,proto3" json:"noticeId"`
	// 公告标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 公告内容
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
	// 创建日期
	CreatedAt string `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *GroupNotice) Reset() {
	*x = GroupNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNotice) ProtoMessage() {}

func (x *GroupNotice) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNotice.ProtoReflect.Descriptor instead.
func (*GroupNotice) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{13}
}

func (x *GroupNotice) GetNoticeId() string {
	if x != nil {
		return x.NoticeId
	}
	return ""
}

func (x *GroupNotice) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GroupNotice) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GroupNotice) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

//GetGroupNoticeListResp 获取群公告列表
type GetGroupNoticeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	// 公告列表
	GroupNotices []*GroupNotice `protobuf:"bytes,2,rep,name=groupNotices,proto3" json:"groupNotices"`
}

func (x *GetGroupNoticeListResp) Reset() {
	*x = GetGroupNoticeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupNoticeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupNoticeListResp) ProtoMessage() {}

func (x *GetGroupNoticeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupNoticeListResp.ProtoReflect.Descriptor instead.
func (*GetGroupNoticeListResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{14}
}

func (x *GetGroupNoticeListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetGroupNoticeListResp) GetGroupNotices() []*GroupNotice {
	if x != nil {
		return x.GroupNotices
	}
	return nil
}

//SetGroupMemberInfoReq 设置群成员信息
type SetGroupMemberInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 群成员ID
	MemberId string `protobuf:"bytes,3,opt,name=memberId,proto3" json:"memberId"`
	// notice content
	Notice string `protobuf:"bytes,4,opt,name=notice,proto3" json:"notice"`
	// 群备注
	Remark *string `protobuf:"bytes,11,opt,name=remark,proto3,oneof" json:"remark"`
	// 群角色
	Role *GroupRole `protobuf:"varint,12,opt,name=role,proto3,enum=pb.GroupRole,oneof" json:"role"`
	// 解除禁言时间
	UnbanTime *int64 `protobuf:"varint,13,opt,name=unbanTime,proto3,oneof" json:"unbanTime"`
	// 群备注
	GroupRemark *string `protobuf:"bytes,14,opt,name=groupRemark,proto3,oneof" json:"groupRemark"`
}

func (x *SetGroupMemberInfoReq) Reset() {
	*x = SetGroupMemberInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupMemberInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupMemberInfoReq) ProtoMessage() {}

func (x *SetGroupMemberInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupMemberInfoReq.ProtoReflect.Descriptor instead.
func (*SetGroupMemberInfoReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{15}
}

func (x *SetGroupMemberInfoReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *SetGroupMemberInfoReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SetGroupMemberInfoReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *SetGroupMemberInfoReq) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *SetGroupMemberInfoReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *SetGroupMemberInfoReq) GetRole() GroupRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return GroupRole_MEMBER
}

func (x *SetGroupMemberInfoReq) GetUnbanTime() int64 {
	if x != nil && x.UnbanTime != nil {
		return *x.UnbanTime
	}
	return 0
}

func (x *SetGroupMemberInfoReq) GetGroupRemark() string {
	if x != nil && x.GroupRemark != nil {
		return *x.GroupRemark
	}
	return ""
}

//SetGroupMemberInfoResp 设置群成员信息
type SetGroupMemberInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *SetGroupMemberInfoResp) Reset() {
	*x = SetGroupMemberInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupMemberInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupMemberInfoResp) ProtoMessage() {}

func (x *SetGroupMemberInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupMemberInfoResp.ProtoReflect.Descriptor instead.
func (*SetGroupMemberInfoResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{16}
}

func (x *SetGroupMemberInfoResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//GetGroupMemberInfoReq 获取群成员信息
type GetGroupMemberInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 群成员ID
	MemberId string `protobuf:"bytes,3,opt,name=memberId,proto3" json:"memberId"`
}

func (x *GetGroupMemberInfoReq) Reset() {
	*x = GetGroupMemberInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberInfoReq) ProtoMessage() {}

func (x *GetGroupMemberInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberInfoReq.ProtoReflect.Descriptor instead.
func (*GetGroupMemberInfoReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{17}
}

func (x *GetGroupMemberInfoReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetGroupMemberInfoReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetGroupMemberInfoReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type GroupMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 群id
	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId"`
	// 群成员id
	MemberId string `protobuf:"bytes,2,opt,name=memberId,proto3" json:"memberId"`
	// 群内显示的昵称
	Remark string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark"`
	// 群聊的备注
	GroupRemark string `protobuf:"bytes,4,opt,name=groupRemark,proto3" json:"groupRemark"`
	// 置顶选项
	Top bool `protobuf:"varint,5,opt,name=top,proto3" json:"top"`
	// 免打扰选项
	NoDisturb bool `protobuf:"varint,6,opt,name=noDisturb,proto3" json:"noDisturb"`
	// 免打扰选项更多设置
	DisturbMore GroupDisturbOpt `protobuf:"varint,7,opt,name=disturbMore,proto3,enum=pb.GroupDisturbOpt" json:"disturbMore"`
	// 聊天背景图
	ChatBg string `protobuf:"bytes,8,opt,name=chatBg,proto3" json:"chatBg"`
	// 群角色
	Role GroupRole `protobuf:"varint,9,opt,name=role,proto3,enum=pb.GroupRole" json:"role"`
	// 解封时间
	UnbanTime int64 `protobuf:"varint,10,opt,name=unbanTime,proto3" json:"unbanTime"`
	// 预览
	Preview bool `protobuf:"varint,11,opt,name=preview,proto3" json:"preview"`
}

func (x *GroupMemberInfo) Reset() {
	*x = GroupMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberInfo) ProtoMessage() {}

func (x *GroupMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberInfo.ProtoReflect.Descriptor instead.
func (*GroupMemberInfo) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{18}
}

func (x *GroupMemberInfo) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupMemberInfo) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *GroupMemberInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *GroupMemberInfo) GetGroupRemark() string {
	if x != nil {
		return x.GroupRemark
	}
	return ""
}

func (x *GroupMemberInfo) GetTop() bool {
	if x != nil {
		return x.Top
	}
	return false
}

func (x *GroupMemberInfo) GetNoDisturb() bool {
	if x != nil {
		return x.NoDisturb
	}
	return false
}

func (x *GroupMemberInfo) GetDisturbMore() GroupDisturbOpt {
	if x != nil {
		return x.DisturbMore
	}
	return GroupDisturbOpt_DisturbReceive
}

func (x *GroupMemberInfo) GetChatBg() string {
	if x != nil {
		return x.ChatBg
	}
	return ""
}

func (x *GroupMemberInfo) GetRole() GroupRole {
	if x != nil {
		return x.Role
	}
	return GroupRole_MEMBER
}

func (x *GroupMemberInfo) GetUnbanTime() int64 {
	if x != nil {
		return x.UnbanTime
	}
	return 0
}

func (x *GroupMemberInfo) GetPreview() bool {
	if x != nil {
		return x.Preview
	}
	return false
}

//MapGroupMemberInfoByIdsReq 批量获取群成员信息
type MapGroupMemberInfoByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 群成员ID
	MemberIds []string `protobuf:"bytes,3,rep,name=memberIds,proto3" json:"memberIds"`
}

func (x *MapGroupMemberInfoByIdsReq) Reset() {
	*x = MapGroupMemberInfoByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapGroupMemberInfoByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapGroupMemberInfoByIdsReq) ProtoMessage() {}

func (x *MapGroupMemberInfoByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapGroupMemberInfoByIdsReq.ProtoReflect.Descriptor instead.
func (*MapGroupMemberInfoByIdsReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{19}
}

func (x *MapGroupMemberInfoByIdsReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *MapGroupMemberInfoByIdsReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *MapGroupMemberInfoByIdsReq) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

//MapGroupMemberInfoByIdsResp 批量获取群成员信息
type MapGroupMemberInfoByIdsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	// 群成员信息
	GroupMemberInfoMap map[string]*GroupMemberInfo `protobuf:"bytes,2,rep,name=groupMemberInfoMap,proto3" json:"groupMemberInfoMap" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapGroupMemberInfoByIdsResp) Reset() {
	*x = MapGroupMemberInfoByIdsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapGroupMemberInfoByIdsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapGroupMemberInfoByIdsResp) ProtoMessage() {}

func (x *MapGroupMemberInfoByIdsResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapGroupMemberInfoByIdsResp.ProtoReflect.Descriptor instead.
func (*MapGroupMemberInfoByIdsResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{20}
}

func (x *MapGroupMemberInfoByIdsResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *MapGroupMemberInfoByIdsResp) GetGroupMemberInfoMap() map[string]*GroupMemberInfo {
	if x != nil {
		return x.GroupMemberInfoMap
	}
	return nil
}

//GetGroupMemberInfoResp 获取群成员信息
type GetGroupMemberInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	// 群成员信息
	GroupMemberInfo *GroupMemberInfo `protobuf:"bytes,2,opt,name=groupMemberInfo,proto3" json:"groupMemberInfo"`
}

func (x *GetGroupMemberInfoResp) Reset() {
	*x = GetGroupMemberInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberInfoResp) ProtoMessage() {}

func (x *GetGroupMemberInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberInfoResp.ProtoReflect.Descriptor instead.
func (*GetGroupMemberInfoResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{21}
}

func (x *GetGroupMemberInfoResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetGroupMemberInfoResp) GetGroupMemberInfo() *GroupMemberInfo {
	if x != nil {
		return x.GroupMemberInfo
	}
	return nil
}

//EditGroupInfoReq 编辑群资料
type EditGroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 群名称
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name"`
	// 群头像
	Avatar *string `protobuf:"bytes,4,opt,name=avatar,proto3,oneof" json:"avatar"`
	// 群介绍
	Introduction *string `protobuf:"bytes,5,opt,name=introduction,proto3,oneof" json:"introduction"`
}

func (x *EditGroupInfoReq) Reset() {
	*x = EditGroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditGroupInfoReq) ProtoMessage() {}

func (x *EditGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditGroupInfoReq.ProtoReflect.Descriptor instead.
func (*EditGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{22}
}

func (x *EditGroupInfoReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *EditGroupInfoReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *EditGroupInfoReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EditGroupInfoReq) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *EditGroupInfoReq) GetIntroduction() string {
	if x != nil && x.Introduction != nil {
		return *x.Introduction
	}
	return ""
}

//EditGroupInfoResp 编辑群资料
type EditGroupInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *EditGroupInfoResp) Reset() {
	*x = EditGroupInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditGroupInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditGroupInfoResp) ProtoMessage() {}

func (x *EditGroupInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditGroupInfoResp.ProtoReflect.Descriptor instead.
func (*EditGroupInfoResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{23}
}

func (x *EditGroupInfoResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//TransferGroupOwnerReq 转让群主
type TransferGroupOwnerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 新群主ID
	NewOwner string `protobuf:"bytes,3,opt,name=newOwner,proto3" json:"newOwner"`
}

func (x *TransferGroupOwnerReq) Reset() {
	*x = TransferGroupOwnerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferGroupOwnerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferGroupOwnerReq) ProtoMessage() {}

func (x *TransferGroupOwnerReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferGroupOwnerReq.ProtoReflect.Descriptor instead.
func (*TransferGroupOwnerReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{24}
}

func (x *TransferGroupOwnerReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *TransferGroupOwnerReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *TransferGroupOwnerReq) GetNewOwner() string {
	if x != nil {
		return x.NewOwner
	}
	return ""
}

//TransferGroupOwnerResp 转让群主
type TransferGroupOwnerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *TransferGroupOwnerResp) Reset() {
	*x = TransferGroupOwnerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferGroupOwnerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferGroupOwnerResp) ProtoMessage() {}

func (x *TransferGroupOwnerResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferGroupOwnerResp.ProtoReflect.Descriptor instead.
func (*TransferGroupOwnerResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{25}
}

func (x *TransferGroupOwnerResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//KickGroupMemberReq 踢出群成员
type KickGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 群成员ID
	MemberId string `protobuf:"bytes,3,opt,name=memberId,proto3" json:"memberId"`
}

func (x *KickGroupMemberReq) Reset() {
	*x = KickGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickGroupMemberReq) ProtoMessage() {}

func (x *KickGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickGroupMemberReq.ProtoReflect.Descriptor instead.
func (*KickGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{26}
}

func (x *KickGroupMemberReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *KickGroupMemberReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *KickGroupMemberReq) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

//KickGroupMemberResp 踢出群成员
type KickGroupMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *KickGroupMemberResp) Reset() {
	*x = KickGroupMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickGroupMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickGroupMemberResp) ProtoMessage() {}

func (x *KickGroupMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickGroupMemberResp.ProtoReflect.Descriptor instead.
func (*KickGroupMemberResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{27}
}

func (x *KickGroupMemberResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//GetGroupMemberListReq 获取群成员列表
type GetGroupMemberListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 分页
	Page   *Page                                           `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
	Filter *GetGroupMemberListReq_GetGroupMemberListFilter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter"`
	Opt    *GetGroupMemberListReq_GetGroupMemberListOpt    `protobuf:"bytes,5,opt,name=opt,proto3" json:"opt"`
}

func (x *GetGroupMemberListReq) Reset() {
	*x = GetGroupMemberListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberListReq) ProtoMessage() {}

func (x *GetGroupMemberListReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberListReq.ProtoReflect.Descriptor instead.
func (*GetGroupMemberListReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{28}
}

func (x *GetGroupMemberListReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetGroupMemberListReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetGroupMemberListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetGroupMemberListReq) GetFilter() *GetGroupMemberListReq_GetGroupMemberListFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetGroupMemberListReq) GetOpt() *GetGroupMemberListReq_GetGroupMemberListOpt {
	if x != nil {
		return x.Opt
	}
	return nil
}

//GetGroupMemberListResp 获取群成员列表
type GetGroupMemberListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	// 群成员列表
	GroupMemberList []*GroupMemberInfo `protobuf:"bytes,2,rep,name=groupMemberList,proto3" json:"groupMemberList"`
}

func (x *GetGroupMemberListResp) Reset() {
	*x = GetGroupMemberListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberListResp) ProtoMessage() {}

func (x *GetGroupMemberListResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberListResp.ProtoReflect.Descriptor instead.
func (*GetGroupMemberListResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{29}
}

func (x *GetGroupMemberListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetGroupMemberListResp) GetGroupMemberList() []*GroupMemberInfo {
	if x != nil {
		return x.GroupMemberList
	}
	return nil
}

//GetMyGroupListReq 获取我的群聊列表
type GetMyGroupListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 分页
	Page   *Page                     `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	Filter *GetMyGroupListReq_Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter"`
	// 获取选项
	Opt GetMyGroupListReq_Opt `protobuf:"varint,10,opt,name=opt,proto3,enum=pb.GetMyGroupListReq_Opt" json:"opt"`
}

func (x *GetMyGroupListReq) Reset() {
	*x = GetMyGroupListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyGroupListReq) ProtoMessage() {}

func (x *GetMyGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyGroupListReq.ProtoReflect.Descriptor instead.
func (*GetMyGroupListReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{30}
}

func (x *GetMyGroupListReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetMyGroupListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetMyGroupListReq) GetFilter() *GetMyGroupListReq_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMyGroupListReq) GetOpt() GetMyGroupListReq_Opt {
	if x != nil {
		return x.Opt
	}
	return GetMyGroupListReq_DEFAULT
}

type GroupBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar"`
}

func (x *GroupBaseInfo) Reset() {
	*x = GroupBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBaseInfo) ProtoMessage() {}

func (x *GroupBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBaseInfo.ProtoReflect.Descriptor instead.
func (*GroupBaseInfo) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{31}
}

func (x *GroupBaseInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GroupBaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupBaseInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

//GetMyGroupListResp 获取我的群聊列表
type GetMyGroupListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	// 群聊列表
	GroupMap map[string]*GroupBaseInfo `protobuf:"bytes,2,rep,name=groupMap,proto3" json:"groupMap" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ids
	Ids []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids"`
}

func (x *GetMyGroupListResp) Reset() {
	*x = GetMyGroupListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyGroupListResp) ProtoMessage() {}

func (x *GetMyGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyGroupListResp.ProtoReflect.Descriptor instead.
func (*GetMyGroupListResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{32}
}

func (x *GetMyGroupListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetMyGroupListResp) GetGroupMap() map[string]*GroupBaseInfo {
	if x != nil {
		return x.GroupMap
	}
	return nil
}

func (x *GetMyGroupListResp) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

//mapGroupByIds 获取群聊信息
type MapGroupByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	Ids       []string   `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids"`
}

func (x *MapGroupByIdsReq) Reset() {
	*x = MapGroupByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapGroupByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapGroupByIdsReq) ProtoMessage() {}

func (x *MapGroupByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapGroupByIdsReq.ProtoReflect.Descriptor instead.
func (*MapGroupByIdsReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{33}
}

func (x *MapGroupByIdsReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *MapGroupByIdsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type MapGroupByIdsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp       `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	GroupMap   map[string][]byte `protobuf:"bytes,2,rep,name=groupMap,proto3" json:"groupMap" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapGroupByIdsResp) Reset() {
	*x = MapGroupByIdsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapGroupByIdsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapGroupByIdsResp) ProtoMessage() {}

func (x *MapGroupByIdsResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapGroupByIdsResp.ProtoReflect.Descriptor instead.
func (*MapGroupByIdsResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{34}
}

func (x *MapGroupByIdsResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *MapGroupByIdsResp) GetGroupMap() map[string][]byte {
	if x != nil {
		return x.GroupMap
	}
	return nil
}

//syncGroupMemberCount 同步群成员数量
type SyncGroupMemberCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
}

func (x *SyncGroupMemberCountReq) Reset() {
	*x = SyncGroupMemberCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncGroupMemberCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncGroupMemberCountReq) ProtoMessage() {}

func (x *SyncGroupMemberCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncGroupMemberCountReq.ProtoReflect.Descriptor instead.
func (*SyncGroupMemberCountReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{35}
}

func (x *SyncGroupMemberCountReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *SyncGroupMemberCountReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type SyncGroupMemberCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *SyncGroupMemberCountResp) Reset() {
	*x = SyncGroupMemberCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncGroupMemberCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncGroupMemberCountResp) ProtoMessage() {}

func (x *SyncGroupMemberCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncGroupMemberCountResp.ProtoReflect.Descriptor instead.
func (*SyncGroupMemberCountResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{36}
}

func (x *SyncGroupMemberCountResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//applyToBeGroupMember 申请加入群聊
type ApplyToBeGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 申请理由
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason"`
}

func (x *ApplyToBeGroupMemberReq) Reset() {
	*x = ApplyToBeGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyToBeGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyToBeGroupMemberReq) ProtoMessage() {}

func (x *ApplyToBeGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyToBeGroupMemberReq.ProtoReflect.Descriptor instead.
func (*ApplyToBeGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{37}
}

func (x *ApplyToBeGroupMemberReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *ApplyToBeGroupMemberReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ApplyToBeGroupMemberReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ApplyToBeGroupMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *ApplyToBeGroupMemberResp) Reset() {
	*x = ApplyToBeGroupMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyToBeGroupMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyToBeGroupMemberResp) ProtoMessage() {}

func (x *ApplyToBeGroupMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyToBeGroupMemberResp.ProtoReflect.Descriptor instead.
func (*ApplyToBeGroupMemberResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{38}
}

func (x *ApplyToBeGroupMemberResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//handleGroupApply 处理群聊申请
type HandleGroupApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 申请ID
	ApplyId string `protobuf:"bytes,2,opt,name=applyId,proto3" json:"applyId"`
	// 处理结果
	Result GroupApplyHandleResult `protobuf:"varint,3,opt,name=result,proto3,enum=pb.GroupApplyHandleResult" json:"result"`
}

func (x *HandleGroupApplyReq) Reset() {
	*x = HandleGroupApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleGroupApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleGroupApplyReq) ProtoMessage() {}

func (x *HandleGroupApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleGroupApplyReq.ProtoReflect.Descriptor instead.
func (*HandleGroupApplyReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{39}
}

func (x *HandleGroupApplyReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *HandleGroupApplyReq) GetApplyId() string {
	if x != nil {
		return x.ApplyId
	}
	return ""
}

func (x *HandleGroupApplyReq) GetResult() GroupApplyHandleResult {
	if x != nil {
		return x.Result
	}
	return GroupApplyHandleResult_UNHANDLED
}

type HandleGroupApplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *HandleGroupApplyResp) Reset() {
	*x = HandleGroupApplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleGroupApplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleGroupApplyResp) ProtoMessage() {}

func (x *HandleGroupApplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleGroupApplyResp.ProtoReflect.Descriptor instead.
func (*HandleGroupApplyResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{40}
}

func (x *HandleGroupApplyResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//getGroupApplyList 获取群聊申请列表
type GetGroupApplyListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 分页
	Page   *Page                        `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	Filter *GetGroupApplyListReq_Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter"`
}

func (x *GetGroupApplyListReq) Reset() {
	*x = GetGroupApplyListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupApplyListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupApplyListReq) ProtoMessage() {}

func (x *GetGroupApplyListReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupApplyListReq.ProtoReflect.Descriptor instead.
func (*GetGroupApplyListReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{41}
}

func (x *GetGroupApplyListReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetGroupApplyListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetGroupApplyListReq) GetFilter() *GetGroupApplyListReq_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GroupApplyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 申请ID
	ApplyId string `protobuf:"bytes,1,opt,name=applyId,proto3" json:"applyId"`
	// 群ID
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	// 申请人
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId"`
	// 申请状态
	Result GroupApplyHandleResult `protobuf:"varint,4,opt,name=result,proto3,enum=pb.GroupApplyHandleResult" json:"result"`
	// 申请理由
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason"`
	// 申请时间
	ApplyTime    int64  `protobuf:"varint,6,opt,name=applyTime,proto3" json:"applyTime"`
	ApplyTimeStr string `protobuf:"bytes,7,opt,name=applyTimeStr,proto3" json:"applyTimeStr"`
	// 处理时间
	HandleTime    int64  `protobuf:"varint,8,opt,name=handleTime,proto3" json:"handleTime"`
	HandleTimeStr string `protobuf:"bytes,9,opt,name=handleTimeStr,proto3" json:"handleTimeStr"`
	// 处理人
	HandleUserId string `protobuf:"bytes,10,opt,name=handleUserId,proto3" json:"handleUserId"`
	// 申请人的baseInfo
	UserBaseInfo *UserBaseInfo `protobuf:"bytes,11,opt,name=userBaseInfo,proto3,oneof" json:"userBaseInfo"`
	// 处理人的baseInfo
	HandleUserBaseInfo *UserBaseInfo `protobuf:"bytes,12,opt,name=handleUserBaseInfo,proto3,oneof" json:"handleUserBaseInfo"`
	// 群的baseInfo
	GroupBaseInfo *GroupBaseInfo `protobuf:"bytes,13,opt,name=groupBaseInfo,proto3,oneof" json:"groupBaseInfo"`
}

func (x *GroupApplyInfo) Reset() {
	*x = GroupApplyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupApplyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupApplyInfo) ProtoMessage() {}

func (x *GroupApplyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupApplyInfo.ProtoReflect.Descriptor instead.
func (*GroupApplyInfo) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{42}
}

func (x *GroupApplyInfo) GetApplyId() string {
	if x != nil {
		return x.ApplyId
	}
	return ""
}

func (x *GroupApplyInfo) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupApplyInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GroupApplyInfo) GetResult() GroupApplyHandleResult {
	if x != nil {
		return x.Result
	}
	return GroupApplyHandleResult_UNHANDLED
}

func (x *GroupApplyInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GroupApplyInfo) GetApplyTime() int64 {
	if x != nil {
		return x.ApplyTime
	}
	return 0
}

func (x *GroupApplyInfo) GetApplyTimeStr() string {
	if x != nil {
		return x.ApplyTimeStr
	}
	return ""
}

func (x *GroupApplyInfo) GetHandleTime() int64 {
	if x != nil {
		return x.HandleTime
	}
	return 0
}

func (x *GroupApplyInfo) GetHandleTimeStr() string {
	if x != nil {
		return x.HandleTimeStr
	}
	return ""
}

func (x *GroupApplyInfo) GetHandleUserId() string {
	if x != nil {
		return x.HandleUserId
	}
	return ""
}

func (x *GroupApplyInfo) GetUserBaseInfo() *UserBaseInfo {
	if x != nil {
		return x.UserBaseInfo
	}
	return nil
}

func (x *GroupApplyInfo) GetHandleUserBaseInfo() *UserBaseInfo {
	if x != nil {
		return x.HandleUserBaseInfo
	}
	return nil
}

func (x *GroupApplyInfo) GetGroupBaseInfo() *GroupBaseInfo {
	if x != nil {
		return x.GroupBaseInfo
	}
	return nil
}

type GetGroupApplyListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	// 申请列表
	GroupApplyList []*GroupApplyInfo `protobuf:"bytes,2,rep,name=groupApplyList,proto3" json:"groupApplyList"`
	// 总数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
}

func (x *GetGroupApplyListResp) Reset() {
	*x = GetGroupApplyListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupApplyListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupApplyListResp) ProtoMessage() {}

func (x *GetGroupApplyListResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupApplyListResp.ProtoReflect.Descriptor instead.
func (*GetGroupApplyListResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{43}
}

func (x *GetGroupApplyListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetGroupApplyListResp) GetGroupApplyList() []*GroupApplyInfo {
	if x != nil {
		return x.GroupApplyList
	}
	return nil
}

func (x *GetGroupApplyListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

//分页获取某人的群列表
type GetGroupListByUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 分页
	Page   *Page             `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	Filter map[string]string `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserId string            `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId"`
}

func (x *GetGroupListByUserIdReq) Reset() {
	*x = GetGroupListByUserIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupListByUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupListByUserIdReq) ProtoMessage() {}

func (x *GetGroupListByUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupListByUserIdReq.ProtoReflect.Descriptor instead.
func (*GetGroupListByUserIdReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{44}
}

func (x *GetGroupListByUserIdReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetGroupListByUserIdReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetGroupListByUserIdReq) GetFilter() map[string]string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetGroupListByUserIdReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetGroupListByUserIdItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 群id
	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId"`
	// 头像
	Avatar string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar"`
	// 名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// 群人数
	MemberCount int64 `protobuf:"varint,4,opt,name=memberCount,proto3" json:"memberCount"`
	// 加入时间
	JoinTime    int64  `protobuf:"varint,5,opt,name=joinTime,proto3" json:"joinTime"`
	JoinTimeStr string `protobuf:"bytes,6,opt,name=joinTimeStr,proto3" json:"joinTimeStr"`
	// 群主id
	Owner string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner"`
	// 创建时间
	CreateTime    int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime"`
	CreateTimeStr string `protobuf:"bytes,9,opt,name=createTimeStr,proto3" json:"createTimeStr"`
}

func (x *GetGroupListByUserIdItem) Reset() {
	*x = GetGroupListByUserIdItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupListByUserIdItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupListByUserIdItem) ProtoMessage() {}

func (x *GetGroupListByUserIdItem) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupListByUserIdItem.ProtoReflect.Descriptor instead.
func (*GetGroupListByUserIdItem) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{45}
}

func (x *GetGroupListByUserIdItem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetGroupListByUserIdItem) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GetGroupListByUserIdItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupListByUserIdItem) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *GetGroupListByUserIdItem) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *GetGroupListByUserIdItem) GetJoinTimeStr() string {
	if x != nil {
		return x.JoinTimeStr
	}
	return ""
}

func (x *GetGroupListByUserIdItem) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetGroupListByUserIdItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetGroupListByUserIdItem) GetCreateTimeStr() string {
	if x != nil {
		return x.CreateTimeStr
	}
	return ""
}

type GetGroupListByUserIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp                 `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	GroupList  []*GetGroupListByUserIdItem `protobuf:"bytes,2,rep,name=groupList,proto3" json:"groupList"`
	Total      int64                       `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
}

func (x *GetGroupListByUserIdResp) Reset() {
	*x = GetGroupListByUserIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupListByUserIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupListByUserIdResp) ProtoMessage() {}

func (x *GetGroupListByUserIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupListByUserIdResp.ProtoReflect.Descriptor instead.
func (*GetGroupListByUserIdResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{46}
}

func (x *GetGroupListByUserIdResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetGroupListByUserIdResp) GetGroupList() []*GetGroupListByUserIdItem {
	if x != nil {
		return x.GroupList
	}
	return nil
}

func (x *GetGroupListByUserIdResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

//GroupModel 群组
type GroupModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 群id 从10001开始 redis incr
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// 群名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 群头像
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar"`
	// 群主
	Owner string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner"`
	// 所有管理员
	Managers []string `protobuf:"bytes,5,rep,name=managers,proto3" json:"managers"`
	// 创建时间
	CreateTime    int64  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime"`
	CreateTimeStr string `protobuf:"bytes,7,opt,name=createTimeStr,proto3" json:"createTimeStr"`
	// 解散时间
	DismissTime    int64  `protobuf:"varint,8,opt,name=dismissTime,proto3" json:"dismissTime"`
	DismissTimeStr string `protobuf:"bytes,9,opt,name=dismissTimeStr,proto3" json:"dismissTimeStr"`
	// 群描述
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description"`
	// 群成员人数
	MemberCount int32 `protobuf:"varint,11,opt,name=memberCount,proto3" json:"memberCount"`
	// 全体禁言开关
	AllMute bool `protobuf:"varint,12,opt,name=allMute,proto3" json:"allMute"`
	// 发言频率限制
	SpeakLimit int32 `protobuf:"varint,13,opt,name=speakLimit,proto3" json:"speakLimit"`
	// 群成员人数上限
	MaxMember int32 `protobuf:"varint,14,opt,name=maxMember,proto3" json:"maxMember"`
	// 成员权限选项
	// 群成员是否可以发起临时会话
	MemberCanStartTempChat bool `protobuf:"varint,15,opt,name=memberCanStartTempChat,proto3" json:"memberCanStartTempChat"`
	// 群成员是否可以邀请好友加入群
	MemberCanInviteFriend bool `protobuf:"varint,16,opt,name=memberCanInviteFriend,proto3" json:"memberCanInviteFriend"`
	// 新成员可见的历史消息条数
	NewMemberHistoryMsgCount int32 `protobuf:"varint,17,opt,name=newMemberHistoryMsgCount,proto3" json:"newMemberHistoryMsgCount"`
	// 是否开启匿名聊天
	AnonymousChat   bool                        `protobuf:"varint,18,opt,name=anonymousChat,proto3" json:"anonymousChat"`
	JoinGroupOption *GroupModel_JoinGroupOption `protobuf:"bytes,19,opt,name=joinGroupOption,proto3" json:"joinGroupOption"`
	AdminRemark     string                      `protobuf:"bytes,20,opt,name=adminRemark,proto3" json:"adminRemark"`
}

func (x *GroupModel) Reset() {
	*x = GroupModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupModel) ProtoMessage() {}

func (x *GroupModel) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupModel.ProtoReflect.Descriptor instead.
func (*GroupModel) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{47}
}

func (x *GroupModel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GroupModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupModel) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GroupModel) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GroupModel) GetManagers() []string {
	if x != nil {
		return x.Managers
	}
	return nil
}

func (x *GroupModel) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GroupModel) GetCreateTimeStr() string {
	if x != nil {
		return x.CreateTimeStr
	}
	return ""
}

func (x *GroupModel) GetDismissTime() int64 {
	if x != nil {
		return x.DismissTime
	}
	return 0
}

func (x *GroupModel) GetDismissTimeStr() string {
	if x != nil {
		return x.DismissTimeStr
	}
	return ""
}

func (x *GroupModel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GroupModel) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *GroupModel) GetAllMute() bool {
	if x != nil {
		return x.AllMute
	}
	return false
}

func (x *GroupModel) GetSpeakLimit() int32 {
	if x != nil {
		return x.SpeakLimit
	}
	return 0
}

func (x *GroupModel) GetMaxMember() int32 {
	if x != nil {
		return x.MaxMember
	}
	return 0
}

func (x *GroupModel) GetMemberCanStartTempChat() bool {
	if x != nil {
		return x.MemberCanStartTempChat
	}
	return false
}

func (x *GroupModel) GetMemberCanInviteFriend() bool {
	if x != nil {
		return x.MemberCanInviteFriend
	}
	return false
}

func (x *GroupModel) GetNewMemberHistoryMsgCount() int32 {
	if x != nil {
		return x.NewMemberHistoryMsgCount
	}
	return 0
}

func (x *GroupModel) GetAnonymousChat() bool {
	if x != nil {
		return x.AnonymousChat
	}
	return false
}

func (x *GroupModel) GetJoinGroupOption() *GroupModel_JoinGroupOption {
	if x != nil {
		return x.JoinGroupOption
	}
	return nil
}

func (x *GroupModel) GetAdminRemark() string {
	if x != nil {
		return x.AdminRemark
	}
	return ""
}

//GetAllGroupModelReq 获取所有群组
type GetAllGroupModelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq        `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	Page      *Page             `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	Filter    map[string]string `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAllGroupModelReq) Reset() {
	*x = GetAllGroupModelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllGroupModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllGroupModelReq) ProtoMessage() {}

func (x *GetAllGroupModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllGroupModelReq.ProtoReflect.Descriptor instead.
func (*GetAllGroupModelReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{48}
}

func (x *GetAllGroupModelReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetAllGroupModelReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetAllGroupModelReq) GetFilter() map[string]string {
	if x != nil {
		return x.Filter
	}
	return nil
}

//GetAllGroupModelResp 获取所有群组
type GetAllGroupModelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp  *CommonResp   `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	GroupModels []*GroupModel `protobuf:"bytes,2,rep,name=groupModels,proto3" json:"groupModels"`
	Total       int64         `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
}

func (x *GetAllGroupModelResp) Reset() {
	*x = GetAllGroupModelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllGroupModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllGroupModelResp) ProtoMessage() {}

func (x *GetAllGroupModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllGroupModelResp.ProtoReflect.Descriptor instead.
func (*GetAllGroupModelResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{49}
}

func (x *GetAllGroupModelResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetAllGroupModelResp) GetGroupModels() []*GroupModel {
	if x != nil {
		return x.GroupModels
	}
	return nil
}

func (x *GetAllGroupModelResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

//GetGroupModelDetailReq 获取群组详情
type GetGroupModelDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	Id        string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id"`
}

func (x *GetGroupModelDetailReq) Reset() {
	*x = GetGroupModelDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupModelDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupModelDetailReq) ProtoMessage() {}

func (x *GetGroupModelDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupModelDetailReq.ProtoReflect.Descriptor instead.
func (*GetGroupModelDetailReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{50}
}

func (x *GetGroupModelDetailReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetGroupModelDetailReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//GetGroupModelDetailResp 获取群组详情
type GetGroupModelDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	GroupModel *GroupModel `protobuf:"bytes,2,opt,name=groupModel,proto3" json:"groupModel"`
}

func (x *GetGroupModelDetailResp) Reset() {
	*x = GetGroupModelDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupModelDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupModelDetailResp) ProtoMessage() {}

func (x *GetGroupModelDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupModelDetailResp.ProtoReflect.Descriptor instead.
func (*GetGroupModelDetailResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{51}
}

func (x *GetGroupModelDetailResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetGroupModelDetailResp) GetGroupModel() *GroupModel {
	if x != nil {
		return x.GroupModel
	}
	return nil
}

//UpdateGroupModelReq 更新群组
type UpdateGroupModelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq  *CommonReq  `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	GroupModel *GroupModel `protobuf:"bytes,2,opt,name=groupModel,proto3" json:"groupModel"`
}

func (x *UpdateGroupModelReq) Reset() {
	*x = UpdateGroupModelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupModelReq) ProtoMessage() {}

func (x *UpdateGroupModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupModelReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupModelReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateGroupModelReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *UpdateGroupModelReq) GetGroupModel() *GroupModel {
	if x != nil {
		return x.GroupModel
	}
	return nil
}

//UpdateGroupModelResp 更新群组
type UpdateGroupModelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *UpdateGroupModelResp) Reset() {
	*x = UpdateGroupModelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupModelResp) ProtoMessage() {}

func (x *UpdateGroupModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupModelResp.ProtoReflect.Descriptor instead.
func (*UpdateGroupModelResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{53}
}

func (x *UpdateGroupModelResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//DismissGroupModelReq 解散群组
type DismissGroupModelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	Ids       []string   `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids"`
}

func (x *DismissGroupModelReq) Reset() {
	*x = DismissGroupModelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissGroupModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissGroupModelReq) ProtoMessage() {}

func (x *DismissGroupModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissGroupModelReq.ProtoReflect.Descriptor instead.
func (*DismissGroupModelReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{54}
}

func (x *DismissGroupModelReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *DismissGroupModelReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

//DismissGroupModelResp 解散群组
type DismissGroupModelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *DismissGroupModelResp) Reset() {
	*x = DismissGroupModelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissGroupModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissGroupModelResp) ProtoMessage() {}

func (x *DismissGroupModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissGroupModelResp.ProtoReflect.Descriptor instead.
func (*DismissGroupModelResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{55}
}

func (x *DismissGroupModelResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//SearchGroupsByKeywordReq 搜索群组
type SearchGroupsByKeywordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	Keyword   string     `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword"`
}

func (x *SearchGroupsByKeywordReq) Reset() {
	*x = SearchGroupsByKeywordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchGroupsByKeywordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchGroupsByKeywordReq) ProtoMessage() {}

func (x *SearchGroupsByKeywordReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchGroupsByKeywordReq.ProtoReflect.Descriptor instead.
func (*SearchGroupsByKeywordReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{56}
}

func (x *SearchGroupsByKeywordReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *SearchGroupsByKeywordReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type SearchGroupsByKeywordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp      `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	Groups     []*GroupBaseInfo `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups"`
}

func (x *SearchGroupsByKeywordResp) Reset() {
	*x = SearchGroupsByKeywordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchGroupsByKeywordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchGroupsByKeywordResp) ProtoMessage() {}

func (x *SearchGroupsByKeywordResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchGroupsByKeywordResp.ProtoReflect.Descriptor instead.
func (*SearchGroupsByKeywordResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{57}
}

func (x *SearchGroupsByKeywordResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *SearchGroupsByKeywordResp) GetGroups() []*GroupBaseInfo {
	if x != nil {
		return x.Groups
	}
	return nil
}

//AddGroupMemberReq 添加群成员
type AddGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	GroupId   string     `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	UserId    string     `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId"`
}

func (x *AddGroupMemberReq) Reset() {
	*x = AddGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupMemberReq) ProtoMessage() {}

func (x *AddGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupMemberReq.ProtoReflect.Descriptor instead.
func (*AddGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{58}
}

func (x *AddGroupMemberReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *AddGroupMemberReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AddGroupMemberReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

//AddGroupMemberResp 添加群成员
type AddGroupMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *AddGroupMemberResp) Reset() {
	*x = AddGroupMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupMemberResp) ProtoMessage() {}

func (x *AddGroupMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupMemberResp.ProtoReflect.Descriptor instead.
func (*AddGroupMemberResp) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{59}
}

func (x *AddGroupMemberResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 成员统计
type GetGroupHomeResp_MemberStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 统计标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`
	// 人数
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	// 占百分比
	Percentage int32 `protobuf:"varint,3,opt,name=percentage,proto3" json:"percentage"`
}

func (x *GetGroupHomeResp_MemberStatistics) Reset() {
	*x = GetGroupHomeResp_MemberStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupHomeResp_MemberStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupHomeResp_MemberStatistics) ProtoMessage() {}

func (x *GetGroupHomeResp_MemberStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupHomeResp_MemberStatistics.ProtoReflect.Descriptor instead.
func (*GetGroupHomeResp_MemberStatistics) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetGroupHomeResp_MemberStatistics) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetGroupHomeResp_MemberStatistics) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetGroupHomeResp_MemberStatistics) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// Filter
type GetGroupMemberListReq_GetGroupMemberListFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否接受离线推送
	NoDisturb *bool `protobuf:"varint,1,opt,name=noDisturb,proto3,oneof" json:"noDisturb"`
	// 只包含群主
	OnlyOwner *bool `protobuf:"varint,2,opt,name=onlyOwner,proto3,oneof" json:"onlyOwner"`
	// 只包含管理员
	OnlyAdmin *bool `protobuf:"varint,3,opt,name=onlyAdmin,proto3,oneof" json:"onlyAdmin"`
	// 只包含成员
	OnlyMember *bool `protobuf:"varint,4,opt,name=onlyMember,proto3,oneof" json:"onlyMember"`
}

func (x *GetGroupMemberListReq_GetGroupMemberListFilter) Reset() {
	*x = GetGroupMemberListReq_GetGroupMemberListFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberListReq_GetGroupMemberListFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberListReq_GetGroupMemberListFilter) ProtoMessage() {}

func (x *GetGroupMemberListReq_GetGroupMemberListFilter) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberListReq_GetGroupMemberListFilter.ProtoReflect.Descriptor instead.
func (*GetGroupMemberListReq_GetGroupMemberListFilter) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{28, 0}
}

func (x *GetGroupMemberListReq_GetGroupMemberListFilter) GetNoDisturb() bool {
	if x != nil && x.NoDisturb != nil {
		return *x.NoDisturb
	}
	return false
}

func (x *GetGroupMemberListReq_GetGroupMemberListFilter) GetOnlyOwner() bool {
	if x != nil && x.OnlyOwner != nil {
		return *x.OnlyOwner
	}
	return false
}

func (x *GetGroupMemberListReq_GetGroupMemberListFilter) GetOnlyAdmin() bool {
	if x != nil && x.OnlyAdmin != nil {
		return *x.OnlyAdmin
	}
	return false
}

func (x *GetGroupMemberListReq_GetGroupMemberListFilter) GetOnlyMember() bool {
	if x != nil && x.OnlyMember != nil {
		return *x.OnlyMember
	}
	return false
}

type GetGroupMemberListReq_GetGroupMemberListOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否只获取id
	OnlyId *bool `protobuf:"varint,1,opt,name=onlyId,proto3,oneof" json:"onlyId"`
}

func (x *GetGroupMemberListReq_GetGroupMemberListOpt) Reset() {
	*x = GetGroupMemberListReq_GetGroupMemberListOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupMemberListReq_GetGroupMemberListOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupMemberListReq_GetGroupMemberListOpt) ProtoMessage() {}

func (x *GetGroupMemberListReq_GetGroupMemberListOpt) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupMemberListReq_GetGroupMemberListOpt.ProtoReflect.Descriptor instead.
func (*GetGroupMemberListReq_GetGroupMemberListOpt) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{28, 1}
}

func (x *GetGroupMemberListReq_GetGroupMemberListOpt) GetOnlyId() bool {
	if x != nil && x.OnlyId != nil {
		return *x.OnlyId
	}
	return false
}

// 过滤
type GetMyGroupListReq_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息接收类型
	// 是否过滤掉群助手
	FilterFold bool `protobuf:"varint,1,opt,name=filterFold,proto3" json:"filterFold"`
	// 是否过滤已屏蔽的群
	FilterShield bool `protobuf:"varint,2,opt,name=filterShield,proto3" json:"filterShield"`
}

func (x *GetMyGroupListReq_Filter) Reset() {
	*x = GetMyGroupListReq_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyGroupListReq_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyGroupListReq_Filter) ProtoMessage() {}

func (x *GetMyGroupListReq_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyGroupListReq_Filter.ProtoReflect.Descriptor instead.
func (*GetMyGroupListReq_Filter) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{30, 0}
}

func (x *GetMyGroupListReq_Filter) GetFilterFold() bool {
	if x != nil {
		return x.FilterFold
	}
	return false
}

func (x *GetMyGroupListReq_Filter) GetFilterShield() bool {
	if x != nil {
		return x.FilterShield
	}
	return false
}

// 过滤
type GetGroupApplyListReq_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 申请状态
	Result *GroupApplyHandleResult `protobuf:"varint,1,opt,name=result,proto3,enum=pb.GroupApplyHandleResult,oneof" json:"result"`
}

func (x *GetGroupApplyListReq_Filter) Reset() {
	*x = GetGroupApplyListReq_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupApplyListReq_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupApplyListReq_Filter) ProtoMessage() {}

func (x *GetGroupApplyListReq_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupApplyListReq_Filter.ProtoReflect.Descriptor instead.
func (*GetGroupApplyListReq_Filter) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{41, 0}
}

func (x *GetGroupApplyListReq_Filter) GetResult() GroupApplyHandleResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return GroupApplyHandleResult_UNHANDLED
}

type GroupModel_JoinGroupOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0:不需要验证 1:需要验证 2:需要问题验证
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type"`
	// 验证信息
	// 问题
	Question string `protobuf:"bytes,2,opt,name=question,proto3" json:"question"`
	// 答案
	Answer string `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer"`
}

func (x *GroupModel_JoinGroupOption) Reset() {
	*x = GroupModel_JoinGroupOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupModel_JoinGroupOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupModel_JoinGroupOption) ProtoMessage() {}

func (x *GroupModel_JoinGroupOption) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupModel_JoinGroupOption.ProtoReflect.Descriptor instead.
func (*GroupModel_JoinGroupOption) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{47, 0}
}

func (x *GroupModel_JoinGroupOption) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GroupModel_JoinGroupOption) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *GroupModel_JoinGroupOption) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

var File_group_proto protoreflect.FileDescriptor

var file_group_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x08, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x6c, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x9f, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x1a, 0x5e, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x2b,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x22, 0x49, 0x0a, 0x17, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x79, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x45, 0x0a,
	0x13, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x22, 0x77, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7d, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x15, 0x53, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0x48, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x6f, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6e, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x74, 0x75, 0x72, 0x62, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62,
	0x4f, 0x70, 0x74, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x4d, 0x6f, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x42, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x42, 0x67, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x62, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x6e, 0x62, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x1b, 0x4d, 0x61, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70,
	0x1a, 0x5a, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7a, 0x0a, 0x15, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x77, 0x0a, 0x12, 0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x13, 0x4b, 0x69,
	0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0xb0, 0x04, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x4a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x03,
	0x6f, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x1a,
	0xe1, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x09,
	0x6e, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x09, 0x6e, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x6e, 0x6c,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e,
	0x6f, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x1a, 0x3f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x06,
	0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06,
	0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3d, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb0,
	0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x70, 0x74, 0x52, 0x03, 0x6f,
	0x70, 0x74, 0x1a, 0x4c, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x22, 0x1f, 0x0a, 0x03, 0x4f, 0x70, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x49, 0x44, 0x10,
	0x01, 0x22, 0x4b, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0xe8,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x4e, 0x0a, 0x0d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x10, 0x4d, 0x61, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xc1, 0x01, 0x0a,
	0x11, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3f, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x61, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x60, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x4a, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x78,
	0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x42, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x42, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x46, 0x0a, 0x14, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0xe8, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x4c, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xce, 0x04, 0x0a, 0x0e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x12,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x12, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xf8, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x3f,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9c, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x72, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xbd, 0x06, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x43,
	0x68, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6e, 0x65, 0x77, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73,
	0x43, 0x68, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x43, 0x68, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x6a, 0x6f, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x59, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x22, 0xd8, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x55, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x72,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x22, 0x46, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x55, 0x0a, 0x14, 0x44, 0x69,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x47, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x61, 0x0a, 0x18, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x76, 0x0a,
	0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x72, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x41, 0x64, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2a,
	0x48, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x4f,
	0x70, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72,
	0x62, 0x46, 0x6f, 0x6c, 0x64, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x75,
	0x72, 0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x02, 0x2a, 0x2f, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x3e, 0x0a, 0x16, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x32, 0xc0, 0x0f, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x53,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x17, 0x4d, 0x61, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x4b,
	0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x42, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x42, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x42, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x2e, 0x70,
	0x62, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x06, 0x5a,
	0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_group_proto_rawDescOnce sync.Once
	file_group_proto_rawDescData = file_group_proto_rawDesc
)

func file_group_proto_rawDescGZIP() []byte {
	file_group_proto_rawDescOnce.Do(func() {
		file_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_group_proto_rawDescData)
	})
	return file_group_proto_rawDescData
}

var file_group_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_group_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_group_proto_goTypes = []interface{}{
	(GroupDisturbOpt)(0),                      // 0: pb.GroupDisturbOpt
	(GroupRole)(0),                            // 1: pb.GroupRole
	(GroupApplyHandleResult)(0),               // 2: pb.GroupApplyHandleResult
	(GetMyGroupListReq_Opt)(0),                // 3: pb.GetMyGroupListReq.Opt
	(*CreateGroupReq)(nil),                    // 4: pb.CreateGroupReq
	(*CreateGroupResp)(nil),                   // 5: pb.CreateGroupResp
	(*GetGroupHomeReq)(nil),                   // 6: pb.GetGroupHomeReq
	(*GetGroupHomeResp)(nil),                  // 7: pb.GetGroupHomeResp
	(*InviteFriendToGroupReq)(nil),            // 8: pb.InviteFriendToGroupReq
	(*InviteFriendToGroupResp)(nil),           // 9: pb.InviteFriendToGroupResp
	(*CreateGroupNoticeReq)(nil),              // 10: pb.CreateGroupNoticeReq
	(*CreateGroupNoticeResp)(nil),             // 11: pb.CreateGroupNoticeResp
	(*DeleteGroupNoticeReq)(nil),              // 12: pb.DeleteGroupNoticeReq
	(*DeleteGroupNoticeResp)(nil),             // 13: pb.DeleteGroupNoticeResp
	(*EditGroupNoticeReq)(nil),                // 14: pb.EditGroupNoticeReq
	(*EditGroupNoticeResp)(nil),               // 15: pb.EditGroupNoticeResp
	(*GetGroupNoticeListReq)(nil),             // 16: pb.GetGroupNoticeListReq
	(*GroupNotice)(nil),                       // 17: pb.GroupNotice
	(*GetGroupNoticeListResp)(nil),            // 18: pb.GetGroupNoticeListResp
	(*SetGroupMemberInfoReq)(nil),             // 19: pb.SetGroupMemberInfoReq
	(*SetGroupMemberInfoResp)(nil),            // 20: pb.SetGroupMemberInfoResp
	(*GetGroupMemberInfoReq)(nil),             // 21: pb.GetGroupMemberInfoReq
	(*GroupMemberInfo)(nil),                   // 22: pb.GroupMemberInfo
	(*MapGroupMemberInfoByIdsReq)(nil),        // 23: pb.MapGroupMemberInfoByIdsReq
	(*MapGroupMemberInfoByIdsResp)(nil),       // 24: pb.MapGroupMemberInfoByIdsResp
	(*GetGroupMemberInfoResp)(nil),            // 25: pb.GetGroupMemberInfoResp
	(*EditGroupInfoReq)(nil),                  // 26: pb.EditGroupInfoReq
	(*EditGroupInfoResp)(nil),                 // 27: pb.EditGroupInfoResp
	(*TransferGroupOwnerReq)(nil),             // 28: pb.TransferGroupOwnerReq
	(*TransferGroupOwnerResp)(nil),            // 29: pb.TransferGroupOwnerResp
	(*KickGroupMemberReq)(nil),                // 30: pb.KickGroupMemberReq
	(*KickGroupMemberResp)(nil),               // 31: pb.KickGroupMemberResp
	(*GetGroupMemberListReq)(nil),             // 32: pb.GetGroupMemberListReq
	(*GetGroupMemberListResp)(nil),            // 33: pb.GetGroupMemberListResp
	(*GetMyGroupListReq)(nil),                 // 34: pb.GetMyGroupListReq
	(*GroupBaseInfo)(nil),                     // 35: pb.GroupBaseInfo
	(*GetMyGroupListResp)(nil),                // 36: pb.GetMyGroupListResp
	(*MapGroupByIdsReq)(nil),                  // 37: pb.MapGroupByIdsReq
	(*MapGroupByIdsResp)(nil),                 // 38: pb.MapGroupByIdsResp
	(*SyncGroupMemberCountReq)(nil),           // 39: pb.SyncGroupMemberCountReq
	(*SyncGroupMemberCountResp)(nil),          // 40: pb.SyncGroupMemberCountResp
	(*ApplyToBeGroupMemberReq)(nil),           // 41: pb.ApplyToBeGroupMemberReq
	(*ApplyToBeGroupMemberResp)(nil),          // 42: pb.ApplyToBeGroupMemberResp
	(*HandleGroupApplyReq)(nil),               // 43: pb.HandleGroupApplyReq
	(*HandleGroupApplyResp)(nil),              // 44: pb.HandleGroupApplyResp
	(*GetGroupApplyListReq)(nil),              // 45: pb.GetGroupApplyListReq
	(*GroupApplyInfo)(nil),                    // 46: pb.GroupApplyInfo
	(*GetGroupApplyListResp)(nil),             // 47: pb.GetGroupApplyListResp
	(*GetGroupListByUserIdReq)(nil),           // 48: pb.GetGroupListByUserIdReq
	(*GetGroupListByUserIdItem)(nil),          // 49: pb.GetGroupListByUserIdItem
	(*GetGroupListByUserIdResp)(nil),          // 50: pb.GetGroupListByUserIdResp
	(*GroupModel)(nil),                        // 51: pb.GroupModel
	(*GetAllGroupModelReq)(nil),               // 52: pb.GetAllGroupModelReq
	(*GetAllGroupModelResp)(nil),              // 53: pb.GetAllGroupModelResp
	(*GetGroupModelDetailReq)(nil),            // 54: pb.GetGroupModelDetailReq
	(*GetGroupModelDetailResp)(nil),           // 55: pb.GetGroupModelDetailResp
	(*UpdateGroupModelReq)(nil),               // 56: pb.UpdateGroupModelReq
	(*UpdateGroupModelResp)(nil),              // 57: pb.UpdateGroupModelResp
	(*DismissGroupModelReq)(nil),              // 58: pb.DismissGroupModelReq
	(*DismissGroupModelResp)(nil),             // 59: pb.DismissGroupModelResp
	(*SearchGroupsByKeywordReq)(nil),          // 60: pb.SearchGroupsByKeywordReq
	(*SearchGroupsByKeywordResp)(nil),         // 61: pb.SearchGroupsByKeywordResp
	(*AddGroupMemberReq)(nil),                 // 62: pb.AddGroupMemberReq
	(*AddGroupMemberResp)(nil),                // 63: pb.AddGroupMemberResp
	(*GetGroupHomeResp_MemberStatistics)(nil), // 64: pb.GetGroupHomeResp.MemberStatistics
	nil, // 65: pb.MapGroupMemberInfoByIdsResp.GroupMemberInfoMapEntry
	(*GetGroupMemberListReq_GetGroupMemberListFilter)(nil), // 66: pb.GetGroupMemberListReq.GetGroupMemberListFilter
	(*GetGroupMemberListReq_GetGroupMemberListOpt)(nil),    // 67: pb.GetGroupMemberListReq.GetGroupMemberListOpt
	(*GetMyGroupListReq_Filter)(nil),                       // 68: pb.GetMyGroupListReq.Filter
	nil,                                                    // 69: pb.GetMyGroupListResp.GroupMapEntry
	nil,                                                    // 70: pb.MapGroupByIdsResp.GroupMapEntry
	(*GetGroupApplyListReq_Filter)(nil),                    // 71: pb.GetGroupApplyListReq.Filter
	nil,                                                    // 72: pb.GetGroupListByUserIdReq.FilterEntry
	(*GroupModel_JoinGroupOption)(nil),                     // 73: pb.GroupModel.JoinGroupOption
	nil,                                                    // 74: pb.GetAllGroupModelReq.FilterEntry
	(*CommonReq)(nil),                                      // 75: pb.CommonReq
	(*CommonResp)(nil),                                     // 76: pb.CommonResp
	(*Page)(nil),                                           // 77: pb.Page
	(*UserBaseInfo)(nil),                                   // 78: pb.UserBaseInfo
}
var file_group_proto_depIdxs = []int32{
	75,  // 0: pb.CreateGroupReq.commonReq:type_name -> pb.CommonReq
	76,  // 1: pb.CreateGroupResp.commonResp:type_name -> pb.CommonResp
	75,  // 2: pb.GetGroupHomeReq.commonReq:type_name -> pb.CommonReq
	76,  // 3: pb.GetGroupHomeResp.commonResp:type_name -> pb.CommonResp
	64,  // 4: pb.GetGroupHomeResp.memberStatistics:type_name -> pb.GetGroupHomeResp.MemberStatistics
	75,  // 5: pb.InviteFriendToGroupReq.commonReq:type_name -> pb.CommonReq
	76,  // 6: pb.InviteFriendToGroupResp.commonResp:type_name -> pb.CommonResp
	75,  // 7: pb.CreateGroupNoticeReq.commonReq:type_name -> pb.CommonReq
	76,  // 8: pb.CreateGroupNoticeResp.commonResp:type_name -> pb.CommonResp
	75,  // 9: pb.DeleteGroupNoticeReq.commonReq:type_name -> pb.CommonReq
	76,  // 10: pb.DeleteGroupNoticeResp.commonResp:type_name -> pb.CommonResp
	75,  // 11: pb.EditGroupNoticeReq.commonReq:type_name -> pb.CommonReq
	76,  // 12: pb.EditGroupNoticeResp.commonResp:type_name -> pb.CommonResp
	75,  // 13: pb.GetGroupNoticeListReq.commonReq:type_name -> pb.CommonReq
	77,  // 14: pb.GetGroupNoticeListReq.page:type_name -> pb.Page
	76,  // 15: pb.GetGroupNoticeListResp.commonResp:type_name -> pb.CommonResp
	17,  // 16: pb.GetGroupNoticeListResp.groupNotices:type_name -> pb.GroupNotice
	75,  // 17: pb.SetGroupMemberInfoReq.commonReq:type_name -> pb.CommonReq
	1,   // 18: pb.SetGroupMemberInfoReq.role:type_name -> pb.GroupRole
	76,  // 19: pb.SetGroupMemberInfoResp.commonResp:type_name -> pb.CommonResp
	75,  // 20: pb.GetGroupMemberInfoReq.commonReq:type_name -> pb.CommonReq
	0,   // 21: pb.GroupMemberInfo.disturbMore:type_name -> pb.GroupDisturbOpt
	1,   // 22: pb.GroupMemberInfo.role:type_name -> pb.GroupRole
	75,  // 23: pb.MapGroupMemberInfoByIdsReq.commonReq:type_name -> pb.CommonReq
	76,  // 24: pb.MapGroupMemberInfoByIdsResp.commonResp:type_name -> pb.CommonResp
	65,  // 25: pb.MapGroupMemberInfoByIdsResp.groupMemberInfoMap:type_name -> pb.MapGroupMemberInfoByIdsResp.GroupMemberInfoMapEntry
	76,  // 26: pb.GetGroupMemberInfoResp.commonResp:type_name -> pb.CommonResp
	22,  // 27: pb.GetGroupMemberInfoResp.groupMemberInfo:type_name -> pb.GroupMemberInfo
	75,  // 28: pb.EditGroupInfoReq.commonReq:type_name -> pb.CommonReq
	76,  // 29: pb.EditGroupInfoResp.commonResp:type_name -> pb.CommonResp
	75,  // 30: pb.TransferGroupOwnerReq.commonReq:type_name -> pb.CommonReq
	76,  // 31: pb.TransferGroupOwnerResp.commonResp:type_name -> pb.CommonResp
	75,  // 32: pb.KickGroupMemberReq.commonReq:type_name -> pb.CommonReq
	76,  // 33: pb.KickGroupMemberResp.commonResp:type_name -> pb.CommonResp
	75,  // 34: pb.GetGroupMemberListReq.commonReq:type_name -> pb.CommonReq
	77,  // 35: pb.GetGroupMemberListReq.page:type_name -> pb.Page
	66,  // 36: pb.GetGroupMemberListReq.filter:type_name -> pb.GetGroupMemberListReq.GetGroupMemberListFilter
	67,  // 37: pb.GetGroupMemberListReq.opt:type_name -> pb.GetGroupMemberListReq.GetGroupMemberListOpt
	76,  // 38: pb.GetGroupMemberListResp.commonResp:type_name -> pb.CommonResp
	22,  // 39: pb.GetGroupMemberListResp.groupMemberList:type_name -> pb.GroupMemberInfo
	75,  // 40: pb.GetMyGroupListReq.commonReq:type_name -> pb.CommonReq
	77,  // 41: pb.GetMyGroupListReq.page:type_name -> pb.Page
	68,  // 42: pb.GetMyGroupListReq.filter:type_name -> pb.GetMyGroupListReq.Filter
	3,   // 43: pb.GetMyGroupListReq.opt:type_name -> pb.GetMyGroupListReq.Opt
	76,  // 44: pb.GetMyGroupListResp.commonResp:type_name -> pb.CommonResp
	69,  // 45: pb.GetMyGroupListResp.groupMap:type_name -> pb.GetMyGroupListResp.GroupMapEntry
	75,  // 46: pb.MapGroupByIdsReq.commonReq:type_name -> pb.CommonReq
	76,  // 47: pb.MapGroupByIdsResp.commonResp:type_name -> pb.CommonResp
	70,  // 48: pb.MapGroupByIdsResp.groupMap:type_name -> pb.MapGroupByIdsResp.GroupMapEntry
	75,  // 49: pb.SyncGroupMemberCountReq.commonReq:type_name -> pb.CommonReq
	76,  // 50: pb.SyncGroupMemberCountResp.commonResp:type_name -> pb.CommonResp
	75,  // 51: pb.ApplyToBeGroupMemberReq.commonReq:type_name -> pb.CommonReq
	76,  // 52: pb.ApplyToBeGroupMemberResp.commonResp:type_name -> pb.CommonResp
	75,  // 53: pb.HandleGroupApplyReq.commonReq:type_name -> pb.CommonReq
	2,   // 54: pb.HandleGroupApplyReq.result:type_name -> pb.GroupApplyHandleResult
	76,  // 55: pb.HandleGroupApplyResp.commonResp:type_name -> pb.CommonResp
	75,  // 56: pb.GetGroupApplyListReq.commonReq:type_name -> pb.CommonReq
	77,  // 57: pb.GetGroupApplyListReq.page:type_name -> pb.Page
	71,  // 58: pb.GetGroupApplyListReq.filter:type_name -> pb.GetGroupApplyListReq.Filter
	2,   // 59: pb.GroupApplyInfo.result:type_name -> pb.GroupApplyHandleResult
	78,  // 60: pb.GroupApplyInfo.userBaseInfo:type_name -> pb.UserBaseInfo
	78,  // 61: pb.GroupApplyInfo.handleUserBaseInfo:type_name -> pb.UserBaseInfo
	35,  // 62: pb.GroupApplyInfo.groupBaseInfo:type_name -> pb.GroupBaseInfo
	76,  // 63: pb.GetGroupApplyListResp.commonResp:type_name -> pb.CommonResp
	46,  // 64: pb.GetGroupApplyListResp.groupApplyList:type_name -> pb.GroupApplyInfo
	75,  // 65: pb.GetGroupListByUserIdReq.commonReq:type_name -> pb.CommonReq
	77,  // 66: pb.GetGroupListByUserIdReq.page:type_name -> pb.Page
	72,  // 67: pb.GetGroupListByUserIdReq.filter:type_name -> pb.GetGroupListByUserIdReq.FilterEntry
	76,  // 68: pb.GetGroupListByUserIdResp.commonResp:type_name -> pb.CommonResp
	49,  // 69: pb.GetGroupListByUserIdResp.groupList:type_name -> pb.GetGroupListByUserIdItem
	73,  // 70: pb.GroupModel.joinGroupOption:type_name -> pb.GroupModel.JoinGroupOption
	75,  // 71: pb.GetAllGroupModelReq.commonReq:type_name -> pb.CommonReq
	77,  // 72: pb.GetAllGroupModelReq.page:type_name -> pb.Page
	74,  // 73: pb.GetAllGroupModelReq.filter:type_name -> pb.GetAllGroupModelReq.FilterEntry
	76,  // 74: pb.GetAllGroupModelResp.commonResp:type_name -> pb.CommonResp
	51,  // 75: pb.GetAllGroupModelResp.groupModels:type_name -> pb.GroupModel
	75,  // 76: pb.GetGroupModelDetailReq.commonReq:type_name -> pb.CommonReq
	76,  // 77: pb.GetGroupModelDetailResp.commonResp:type_name -> pb.CommonResp
	51,  // 78: pb.GetGroupModelDetailResp.groupModel:type_name -> pb.GroupModel
	75,  // 79: pb.UpdateGroupModelReq.commonReq:type_name -> pb.CommonReq
	51,  // 80: pb.UpdateGroupModelReq.groupModel:type_name -> pb.GroupModel
	76,  // 81: pb.UpdateGroupModelResp.commonResp:type_name -> pb.CommonResp
	75,  // 82: pb.DismissGroupModelReq.commonReq:type_name -> pb.CommonReq
	76,  // 83: pb.DismissGroupModelResp.commonResp:type_name -> pb.CommonResp
	75,  // 84: pb.SearchGroupsByKeywordReq.commonReq:type_name -> pb.CommonReq
	76,  // 85: pb.SearchGroupsByKeywordResp.commonResp:type_name -> pb.CommonResp
	35,  // 86: pb.SearchGroupsByKeywordResp.groups:type_name -> pb.GroupBaseInfo
	75,  // 87: pb.AddGroupMemberReq.commonReq:type_name -> pb.CommonReq
	76,  // 88: pb.AddGroupMemberResp.commonResp:type_name -> pb.CommonResp
	22,  // 89: pb.MapGroupMemberInfoByIdsResp.GroupMemberInfoMapEntry.value:type_name -> pb.GroupMemberInfo
	35,  // 90: pb.GetMyGroupListResp.GroupMapEntry.value:type_name -> pb.GroupBaseInfo
	2,   // 91: pb.GetGroupApplyListReq.Filter.result:type_name -> pb.GroupApplyHandleResult
	4,   // 92: pb.groupService.CreateGroup:input_type -> pb.CreateGroupReq
	6,   // 93: pb.groupService.GetGroupHome:input_type -> pb.GetGroupHomeReq
	8,   // 94: pb.groupService.InviteFriendToGroup:input_type -> pb.InviteFriendToGroupReq
	10,  // 95: pb.groupService.CreateGroupNotice:input_type -> pb.CreateGroupNoticeReq
	12,  // 96: pb.groupService.DeleteGroupNotice:input_type -> pb.DeleteGroupNoticeReq
	16,  // 97: pb.groupService.GetGroupNoticeList:input_type -> pb.GetGroupNoticeListReq
	19,  // 98: pb.groupService.SetGroupMemberInfo:input_type -> pb.SetGroupMemberInfoReq
	21,  // 99: pb.groupService.GetGroupMemberInfo:input_type -> pb.GetGroupMemberInfoReq
	23,  // 100: pb.groupService.MapGroupMemberInfoByIds:input_type -> pb.MapGroupMemberInfoByIdsReq
	26,  // 101: pb.groupService.EditGroupInfo:input_type -> pb.EditGroupInfoReq
	28,  // 102: pb.groupService.TransferGroupOwner:input_type -> pb.TransferGroupOwnerReq
	30,  // 103: pb.groupService.KickGroupMember:input_type -> pb.KickGroupMemberReq
	32,  // 104: pb.groupService.GetGroupMemberList:input_type -> pb.GetGroupMemberListReq
	34,  // 105: pb.groupService.GetMyGroupList:input_type -> pb.GetMyGroupListReq
	37,  // 106: pb.groupService.MapGroupByIds:input_type -> pb.MapGroupByIdsReq
	39,  // 107: pb.groupService.SyncGroupMemberCount:input_type -> pb.SyncGroupMemberCountReq
	41,  // 108: pb.groupService.ApplyToBeGroupMember:input_type -> pb.ApplyToBeGroupMemberReq
	43,  // 109: pb.groupService.HandleGroupApply:input_type -> pb.HandleGroupApplyReq
	45,  // 110: pb.groupService.GetGroupApplyList:input_type -> pb.GetGroupApplyListReq
	48,  // 111: pb.groupService.GetGroupListByUserId:input_type -> pb.GetGroupListByUserIdReq
	52,  // 112: pb.groupService.GetAllGroupModel:input_type -> pb.GetAllGroupModelReq
	54,  // 113: pb.groupService.GetGroupModelDetail:input_type -> pb.GetGroupModelDetailReq
	56,  // 114: pb.groupService.UpdateGroupModel:input_type -> pb.UpdateGroupModelReq
	58,  // 115: pb.groupService.DismissGroupModel:input_type -> pb.DismissGroupModelReq
	60,  // 116: pb.groupService.SearchGroupsByKeyword:input_type -> pb.SearchGroupsByKeywordReq
	62,  // 117: pb.groupService.AddGroupMember:input_type -> pb.AddGroupMemberReq
	5,   // 118: pb.groupService.CreateGroup:output_type -> pb.CreateGroupResp
	7,   // 119: pb.groupService.GetGroupHome:output_type -> pb.GetGroupHomeResp
	9,   // 120: pb.groupService.InviteFriendToGroup:output_type -> pb.InviteFriendToGroupResp
	11,  // 121: pb.groupService.CreateGroupNotice:output_type -> pb.CreateGroupNoticeResp
	13,  // 122: pb.groupService.DeleteGroupNotice:output_type -> pb.DeleteGroupNoticeResp
	18,  // 123: pb.groupService.GetGroupNoticeList:output_type -> pb.GetGroupNoticeListResp
	20,  // 124: pb.groupService.SetGroupMemberInfo:output_type -> pb.SetGroupMemberInfoResp
	25,  // 125: pb.groupService.GetGroupMemberInfo:output_type -> pb.GetGroupMemberInfoResp
	24,  // 126: pb.groupService.MapGroupMemberInfoByIds:output_type -> pb.MapGroupMemberInfoByIdsResp
	27,  // 127: pb.groupService.EditGroupInfo:output_type -> pb.EditGroupInfoResp
	29,  // 128: pb.groupService.TransferGroupOwner:output_type -> pb.TransferGroupOwnerResp
	31,  // 129: pb.groupService.KickGroupMember:output_type -> pb.KickGroupMemberResp
	33,  // 130: pb.groupService.GetGroupMemberList:output_type -> pb.GetGroupMemberListResp
	36,  // 131: pb.groupService.GetMyGroupList:output_type -> pb.GetMyGroupListResp
	38,  // 132: pb.groupService.MapGroupByIds:output_type -> pb.MapGroupByIdsResp
	40,  // 133: pb.groupService.SyncGroupMemberCount:output_type -> pb.SyncGroupMemberCountResp
	42,  // 134: pb.groupService.ApplyToBeGroupMember:output_type -> pb.ApplyToBeGroupMemberResp
	44,  // 135: pb.groupService.HandleGroupApply:output_type -> pb.HandleGroupApplyResp
	47,  // 136: pb.groupService.GetGroupApplyList:output_type -> pb.GetGroupApplyListResp
	50,  // 137: pb.groupService.GetGroupListByUserId:output_type -> pb.GetGroupListByUserIdResp
	53,  // 138: pb.groupService.GetAllGroupModel:output_type -> pb.GetAllGroupModelResp
	55,  // 139: pb.groupService.GetGroupModelDetail:output_type -> pb.GetGroupModelDetailResp
	57,  // 140: pb.groupService.UpdateGroupModel:output_type -> pb.UpdateGroupModelResp
	59,  // 141: pb.groupService.DismissGroupModel:output_type -> pb.DismissGroupModelResp
	61,  // 142: pb.groupService.SearchGroupsByKeyword:output_type -> pb.SearchGroupsByKeywordResp
	63,  // 143: pb.groupService.AddGroupMember:output_type -> pb.AddGroupMemberResp
	118, // [118:144] is the sub-list for method output_type
	92,  // [92:118] is the sub-list for method input_type
	92,  // [92:92] is the sub-list for extension type_name
	92,  // [92:92] is the sub-list for extension extendee
	0,   // [0:92] is the sub-list for field type_name
}

func init() { file_group_proto_init() }
func file_group_proto_init() {
	if File_group_proto != nil {
		return
	}
	file_common_proto_init()
	file_im_proto_init()
	file_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupHomeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupHomeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteFriendToGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteFriendToGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupNoticeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupNoticeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupNoticeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupNoticeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditGroupNoticeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditGroupNoticeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupNoticeListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupNoticeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupMemberInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupMemberInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapGroupMemberInfoByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapGroupMemberInfoByIdsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditGroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditGroupInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferGroupOwnerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferGroupOwnerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickGroupMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyGroupListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyGroupListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapGroupByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapGroupByIdsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncGroupMemberCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncGroupMemberCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyToBeGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyToBeGroupMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleGroupApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleGroupApplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupApplyListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupApplyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupApplyListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupListByUserIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupListByUserIdItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupListByUserIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllGroupModelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllGroupModelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupModelDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupModelDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupModelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupModelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissGroupModelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissGroupModelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchGroupsByKeywordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchGroupsByKeywordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupHomeResp_MemberStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberListReq_GetGroupMemberListFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupMemberListReq_GetGroupMemberListOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyGroupListReq_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupApplyListReq_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupModel_JoinGroupOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_group_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_group_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_group_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_group_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_group_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_group_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_group_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_group_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_group_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_group_proto_msgTypes[67].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_group_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_group_proto_goTypes,
		DependencyIndexes: file_group_proto_depIdxs,
		EnumInfos:         file_group_proto_enumTypes,
		MessageInfos:      file_group_proto_msgTypes,
	}.Build()
	File_group_proto = out.File
	file_group_proto_rawDesc = nil
	file_group_proto_goTypes = nil
	file_group_proto_depIdxs = nil
}
