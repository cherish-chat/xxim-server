// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: appmgmt.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppMgmtServiceClient is the client API for AppMgmtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppMgmtServiceClient interface {
	GetAllAppMgmtConfig(ctx context.Context, in *GetAllAppMgmtConfigReq, opts ...grpc.CallOption) (*GetAllAppMgmtConfigResp, error)
	UpdateAppMgmtConfig(ctx context.Context, in *UpdateAppMgmtConfigReq, opts ...grpc.CallOption) (*UpdateAppMgmtConfigResp, error)
	GetAllAppMgmtVersion(ctx context.Context, in *GetAllAppMgmtVersionReq, opts ...grpc.CallOption) (*GetAllAppMgmtVersionResp, error)
	GetLatestVersion(ctx context.Context, in *GetLatestVersionReq, opts ...grpc.CallOption) (*GetLatestVersionResp, error)
	GetAppMgmtVersionDetail(ctx context.Context, in *GetAppMgmtVersionDetailReq, opts ...grpc.CallOption) (*GetAppMgmtVersionDetailResp, error)
	AddAppMgmtVersion(ctx context.Context, in *AddAppMgmtVersionReq, opts ...grpc.CallOption) (*AddAppMgmtVersionResp, error)
	UpdateAppMgmtVersion(ctx context.Context, in *UpdateAppMgmtVersionReq, opts ...grpc.CallOption) (*UpdateAppMgmtVersionResp, error)
	DeleteAppMgmtVersion(ctx context.Context, in *DeleteAppMgmtVersionReq, opts ...grpc.CallOption) (*DeleteAppMgmtVersionResp, error)
	GetAllAppMgmtShieldWord(ctx context.Context, in *GetAllAppMgmtShieldWordReq, opts ...grpc.CallOption) (*GetAllAppMgmtShieldWordResp, error)
	GetAppMgmtShieldWordDetail(ctx context.Context, in *GetAppMgmtShieldWordDetailReq, opts ...grpc.CallOption) (*GetAppMgmtShieldWordDetailResp, error)
	AddAppMgmtShieldWord(ctx context.Context, in *AddAppMgmtShieldWordReq, opts ...grpc.CallOption) (*AddAppMgmtShieldWordResp, error)
	UpdateAppMgmtShieldWord(ctx context.Context, in *UpdateAppMgmtShieldWordReq, opts ...grpc.CallOption) (*UpdateAppMgmtShieldWordResp, error)
	DeleteAppMgmtShieldWord(ctx context.Context, in *DeleteAppMgmtShieldWordReq, opts ...grpc.CallOption) (*DeleteAppMgmtShieldWordResp, error)
	GetAllAppMgmtVpn(ctx context.Context, in *GetAllAppMgmtVpnReq, opts ...grpc.CallOption) (*GetAllAppMgmtVpnResp, error)
	GetAppMgmtVpnDetail(ctx context.Context, in *GetAppMgmtVpnDetailReq, opts ...grpc.CallOption) (*GetAppMgmtVpnDetailResp, error)
	AddAppMgmtVpn(ctx context.Context, in *AddAppMgmtVpnReq, opts ...grpc.CallOption) (*AddAppMgmtVpnResp, error)
	UpdateAppMgmtVpn(ctx context.Context, in *UpdateAppMgmtVpnReq, opts ...grpc.CallOption) (*UpdateAppMgmtVpnResp, error)
	DeleteAppMgmtVpn(ctx context.Context, in *DeleteAppMgmtVpnReq, opts ...grpc.CallOption) (*DeleteAppMgmtVpnResp, error)
	GetAllAppMgmtEmoji(ctx context.Context, in *GetAllAppMgmtEmojiReq, opts ...grpc.CallOption) (*GetAllAppMgmtEmojiResp, error)
	GetAppMgmtEmojiDetail(ctx context.Context, in *GetAppMgmtEmojiDetailReq, opts ...grpc.CallOption) (*GetAppMgmtEmojiDetailResp, error)
	AddAppMgmtEmoji(ctx context.Context, in *AddAppMgmtEmojiReq, opts ...grpc.CallOption) (*AddAppMgmtEmojiResp, error)
	UpdateAppMgmtEmoji(ctx context.Context, in *UpdateAppMgmtEmojiReq, opts ...grpc.CallOption) (*UpdateAppMgmtEmojiResp, error)
	DeleteAppMgmtEmoji(ctx context.Context, in *DeleteAppMgmtEmojiReq, opts ...grpc.CallOption) (*DeleteAppMgmtEmojiResp, error)
	GetAllAppMgmtEmojiGroup(ctx context.Context, in *GetAllAppMgmtEmojiGroupReq, opts ...grpc.CallOption) (*GetAllAppMgmtEmojiGroupResp, error)
	GetAppMgmtEmojiGroupDetail(ctx context.Context, in *GetAppMgmtEmojiGroupDetailReq, opts ...grpc.CallOption) (*GetAppMgmtEmojiGroupDetailResp, error)
	AddAppMgmtEmojiGroup(ctx context.Context, in *AddAppMgmtEmojiGroupReq, opts ...grpc.CallOption) (*AddAppMgmtEmojiGroupResp, error)
	UpdateAppMgmtEmojiGroup(ctx context.Context, in *UpdateAppMgmtEmojiGroupReq, opts ...grpc.CallOption) (*UpdateAppMgmtEmojiGroupResp, error)
	DeleteAppMgmtEmojiGroup(ctx context.Context, in *DeleteAppMgmtEmojiGroupReq, opts ...grpc.CallOption) (*DeleteAppMgmtEmojiGroupResp, error)
	GetAllAppMgmtNotice(ctx context.Context, in *GetAllAppMgmtNoticeReq, opts ...grpc.CallOption) (*GetAllAppMgmtNoticeResp, error)
	GetAppMgmtNoticeDetail(ctx context.Context, in *GetAppMgmtNoticeDetailReq, opts ...grpc.CallOption) (*GetAppMgmtNoticeDetailResp, error)
	AddAppMgmtNotice(ctx context.Context, in *AddAppMgmtNoticeReq, opts ...grpc.CallOption) (*AddAppMgmtNoticeResp, error)
	UpdateAppMgmtNotice(ctx context.Context, in *UpdateAppMgmtNoticeReq, opts ...grpc.CallOption) (*UpdateAppMgmtNoticeResp, error)
	DeleteAppMgmtNotice(ctx context.Context, in *DeleteAppMgmtNoticeReq, opts ...grpc.CallOption) (*DeleteAppMgmtNoticeResp, error)
	GetAllAppMgmtLink(ctx context.Context, in *GetAllAppMgmtLinkReq, opts ...grpc.CallOption) (*GetAllAppMgmtLinkResp, error)
	GetAppMgmtLinkDetail(ctx context.Context, in *GetAppMgmtLinkDetailReq, opts ...grpc.CallOption) (*GetAppMgmtLinkDetailResp, error)
	AddAppMgmtLink(ctx context.Context, in *AddAppMgmtLinkReq, opts ...grpc.CallOption) (*AddAppMgmtLinkResp, error)
	UpdateAppMgmtLink(ctx context.Context, in *UpdateAppMgmtLinkReq, opts ...grpc.CallOption) (*UpdateAppMgmtLinkResp, error)
	DeleteAppMgmtLink(ctx context.Context, in *DeleteAppMgmtLinkReq, opts ...grpc.CallOption) (*DeleteAppMgmtLinkResp, error)
	AppGetAllConfig(ctx context.Context, in *AppGetAllConfigReq, opts ...grpc.CallOption) (*AppGetAllConfigResp, error)
}

type appMgmtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppMgmtServiceClient(cc grpc.ClientConnInterface) AppMgmtServiceClient {
	return &appMgmtServiceClient{cc}
}

func (c *appMgmtServiceClient) GetAllAppMgmtConfig(ctx context.Context, in *GetAllAppMgmtConfigReq, opts ...grpc.CallOption) (*GetAllAppMgmtConfigResp, error) {
	out := new(GetAllAppMgmtConfigResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAllAppMgmtConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) UpdateAppMgmtConfig(ctx context.Context, in *UpdateAppMgmtConfigReq, opts ...grpc.CallOption) (*UpdateAppMgmtConfigResp, error) {
	out := new(UpdateAppMgmtConfigResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/UpdateAppMgmtConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAllAppMgmtVersion(ctx context.Context, in *GetAllAppMgmtVersionReq, opts ...grpc.CallOption) (*GetAllAppMgmtVersionResp, error) {
	out := new(GetAllAppMgmtVersionResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAllAppMgmtVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetLatestVersion(ctx context.Context, in *GetLatestVersionReq, opts ...grpc.CallOption) (*GetLatestVersionResp, error) {
	out := new(GetLatestVersionResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetLatestVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAppMgmtVersionDetail(ctx context.Context, in *GetAppMgmtVersionDetailReq, opts ...grpc.CallOption) (*GetAppMgmtVersionDetailResp, error) {
	out := new(GetAppMgmtVersionDetailResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAppMgmtVersionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) AddAppMgmtVersion(ctx context.Context, in *AddAppMgmtVersionReq, opts ...grpc.CallOption) (*AddAppMgmtVersionResp, error) {
	out := new(AddAppMgmtVersionResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/AddAppMgmtVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) UpdateAppMgmtVersion(ctx context.Context, in *UpdateAppMgmtVersionReq, opts ...grpc.CallOption) (*UpdateAppMgmtVersionResp, error) {
	out := new(UpdateAppMgmtVersionResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/UpdateAppMgmtVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) DeleteAppMgmtVersion(ctx context.Context, in *DeleteAppMgmtVersionReq, opts ...grpc.CallOption) (*DeleteAppMgmtVersionResp, error) {
	out := new(DeleteAppMgmtVersionResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/DeleteAppMgmtVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAllAppMgmtShieldWord(ctx context.Context, in *GetAllAppMgmtShieldWordReq, opts ...grpc.CallOption) (*GetAllAppMgmtShieldWordResp, error) {
	out := new(GetAllAppMgmtShieldWordResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAllAppMgmtShieldWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAppMgmtShieldWordDetail(ctx context.Context, in *GetAppMgmtShieldWordDetailReq, opts ...grpc.CallOption) (*GetAppMgmtShieldWordDetailResp, error) {
	out := new(GetAppMgmtShieldWordDetailResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAppMgmtShieldWordDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) AddAppMgmtShieldWord(ctx context.Context, in *AddAppMgmtShieldWordReq, opts ...grpc.CallOption) (*AddAppMgmtShieldWordResp, error) {
	out := new(AddAppMgmtShieldWordResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/AddAppMgmtShieldWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) UpdateAppMgmtShieldWord(ctx context.Context, in *UpdateAppMgmtShieldWordReq, opts ...grpc.CallOption) (*UpdateAppMgmtShieldWordResp, error) {
	out := new(UpdateAppMgmtShieldWordResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/UpdateAppMgmtShieldWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) DeleteAppMgmtShieldWord(ctx context.Context, in *DeleteAppMgmtShieldWordReq, opts ...grpc.CallOption) (*DeleteAppMgmtShieldWordResp, error) {
	out := new(DeleteAppMgmtShieldWordResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/DeleteAppMgmtShieldWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAllAppMgmtVpn(ctx context.Context, in *GetAllAppMgmtVpnReq, opts ...grpc.CallOption) (*GetAllAppMgmtVpnResp, error) {
	out := new(GetAllAppMgmtVpnResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAllAppMgmtVpn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAppMgmtVpnDetail(ctx context.Context, in *GetAppMgmtVpnDetailReq, opts ...grpc.CallOption) (*GetAppMgmtVpnDetailResp, error) {
	out := new(GetAppMgmtVpnDetailResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAppMgmtVpnDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) AddAppMgmtVpn(ctx context.Context, in *AddAppMgmtVpnReq, opts ...grpc.CallOption) (*AddAppMgmtVpnResp, error) {
	out := new(AddAppMgmtVpnResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/AddAppMgmtVpn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) UpdateAppMgmtVpn(ctx context.Context, in *UpdateAppMgmtVpnReq, opts ...grpc.CallOption) (*UpdateAppMgmtVpnResp, error) {
	out := new(UpdateAppMgmtVpnResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/UpdateAppMgmtVpn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) DeleteAppMgmtVpn(ctx context.Context, in *DeleteAppMgmtVpnReq, opts ...grpc.CallOption) (*DeleteAppMgmtVpnResp, error) {
	out := new(DeleteAppMgmtVpnResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/DeleteAppMgmtVpn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAllAppMgmtEmoji(ctx context.Context, in *GetAllAppMgmtEmojiReq, opts ...grpc.CallOption) (*GetAllAppMgmtEmojiResp, error) {
	out := new(GetAllAppMgmtEmojiResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAllAppMgmtEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAppMgmtEmojiDetail(ctx context.Context, in *GetAppMgmtEmojiDetailReq, opts ...grpc.CallOption) (*GetAppMgmtEmojiDetailResp, error) {
	out := new(GetAppMgmtEmojiDetailResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAppMgmtEmojiDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) AddAppMgmtEmoji(ctx context.Context, in *AddAppMgmtEmojiReq, opts ...grpc.CallOption) (*AddAppMgmtEmojiResp, error) {
	out := new(AddAppMgmtEmojiResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/AddAppMgmtEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) UpdateAppMgmtEmoji(ctx context.Context, in *UpdateAppMgmtEmojiReq, opts ...grpc.CallOption) (*UpdateAppMgmtEmojiResp, error) {
	out := new(UpdateAppMgmtEmojiResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/UpdateAppMgmtEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) DeleteAppMgmtEmoji(ctx context.Context, in *DeleteAppMgmtEmojiReq, opts ...grpc.CallOption) (*DeleteAppMgmtEmojiResp, error) {
	out := new(DeleteAppMgmtEmojiResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/DeleteAppMgmtEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAllAppMgmtEmojiGroup(ctx context.Context, in *GetAllAppMgmtEmojiGroupReq, opts ...grpc.CallOption) (*GetAllAppMgmtEmojiGroupResp, error) {
	out := new(GetAllAppMgmtEmojiGroupResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAllAppMgmtEmojiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAppMgmtEmojiGroupDetail(ctx context.Context, in *GetAppMgmtEmojiGroupDetailReq, opts ...grpc.CallOption) (*GetAppMgmtEmojiGroupDetailResp, error) {
	out := new(GetAppMgmtEmojiGroupDetailResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAppMgmtEmojiGroupDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) AddAppMgmtEmojiGroup(ctx context.Context, in *AddAppMgmtEmojiGroupReq, opts ...grpc.CallOption) (*AddAppMgmtEmojiGroupResp, error) {
	out := new(AddAppMgmtEmojiGroupResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/AddAppMgmtEmojiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) UpdateAppMgmtEmojiGroup(ctx context.Context, in *UpdateAppMgmtEmojiGroupReq, opts ...grpc.CallOption) (*UpdateAppMgmtEmojiGroupResp, error) {
	out := new(UpdateAppMgmtEmojiGroupResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/UpdateAppMgmtEmojiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) DeleteAppMgmtEmojiGroup(ctx context.Context, in *DeleteAppMgmtEmojiGroupReq, opts ...grpc.CallOption) (*DeleteAppMgmtEmojiGroupResp, error) {
	out := new(DeleteAppMgmtEmojiGroupResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/DeleteAppMgmtEmojiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAllAppMgmtNotice(ctx context.Context, in *GetAllAppMgmtNoticeReq, opts ...grpc.CallOption) (*GetAllAppMgmtNoticeResp, error) {
	out := new(GetAllAppMgmtNoticeResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAllAppMgmtNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAppMgmtNoticeDetail(ctx context.Context, in *GetAppMgmtNoticeDetailReq, opts ...grpc.CallOption) (*GetAppMgmtNoticeDetailResp, error) {
	out := new(GetAppMgmtNoticeDetailResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAppMgmtNoticeDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) AddAppMgmtNotice(ctx context.Context, in *AddAppMgmtNoticeReq, opts ...grpc.CallOption) (*AddAppMgmtNoticeResp, error) {
	out := new(AddAppMgmtNoticeResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/AddAppMgmtNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) UpdateAppMgmtNotice(ctx context.Context, in *UpdateAppMgmtNoticeReq, opts ...grpc.CallOption) (*UpdateAppMgmtNoticeResp, error) {
	out := new(UpdateAppMgmtNoticeResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/UpdateAppMgmtNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) DeleteAppMgmtNotice(ctx context.Context, in *DeleteAppMgmtNoticeReq, opts ...grpc.CallOption) (*DeleteAppMgmtNoticeResp, error) {
	out := new(DeleteAppMgmtNoticeResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/DeleteAppMgmtNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAllAppMgmtLink(ctx context.Context, in *GetAllAppMgmtLinkReq, opts ...grpc.CallOption) (*GetAllAppMgmtLinkResp, error) {
	out := new(GetAllAppMgmtLinkResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAllAppMgmtLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) GetAppMgmtLinkDetail(ctx context.Context, in *GetAppMgmtLinkDetailReq, opts ...grpc.CallOption) (*GetAppMgmtLinkDetailResp, error) {
	out := new(GetAppMgmtLinkDetailResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/GetAppMgmtLinkDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) AddAppMgmtLink(ctx context.Context, in *AddAppMgmtLinkReq, opts ...grpc.CallOption) (*AddAppMgmtLinkResp, error) {
	out := new(AddAppMgmtLinkResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/AddAppMgmtLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) UpdateAppMgmtLink(ctx context.Context, in *UpdateAppMgmtLinkReq, opts ...grpc.CallOption) (*UpdateAppMgmtLinkResp, error) {
	out := new(UpdateAppMgmtLinkResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/UpdateAppMgmtLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) DeleteAppMgmtLink(ctx context.Context, in *DeleteAppMgmtLinkReq, opts ...grpc.CallOption) (*DeleteAppMgmtLinkResp, error) {
	out := new(DeleteAppMgmtLinkResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/DeleteAppMgmtLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgmtServiceClient) AppGetAllConfig(ctx context.Context, in *AppGetAllConfigReq, opts ...grpc.CallOption) (*AppGetAllConfigResp, error) {
	out := new(AppGetAllConfigResp)
	err := c.cc.Invoke(ctx, "/pb.appMgmtService/AppGetAllConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppMgmtServiceServer is the server API for AppMgmtService service.
// All implementations must embed UnimplementedAppMgmtServiceServer
// for forward compatibility
type AppMgmtServiceServer interface {
	GetAllAppMgmtConfig(context.Context, *GetAllAppMgmtConfigReq) (*GetAllAppMgmtConfigResp, error)
	UpdateAppMgmtConfig(context.Context, *UpdateAppMgmtConfigReq) (*UpdateAppMgmtConfigResp, error)
	GetAllAppMgmtVersion(context.Context, *GetAllAppMgmtVersionReq) (*GetAllAppMgmtVersionResp, error)
	GetLatestVersion(context.Context, *GetLatestVersionReq) (*GetLatestVersionResp, error)
	GetAppMgmtVersionDetail(context.Context, *GetAppMgmtVersionDetailReq) (*GetAppMgmtVersionDetailResp, error)
	AddAppMgmtVersion(context.Context, *AddAppMgmtVersionReq) (*AddAppMgmtVersionResp, error)
	UpdateAppMgmtVersion(context.Context, *UpdateAppMgmtVersionReq) (*UpdateAppMgmtVersionResp, error)
	DeleteAppMgmtVersion(context.Context, *DeleteAppMgmtVersionReq) (*DeleteAppMgmtVersionResp, error)
	GetAllAppMgmtShieldWord(context.Context, *GetAllAppMgmtShieldWordReq) (*GetAllAppMgmtShieldWordResp, error)
	GetAppMgmtShieldWordDetail(context.Context, *GetAppMgmtShieldWordDetailReq) (*GetAppMgmtShieldWordDetailResp, error)
	AddAppMgmtShieldWord(context.Context, *AddAppMgmtShieldWordReq) (*AddAppMgmtShieldWordResp, error)
	UpdateAppMgmtShieldWord(context.Context, *UpdateAppMgmtShieldWordReq) (*UpdateAppMgmtShieldWordResp, error)
	DeleteAppMgmtShieldWord(context.Context, *DeleteAppMgmtShieldWordReq) (*DeleteAppMgmtShieldWordResp, error)
	GetAllAppMgmtVpn(context.Context, *GetAllAppMgmtVpnReq) (*GetAllAppMgmtVpnResp, error)
	GetAppMgmtVpnDetail(context.Context, *GetAppMgmtVpnDetailReq) (*GetAppMgmtVpnDetailResp, error)
	AddAppMgmtVpn(context.Context, *AddAppMgmtVpnReq) (*AddAppMgmtVpnResp, error)
	UpdateAppMgmtVpn(context.Context, *UpdateAppMgmtVpnReq) (*UpdateAppMgmtVpnResp, error)
	DeleteAppMgmtVpn(context.Context, *DeleteAppMgmtVpnReq) (*DeleteAppMgmtVpnResp, error)
	GetAllAppMgmtEmoji(context.Context, *GetAllAppMgmtEmojiReq) (*GetAllAppMgmtEmojiResp, error)
	GetAppMgmtEmojiDetail(context.Context, *GetAppMgmtEmojiDetailReq) (*GetAppMgmtEmojiDetailResp, error)
	AddAppMgmtEmoji(context.Context, *AddAppMgmtEmojiReq) (*AddAppMgmtEmojiResp, error)
	UpdateAppMgmtEmoji(context.Context, *UpdateAppMgmtEmojiReq) (*UpdateAppMgmtEmojiResp, error)
	DeleteAppMgmtEmoji(context.Context, *DeleteAppMgmtEmojiReq) (*DeleteAppMgmtEmojiResp, error)
	GetAllAppMgmtEmojiGroup(context.Context, *GetAllAppMgmtEmojiGroupReq) (*GetAllAppMgmtEmojiGroupResp, error)
	GetAppMgmtEmojiGroupDetail(context.Context, *GetAppMgmtEmojiGroupDetailReq) (*GetAppMgmtEmojiGroupDetailResp, error)
	AddAppMgmtEmojiGroup(context.Context, *AddAppMgmtEmojiGroupReq) (*AddAppMgmtEmojiGroupResp, error)
	UpdateAppMgmtEmojiGroup(context.Context, *UpdateAppMgmtEmojiGroupReq) (*UpdateAppMgmtEmojiGroupResp, error)
	DeleteAppMgmtEmojiGroup(context.Context, *DeleteAppMgmtEmojiGroupReq) (*DeleteAppMgmtEmojiGroupResp, error)
	GetAllAppMgmtNotice(context.Context, *GetAllAppMgmtNoticeReq) (*GetAllAppMgmtNoticeResp, error)
	GetAppMgmtNoticeDetail(context.Context, *GetAppMgmtNoticeDetailReq) (*GetAppMgmtNoticeDetailResp, error)
	AddAppMgmtNotice(context.Context, *AddAppMgmtNoticeReq) (*AddAppMgmtNoticeResp, error)
	UpdateAppMgmtNotice(context.Context, *UpdateAppMgmtNoticeReq) (*UpdateAppMgmtNoticeResp, error)
	DeleteAppMgmtNotice(context.Context, *DeleteAppMgmtNoticeReq) (*DeleteAppMgmtNoticeResp, error)
	GetAllAppMgmtLink(context.Context, *GetAllAppMgmtLinkReq) (*GetAllAppMgmtLinkResp, error)
	GetAppMgmtLinkDetail(context.Context, *GetAppMgmtLinkDetailReq) (*GetAppMgmtLinkDetailResp, error)
	AddAppMgmtLink(context.Context, *AddAppMgmtLinkReq) (*AddAppMgmtLinkResp, error)
	UpdateAppMgmtLink(context.Context, *UpdateAppMgmtLinkReq) (*UpdateAppMgmtLinkResp, error)
	DeleteAppMgmtLink(context.Context, *DeleteAppMgmtLinkReq) (*DeleteAppMgmtLinkResp, error)
	AppGetAllConfig(context.Context, *AppGetAllConfigReq) (*AppGetAllConfigResp, error)
	mustEmbedUnimplementedAppMgmtServiceServer()
}

// UnimplementedAppMgmtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppMgmtServiceServer struct {
}

func (UnimplementedAppMgmtServiceServer) GetAllAppMgmtConfig(context.Context, *GetAllAppMgmtConfigReq) (*GetAllAppMgmtConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppMgmtConfig not implemented")
}
func (UnimplementedAppMgmtServiceServer) UpdateAppMgmtConfig(context.Context, *UpdateAppMgmtConfigReq) (*UpdateAppMgmtConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppMgmtConfig not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAllAppMgmtVersion(context.Context, *GetAllAppMgmtVersionReq) (*GetAllAppMgmtVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppMgmtVersion not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetLatestVersion(context.Context, *GetLatestVersionReq) (*GetLatestVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestVersion not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAppMgmtVersionDetail(context.Context, *GetAppMgmtVersionDetailReq) (*GetAppMgmtVersionDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMgmtVersionDetail not implemented")
}
func (UnimplementedAppMgmtServiceServer) AddAppMgmtVersion(context.Context, *AddAppMgmtVersionReq) (*AddAppMgmtVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppMgmtVersion not implemented")
}
func (UnimplementedAppMgmtServiceServer) UpdateAppMgmtVersion(context.Context, *UpdateAppMgmtVersionReq) (*UpdateAppMgmtVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppMgmtVersion not implemented")
}
func (UnimplementedAppMgmtServiceServer) DeleteAppMgmtVersion(context.Context, *DeleteAppMgmtVersionReq) (*DeleteAppMgmtVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppMgmtVersion not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAllAppMgmtShieldWord(context.Context, *GetAllAppMgmtShieldWordReq) (*GetAllAppMgmtShieldWordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppMgmtShieldWord not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAppMgmtShieldWordDetail(context.Context, *GetAppMgmtShieldWordDetailReq) (*GetAppMgmtShieldWordDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMgmtShieldWordDetail not implemented")
}
func (UnimplementedAppMgmtServiceServer) AddAppMgmtShieldWord(context.Context, *AddAppMgmtShieldWordReq) (*AddAppMgmtShieldWordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppMgmtShieldWord not implemented")
}
func (UnimplementedAppMgmtServiceServer) UpdateAppMgmtShieldWord(context.Context, *UpdateAppMgmtShieldWordReq) (*UpdateAppMgmtShieldWordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppMgmtShieldWord not implemented")
}
func (UnimplementedAppMgmtServiceServer) DeleteAppMgmtShieldWord(context.Context, *DeleteAppMgmtShieldWordReq) (*DeleteAppMgmtShieldWordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppMgmtShieldWord not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAllAppMgmtVpn(context.Context, *GetAllAppMgmtVpnReq) (*GetAllAppMgmtVpnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppMgmtVpn not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAppMgmtVpnDetail(context.Context, *GetAppMgmtVpnDetailReq) (*GetAppMgmtVpnDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMgmtVpnDetail not implemented")
}
func (UnimplementedAppMgmtServiceServer) AddAppMgmtVpn(context.Context, *AddAppMgmtVpnReq) (*AddAppMgmtVpnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppMgmtVpn not implemented")
}
func (UnimplementedAppMgmtServiceServer) UpdateAppMgmtVpn(context.Context, *UpdateAppMgmtVpnReq) (*UpdateAppMgmtVpnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppMgmtVpn not implemented")
}
func (UnimplementedAppMgmtServiceServer) DeleteAppMgmtVpn(context.Context, *DeleteAppMgmtVpnReq) (*DeleteAppMgmtVpnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppMgmtVpn not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAllAppMgmtEmoji(context.Context, *GetAllAppMgmtEmojiReq) (*GetAllAppMgmtEmojiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppMgmtEmoji not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAppMgmtEmojiDetail(context.Context, *GetAppMgmtEmojiDetailReq) (*GetAppMgmtEmojiDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMgmtEmojiDetail not implemented")
}
func (UnimplementedAppMgmtServiceServer) AddAppMgmtEmoji(context.Context, *AddAppMgmtEmojiReq) (*AddAppMgmtEmojiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppMgmtEmoji not implemented")
}
func (UnimplementedAppMgmtServiceServer) UpdateAppMgmtEmoji(context.Context, *UpdateAppMgmtEmojiReq) (*UpdateAppMgmtEmojiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppMgmtEmoji not implemented")
}
func (UnimplementedAppMgmtServiceServer) DeleteAppMgmtEmoji(context.Context, *DeleteAppMgmtEmojiReq) (*DeleteAppMgmtEmojiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppMgmtEmoji not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAllAppMgmtEmojiGroup(context.Context, *GetAllAppMgmtEmojiGroupReq) (*GetAllAppMgmtEmojiGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppMgmtEmojiGroup not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAppMgmtEmojiGroupDetail(context.Context, *GetAppMgmtEmojiGroupDetailReq) (*GetAppMgmtEmojiGroupDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMgmtEmojiGroupDetail not implemented")
}
func (UnimplementedAppMgmtServiceServer) AddAppMgmtEmojiGroup(context.Context, *AddAppMgmtEmojiGroupReq) (*AddAppMgmtEmojiGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppMgmtEmojiGroup not implemented")
}
func (UnimplementedAppMgmtServiceServer) UpdateAppMgmtEmojiGroup(context.Context, *UpdateAppMgmtEmojiGroupReq) (*UpdateAppMgmtEmojiGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppMgmtEmojiGroup not implemented")
}
func (UnimplementedAppMgmtServiceServer) DeleteAppMgmtEmojiGroup(context.Context, *DeleteAppMgmtEmojiGroupReq) (*DeleteAppMgmtEmojiGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppMgmtEmojiGroup not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAllAppMgmtNotice(context.Context, *GetAllAppMgmtNoticeReq) (*GetAllAppMgmtNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppMgmtNotice not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAppMgmtNoticeDetail(context.Context, *GetAppMgmtNoticeDetailReq) (*GetAppMgmtNoticeDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMgmtNoticeDetail not implemented")
}
func (UnimplementedAppMgmtServiceServer) AddAppMgmtNotice(context.Context, *AddAppMgmtNoticeReq) (*AddAppMgmtNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppMgmtNotice not implemented")
}
func (UnimplementedAppMgmtServiceServer) UpdateAppMgmtNotice(context.Context, *UpdateAppMgmtNoticeReq) (*UpdateAppMgmtNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppMgmtNotice not implemented")
}
func (UnimplementedAppMgmtServiceServer) DeleteAppMgmtNotice(context.Context, *DeleteAppMgmtNoticeReq) (*DeleteAppMgmtNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppMgmtNotice not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAllAppMgmtLink(context.Context, *GetAllAppMgmtLinkReq) (*GetAllAppMgmtLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppMgmtLink not implemented")
}
func (UnimplementedAppMgmtServiceServer) GetAppMgmtLinkDetail(context.Context, *GetAppMgmtLinkDetailReq) (*GetAppMgmtLinkDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMgmtLinkDetail not implemented")
}
func (UnimplementedAppMgmtServiceServer) AddAppMgmtLink(context.Context, *AddAppMgmtLinkReq) (*AddAppMgmtLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppMgmtLink not implemented")
}
func (UnimplementedAppMgmtServiceServer) UpdateAppMgmtLink(context.Context, *UpdateAppMgmtLinkReq) (*UpdateAppMgmtLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppMgmtLink not implemented")
}
func (UnimplementedAppMgmtServiceServer) DeleteAppMgmtLink(context.Context, *DeleteAppMgmtLinkReq) (*DeleteAppMgmtLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppMgmtLink not implemented")
}
func (UnimplementedAppMgmtServiceServer) AppGetAllConfig(context.Context, *AppGetAllConfigReq) (*AppGetAllConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppGetAllConfig not implemented")
}
func (UnimplementedAppMgmtServiceServer) mustEmbedUnimplementedAppMgmtServiceServer() {}

// UnsafeAppMgmtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppMgmtServiceServer will
// result in compilation errors.
type UnsafeAppMgmtServiceServer interface {
	mustEmbedUnimplementedAppMgmtServiceServer()
}

func RegisterAppMgmtServiceServer(s grpc.ServiceRegistrar, srv AppMgmtServiceServer) {
	s.RegisterService(&AppMgmtService_ServiceDesc, srv)
}

func _AppMgmtService_GetAllAppMgmtConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAppMgmtConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAllAppMgmtConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtConfig(ctx, req.(*GetAllAppMgmtConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_UpdateAppMgmtConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppMgmtConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/UpdateAppMgmtConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtConfig(ctx, req.(*UpdateAppMgmtConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAllAppMgmtVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAppMgmtVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAllAppMgmtVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtVersion(ctx, req.(*GetAllAppMgmtVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetLatestVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetLatestVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetLatestVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetLatestVersion(ctx, req.(*GetLatestVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAppMgmtVersionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppMgmtVersionDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAppMgmtVersionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAppMgmtVersionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAppMgmtVersionDetail(ctx, req.(*GetAppMgmtVersionDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_AddAppMgmtVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppMgmtVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).AddAppMgmtVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/AddAppMgmtVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).AddAppMgmtVersion(ctx, req.(*AddAppMgmtVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_UpdateAppMgmtVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppMgmtVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/UpdateAppMgmtVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtVersion(ctx, req.(*UpdateAppMgmtVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_DeleteAppMgmtVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppMgmtVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/DeleteAppMgmtVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtVersion(ctx, req.(*DeleteAppMgmtVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAllAppMgmtShieldWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAppMgmtShieldWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtShieldWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAllAppMgmtShieldWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtShieldWord(ctx, req.(*GetAllAppMgmtShieldWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAppMgmtShieldWordDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppMgmtShieldWordDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAppMgmtShieldWordDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAppMgmtShieldWordDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAppMgmtShieldWordDetail(ctx, req.(*GetAppMgmtShieldWordDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_AddAppMgmtShieldWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppMgmtShieldWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).AddAppMgmtShieldWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/AddAppMgmtShieldWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).AddAppMgmtShieldWord(ctx, req.(*AddAppMgmtShieldWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_UpdateAppMgmtShieldWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppMgmtShieldWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtShieldWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/UpdateAppMgmtShieldWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtShieldWord(ctx, req.(*UpdateAppMgmtShieldWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_DeleteAppMgmtShieldWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppMgmtShieldWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtShieldWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/DeleteAppMgmtShieldWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtShieldWord(ctx, req.(*DeleteAppMgmtShieldWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAllAppMgmtVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAppMgmtVpnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAllAppMgmtVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtVpn(ctx, req.(*GetAllAppMgmtVpnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAppMgmtVpnDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppMgmtVpnDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAppMgmtVpnDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAppMgmtVpnDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAppMgmtVpnDetail(ctx, req.(*GetAppMgmtVpnDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_AddAppMgmtVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppMgmtVpnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).AddAppMgmtVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/AddAppMgmtVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).AddAppMgmtVpn(ctx, req.(*AddAppMgmtVpnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_UpdateAppMgmtVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppMgmtVpnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/UpdateAppMgmtVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtVpn(ctx, req.(*UpdateAppMgmtVpnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_DeleteAppMgmtVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppMgmtVpnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/DeleteAppMgmtVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtVpn(ctx, req.(*DeleteAppMgmtVpnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAllAppMgmtEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAppMgmtEmojiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAllAppMgmtEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtEmoji(ctx, req.(*GetAllAppMgmtEmojiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAppMgmtEmojiDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppMgmtEmojiDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAppMgmtEmojiDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAppMgmtEmojiDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAppMgmtEmojiDetail(ctx, req.(*GetAppMgmtEmojiDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_AddAppMgmtEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppMgmtEmojiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).AddAppMgmtEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/AddAppMgmtEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).AddAppMgmtEmoji(ctx, req.(*AddAppMgmtEmojiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_UpdateAppMgmtEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppMgmtEmojiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/UpdateAppMgmtEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtEmoji(ctx, req.(*UpdateAppMgmtEmojiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_DeleteAppMgmtEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppMgmtEmojiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/DeleteAppMgmtEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtEmoji(ctx, req.(*DeleteAppMgmtEmojiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAllAppMgmtEmojiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAppMgmtEmojiGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtEmojiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAllAppMgmtEmojiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtEmojiGroup(ctx, req.(*GetAllAppMgmtEmojiGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAppMgmtEmojiGroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppMgmtEmojiGroupDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAppMgmtEmojiGroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAppMgmtEmojiGroupDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAppMgmtEmojiGroupDetail(ctx, req.(*GetAppMgmtEmojiGroupDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_AddAppMgmtEmojiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppMgmtEmojiGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).AddAppMgmtEmojiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/AddAppMgmtEmojiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).AddAppMgmtEmojiGroup(ctx, req.(*AddAppMgmtEmojiGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_UpdateAppMgmtEmojiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppMgmtEmojiGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtEmojiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/UpdateAppMgmtEmojiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtEmojiGroup(ctx, req.(*UpdateAppMgmtEmojiGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_DeleteAppMgmtEmojiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppMgmtEmojiGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtEmojiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/DeleteAppMgmtEmojiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtEmojiGroup(ctx, req.(*DeleteAppMgmtEmojiGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAllAppMgmtNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAppMgmtNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAllAppMgmtNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtNotice(ctx, req.(*GetAllAppMgmtNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAppMgmtNoticeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppMgmtNoticeDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAppMgmtNoticeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAppMgmtNoticeDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAppMgmtNoticeDetail(ctx, req.(*GetAppMgmtNoticeDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_AddAppMgmtNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppMgmtNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).AddAppMgmtNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/AddAppMgmtNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).AddAppMgmtNotice(ctx, req.(*AddAppMgmtNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_UpdateAppMgmtNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppMgmtNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/UpdateAppMgmtNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtNotice(ctx, req.(*UpdateAppMgmtNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_DeleteAppMgmtNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppMgmtNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/DeleteAppMgmtNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtNotice(ctx, req.(*DeleteAppMgmtNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAllAppMgmtLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAppMgmtLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAllAppMgmtLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAllAppMgmtLink(ctx, req.(*GetAllAppMgmtLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_GetAppMgmtLinkDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppMgmtLinkDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).GetAppMgmtLinkDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/GetAppMgmtLinkDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).GetAppMgmtLinkDetail(ctx, req.(*GetAppMgmtLinkDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_AddAppMgmtLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppMgmtLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).AddAppMgmtLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/AddAppMgmtLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).AddAppMgmtLink(ctx, req.(*AddAppMgmtLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_UpdateAppMgmtLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppMgmtLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/UpdateAppMgmtLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).UpdateAppMgmtLink(ctx, req.(*UpdateAppMgmtLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_DeleteAppMgmtLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppMgmtLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/DeleteAppMgmtLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).DeleteAppMgmtLink(ctx, req.(*DeleteAppMgmtLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgmtService_AppGetAllConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppGetAllConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgmtServiceServer).AppGetAllConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.appMgmtService/AppGetAllConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgmtServiceServer).AppGetAllConfig(ctx, req.(*AppGetAllConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AppMgmtService_ServiceDesc is the grpc.ServiceDesc for AppMgmtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppMgmtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.appMgmtService",
	HandlerType: (*AppMgmtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAppMgmtConfig",
			Handler:    _AppMgmtService_GetAllAppMgmtConfig_Handler,
		},
		{
			MethodName: "UpdateAppMgmtConfig",
			Handler:    _AppMgmtService_UpdateAppMgmtConfig_Handler,
		},
		{
			MethodName: "GetAllAppMgmtVersion",
			Handler:    _AppMgmtService_GetAllAppMgmtVersion_Handler,
		},
		{
			MethodName: "GetLatestVersion",
			Handler:    _AppMgmtService_GetLatestVersion_Handler,
		},
		{
			MethodName: "GetAppMgmtVersionDetail",
			Handler:    _AppMgmtService_GetAppMgmtVersionDetail_Handler,
		},
		{
			MethodName: "AddAppMgmtVersion",
			Handler:    _AppMgmtService_AddAppMgmtVersion_Handler,
		},
		{
			MethodName: "UpdateAppMgmtVersion",
			Handler:    _AppMgmtService_UpdateAppMgmtVersion_Handler,
		},
		{
			MethodName: "DeleteAppMgmtVersion",
			Handler:    _AppMgmtService_DeleteAppMgmtVersion_Handler,
		},
		{
			MethodName: "GetAllAppMgmtShieldWord",
			Handler:    _AppMgmtService_GetAllAppMgmtShieldWord_Handler,
		},
		{
			MethodName: "GetAppMgmtShieldWordDetail",
			Handler:    _AppMgmtService_GetAppMgmtShieldWordDetail_Handler,
		},
		{
			MethodName: "AddAppMgmtShieldWord",
			Handler:    _AppMgmtService_AddAppMgmtShieldWord_Handler,
		},
		{
			MethodName: "UpdateAppMgmtShieldWord",
			Handler:    _AppMgmtService_UpdateAppMgmtShieldWord_Handler,
		},
		{
			MethodName: "DeleteAppMgmtShieldWord",
			Handler:    _AppMgmtService_DeleteAppMgmtShieldWord_Handler,
		},
		{
			MethodName: "GetAllAppMgmtVpn",
			Handler:    _AppMgmtService_GetAllAppMgmtVpn_Handler,
		},
		{
			MethodName: "GetAppMgmtVpnDetail",
			Handler:    _AppMgmtService_GetAppMgmtVpnDetail_Handler,
		},
		{
			MethodName: "AddAppMgmtVpn",
			Handler:    _AppMgmtService_AddAppMgmtVpn_Handler,
		},
		{
			MethodName: "UpdateAppMgmtVpn",
			Handler:    _AppMgmtService_UpdateAppMgmtVpn_Handler,
		},
		{
			MethodName: "DeleteAppMgmtVpn",
			Handler:    _AppMgmtService_DeleteAppMgmtVpn_Handler,
		},
		{
			MethodName: "GetAllAppMgmtEmoji",
			Handler:    _AppMgmtService_GetAllAppMgmtEmoji_Handler,
		},
		{
			MethodName: "GetAppMgmtEmojiDetail",
			Handler:    _AppMgmtService_GetAppMgmtEmojiDetail_Handler,
		},
		{
			MethodName: "AddAppMgmtEmoji",
			Handler:    _AppMgmtService_AddAppMgmtEmoji_Handler,
		},
		{
			MethodName: "UpdateAppMgmtEmoji",
			Handler:    _AppMgmtService_UpdateAppMgmtEmoji_Handler,
		},
		{
			MethodName: "DeleteAppMgmtEmoji",
			Handler:    _AppMgmtService_DeleteAppMgmtEmoji_Handler,
		},
		{
			MethodName: "GetAllAppMgmtEmojiGroup",
			Handler:    _AppMgmtService_GetAllAppMgmtEmojiGroup_Handler,
		},
		{
			MethodName: "GetAppMgmtEmojiGroupDetail",
			Handler:    _AppMgmtService_GetAppMgmtEmojiGroupDetail_Handler,
		},
		{
			MethodName: "AddAppMgmtEmojiGroup",
			Handler:    _AppMgmtService_AddAppMgmtEmojiGroup_Handler,
		},
		{
			MethodName: "UpdateAppMgmtEmojiGroup",
			Handler:    _AppMgmtService_UpdateAppMgmtEmojiGroup_Handler,
		},
		{
			MethodName: "DeleteAppMgmtEmojiGroup",
			Handler:    _AppMgmtService_DeleteAppMgmtEmojiGroup_Handler,
		},
		{
			MethodName: "GetAllAppMgmtNotice",
			Handler:    _AppMgmtService_GetAllAppMgmtNotice_Handler,
		},
		{
			MethodName: "GetAppMgmtNoticeDetail",
			Handler:    _AppMgmtService_GetAppMgmtNoticeDetail_Handler,
		},
		{
			MethodName: "AddAppMgmtNotice",
			Handler:    _AppMgmtService_AddAppMgmtNotice_Handler,
		},
		{
			MethodName: "UpdateAppMgmtNotice",
			Handler:    _AppMgmtService_UpdateAppMgmtNotice_Handler,
		},
		{
			MethodName: "DeleteAppMgmtNotice",
			Handler:    _AppMgmtService_DeleteAppMgmtNotice_Handler,
		},
		{
			MethodName: "GetAllAppMgmtLink",
			Handler:    _AppMgmtService_GetAllAppMgmtLink_Handler,
		},
		{
			MethodName: "GetAppMgmtLinkDetail",
			Handler:    _AppMgmtService_GetAppMgmtLinkDetail_Handler,
		},
		{
			MethodName: "AddAppMgmtLink",
			Handler:    _AppMgmtService_AddAppMgmtLink_Handler,
		},
		{
			MethodName: "UpdateAppMgmtLink",
			Handler:    _AppMgmtService_UpdateAppMgmtLink_Handler,
		},
		{
			MethodName: "DeleteAppMgmtLink",
			Handler:    _AppMgmtService_DeleteAppMgmtLink_Handler,
		},
		{
			MethodName: "AppGetAllConfig",
			Handler:    _AppMgmtService_AppGetAllConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appmgmt.proto",
}
