// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: msg.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RedPacketType int32

const (
	//普通红包 平均分配
	RedPacketType_Normal_RedPacket RedPacketType = 0
	//拼手气红包
	RedPacketType_Random_RedPacket RedPacketType = 1
)

// Enum value maps for RedPacketType.
var (
	RedPacketType_name = map[int32]string{
		0: "Normal_RedPacket",
		1: "Random_RedPacket",
	}
	RedPacketType_value = map[string]int32{
		"Normal_RedPacket": 0,
		"Random_RedPacket": 1,
	}
)

func (x RedPacketType) Enum() *RedPacketType {
	p := new(RedPacketType)
	*p = x
	return p
}

func (x RedPacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedPacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[0].Descriptor()
}

func (RedPacketType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[0]
}

func (x RedPacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedPacketType.Descriptor instead.
func (RedPacketType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

type RedPacketStatus int32

const (
	//未领取
	RedPacketStatus_Not_Received RedPacketStatus = 0
	//已领取部分
	RedPacketStatus_Received_Part RedPacketStatus = 1
	//已领取完
	RedPacketStatus_Received_All RedPacketStatus = 2
	//已过期
	RedPacketStatus_Expired RedPacketStatus = 3
)

// Enum value maps for RedPacketStatus.
var (
	RedPacketStatus_name = map[int32]string{
		0: "Not_Received",
		1: "Received_Part",
		2: "Received_All",
		3: "Expired",
	}
	RedPacketStatus_value = map[string]int32{
		"Not_Received":  0,
		"Received_Part": 1,
		"Received_All":  2,
		"Expired":       3,
	}
)

func (x RedPacketStatus) Enum() *RedPacketStatus {
	p := new(RedPacketStatus)
	*p = x
	return p
}

func (x RedPacketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedPacketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[1].Descriptor()
}

func (RedPacketStatus) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[1]
}

func (x RedPacketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedPacketStatus.Descriptor instead.
func (RedPacketStatus) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

// 推送事件
type MsgMQBody_Event int32

const (
	// 插入消息并推送消息
	MsgMQBody_SendMsgListSync MsgMQBody_Event = 0
)

// Enum value maps for MsgMQBody_Event.
var (
	MsgMQBody_Event_name = map[int32]string{
		0: "SendMsgListSync",
	}
	MsgMQBody_Event_value = map[string]int32{
		"SendMsgListSync": 0,
	}
)

func (x MsgMQBody_Event) Enum() *MsgMQBody_Event {
	p := new(MsgMQBody_Event)
	*p = x
	return p
}

func (x MsgMQBody_Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgMQBody_Event) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[2].Descriptor()
}

func (MsgMQBody_Event) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[2]
}

func (x MsgMQBody_Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgMQBody_Event.Descriptor instead.
func (MsgMQBody_Event) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0, 0}
}

// 服务器通过websocket发送给客户端的消息体
type MsgMQBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event MsgMQBody_Event `protobuf:"varint,1,opt,name=event,proto3,enum=pb.MsgMQBody_Event" json:"event"`
	Data  []byte          `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *MsgMQBody) Reset() {
	*x = MsgMQBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgMQBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgMQBody) ProtoMessage() {}

func (x *MsgMQBody) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgMQBody.ProtoReflect.Descriptor instead.
func (*MsgMQBody) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

func (x *MsgMQBody) GetEvent() MsgMQBody_Event {
	if x != nil {
		return x.Event
	}
	return MsgMQBody_SendMsgListSync
}

func (x *MsgMQBody) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type MsgData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMsgId string               `protobuf:"bytes,1,opt,name=clientMsgId,proto3" json:"clientMsgId"`
	ServerMsgId string               `protobuf:"bytes,2,opt,name=serverMsgId,proto3" json:"serverMsgId"`
	ClientTime  string               `protobuf:"bytes,3,opt,name=clientTime,proto3" json:"clientTime"`
	ServerTime  string               `protobuf:"bytes,4,opt,name=serverTime,proto3" json:"serverTime"`
	SenderId    string               `protobuf:"bytes,11,opt,name=senderId,proto3" json:"senderId"`        // 发送者id
	SenderInfo  []byte               `protobuf:"bytes,12,opt,name=senderInfo,proto3" json:"senderInfo"`    // 发送者信息
	ConvId      string               `protobuf:"bytes,21,opt,name=convId,proto3" json:"convId"`            // 会话id (单聊时 single:user1-user2，群聊时 group:groupId，通知号 notice:noticeId)
	AtUsers     []string             `protobuf:"bytes,22,rep,name=atUsers,proto3" json:"atUsers"`          // 强提醒用户id列表 用户不在线时，会收到离线推送，除非用户屏蔽了该会话 如果需要提醒所有人，可以传入"all"
	ContentType int32                `protobuf:"varint,31,opt,name=contentType,proto3" json:"contentType"` // 消息内容类型
	Content     []byte               `protobuf:"bytes,32,opt,name=content,proto3" json:"content"`          // 消息内容
	Seq         string               `protobuf:"bytes,33,opt,name=seq,proto3" json:"seq"`                  // 消息序号 会话内唯一且递增
	Options     *MsgData_Options     `protobuf:"bytes,41,opt,name=options,proto3" json:"options"`          // 消息选项
	OfflinePush *MsgData_OfflinePush `protobuf:"bytes,42,opt,name=offlinePush,proto3" json:"offlinePush"`  // 离线推送
	Ext         []byte               `protobuf:"bytes,101,opt,name=ext,proto3" json:"ext"`
}

func (x *MsgData) Reset() {
	*x = MsgData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgData) ProtoMessage() {}

func (x *MsgData) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgData.ProtoReflect.Descriptor instead.
func (*MsgData) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

func (x *MsgData) GetClientMsgId() string {
	if x != nil {
		return x.ClientMsgId
	}
	return ""
}

func (x *MsgData) GetServerMsgId() string {
	if x != nil {
		return x.ServerMsgId
	}
	return ""
}

func (x *MsgData) GetClientTime() string {
	if x != nil {
		return x.ClientTime
	}
	return ""
}

func (x *MsgData) GetServerTime() string {
	if x != nil {
		return x.ServerTime
	}
	return ""
}

func (x *MsgData) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *MsgData) GetSenderInfo() []byte {
	if x != nil {
		return x.SenderInfo
	}
	return nil
}

func (x *MsgData) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *MsgData) GetAtUsers() []string {
	if x != nil {
		return x.AtUsers
	}
	return nil
}

func (x *MsgData) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *MsgData) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *MsgData) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

func (x *MsgData) GetOptions() *MsgData_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *MsgData) GetOfflinePush() *MsgData_OfflinePush {
	if x != nil {
		return x.OfflinePush
	}
	return nil
}

func (x *MsgData) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

type MsgDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgDataList []*MsgData `protobuf:"bytes,1,rep,name=msgDataList,proto3" json:"msgDataList"`
}

func (x *MsgDataList) Reset() {
	*x = MsgDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDataList) ProtoMessage() {}

func (x *MsgDataList) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDataList.ProtoReflect.Descriptor instead.
func (*MsgDataList) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{2}
}

func (x *MsgDataList) GetMsgDataList() []*MsgData {
	if x != nil {
		return x.MsgDataList
	}
	return nil
}

type SendMsgListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgDataList []*MsgData `protobuf:"bytes,1,rep,name=msgDataList,proto3" json:"msgDataList"`
	// options
	// 1. 延迟时间（秒） 不得大于 864000秒 也就是10天
	DeliverAfter *int32     `protobuf:"varint,2,opt,name=deliverAfter,proto3,oneof" json:"deliverAfter"`
	CommonReq    *CommonReq `protobuf:"bytes,11,opt,name=commonReq,proto3" json:"commonReq"`
}

func (x *SendMsgListReq) Reset() {
	*x = SendMsgListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgListReq) ProtoMessage() {}

func (x *SendMsgListReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgListReq.ProtoReflect.Descriptor instead.
func (*SendMsgListReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{3}
}

func (x *SendMsgListReq) GetMsgDataList() []*MsgData {
	if x != nil {
		return x.MsgDataList
	}
	return nil
}

func (x *SendMsgListReq) GetDeliverAfter() int32 {
	if x != nil && x.DeliverAfter != nil {
		return *x.DeliverAfter
	}
	return 0
}

func (x *SendMsgListReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

type SendMsgListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *SendMsgListResp) Reset() {
	*x = SendMsgListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgListResp) ProtoMessage() {}

func (x *SendMsgListResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgListResp.ProtoReflect.Descriptor instead.
func (*SendMsgListResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{4}
}

func (x *SendMsgListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type PushMsgListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgDataList []*MsgData `protobuf:"bytes,1,rep,name=msgDataList,proto3" json:"msgDataList"`
}

func (x *PushMsgListReq) Reset() {
	*x = PushMsgListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMsgListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMsgListReq) ProtoMessage() {}

func (x *PushMsgListReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMsgListReq.ProtoReflect.Descriptor instead.
func (*PushMsgListReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{5}
}

func (x *PushMsgListReq) GetMsgDataList() []*MsgData {
	if x != nil {
		return x.MsgDataList
	}
	return nil
}

type BatchGetMsgListByConvIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items     []*BatchGetMsgListByConvIdReq_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	Push      bool                               `protobuf:"varint,2,opt,name=push,proto3" json:"push"`
	CommonReq *CommonReq                         `protobuf:"bytes,11,opt,name=commonReq,proto3" json:"commonReq"`
}

func (x *BatchGetMsgListByConvIdReq) Reset() {
	*x = BatchGetMsgListByConvIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetMsgListByConvIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetMsgListByConvIdReq) ProtoMessage() {}

func (x *BatchGetMsgListByConvIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetMsgListByConvIdReq.ProtoReflect.Descriptor instead.
func (*BatchGetMsgListByConvIdReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{6}
}

func (x *BatchGetMsgListByConvIdReq) GetItems() []*BatchGetMsgListByConvIdReq_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *BatchGetMsgListByConvIdReq) GetPush() bool {
	if x != nil {
		return x.Push
	}
	return false
}

func (x *BatchGetMsgListByConvIdReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

type GetMsgListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgDataList []*MsgData  `protobuf:"bytes,1,rep,name=msgDataList,proto3" json:"msgDataList"`
	CommonResp  *CommonResp `protobuf:"bytes,11,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *GetMsgListResp) Reset() {
	*x = GetMsgListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMsgListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMsgListResp) ProtoMessage() {}

func (x *GetMsgListResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMsgListResp.ProtoReflect.Descriptor instead.
func (*GetMsgListResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{7}
}

func (x *GetMsgListResp) GetMsgDataList() []*MsgData {
	if x != nil {
		return x.MsgDataList
	}
	return nil
}

func (x *GetMsgListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type GetMsgByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMsgId *string    `protobuf:"bytes,1,opt,name=serverMsgId,proto3,oneof" json:"serverMsgId"`
	ClientMsgId *string    `protobuf:"bytes,2,opt,name=clientMsgId,proto3,oneof" json:"clientMsgId"`
	Push        bool       `protobuf:"varint,3,opt,name=push,proto3" json:"push"`
	CommonReq   *CommonReq `protobuf:"bytes,11,opt,name=commonReq,proto3" json:"commonReq"`
}

func (x *GetMsgByIdReq) Reset() {
	*x = GetMsgByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMsgByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMsgByIdReq) ProtoMessage() {}

func (x *GetMsgByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMsgByIdReq.ProtoReflect.Descriptor instead.
func (*GetMsgByIdReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{8}
}

func (x *GetMsgByIdReq) GetServerMsgId() string {
	if x != nil && x.ServerMsgId != nil {
		return *x.ServerMsgId
	}
	return ""
}

func (x *GetMsgByIdReq) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *GetMsgByIdReq) GetPush() bool {
	if x != nil {
		return x.Push
	}
	return false
}

func (x *GetMsgByIdReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

type GetMsgByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgData    *MsgData    `protobuf:"bytes,1,opt,name=msgData,proto3" json:"msgData"`
	CommonResp *CommonResp `protobuf:"bytes,11,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *GetMsgByIdResp) Reset() {
	*x = GetMsgByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMsgByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMsgByIdResp) ProtoMessage() {}

func (x *GetMsgByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMsgByIdResp.ProtoReflect.Descriptor instead.
func (*GetMsgByIdResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{9}
}

func (x *GetMsgByIdResp) GetMsgData() *MsgData {
	if x != nil {
		return x.MsgData
	}
	return nil
}

func (x *GetMsgByIdResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//批量设置用户某会话的minseq
type BatchSetMinSeqReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq  *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	ConvId     string     `protobuf:"bytes,2,opt,name=convId,proto3" json:"convId"`
	UserIdList []string   `protobuf:"bytes,3,rep,name=userIdList,proto3" json:"userIdList"`
	MinSeq     string     `protobuf:"bytes,4,opt,name=minSeq,proto3" json:"minSeq"`
}

func (x *BatchSetMinSeqReq) Reset() {
	*x = BatchSetMinSeqReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetMinSeqReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetMinSeqReq) ProtoMessage() {}

func (x *BatchSetMinSeqReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetMinSeqReq.ProtoReflect.Descriptor instead.
func (*BatchSetMinSeqReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{10}
}

func (x *BatchSetMinSeqReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *BatchSetMinSeqReq) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *BatchSetMinSeqReq) GetUserIdList() []string {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

func (x *BatchSetMinSeqReq) GetMinSeq() string {
	if x != nil {
		return x.MinSeq
	}
	return ""
}

type BatchSetMinSeqResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *BatchSetMinSeqResp) Reset() {
	*x = BatchSetMinSeqResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetMinSeqResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetMinSeqResp) ProtoMessage() {}

func (x *BatchSetMinSeqResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetMinSeqResp.ProtoReflect.Descriptor instead.
func (*BatchSetMinSeqResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{11}
}

func (x *BatchSetMinSeqResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//批量获取会话的seq
type BatchGetConvSeqReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvIdList []string   `protobuf:"bytes,1,rep,name=convIdList,proto3" json:"convIdList"`
	CommonReq  *CommonReq `protobuf:"bytes,11,opt,name=commonReq,proto3" json:"commonReq"`
}

func (x *BatchGetConvSeqReq) Reset() {
	*x = BatchGetConvSeqReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetConvSeqReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetConvSeqReq) ProtoMessage() {}

func (x *BatchGetConvSeqReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetConvSeqReq.ProtoReflect.Descriptor instead.
func (*BatchGetConvSeqReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{12}
}

func (x *BatchGetConvSeqReq) GetConvIdList() []string {
	if x != nil {
		return x.ConvIdList
	}
	return nil
}

func (x *BatchGetConvSeqReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

type BatchGetConvSeqResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvSeqMap map[string]*BatchGetConvSeqResp_ConvSeq `protobuf:"bytes,1,rep,name=convSeqMap,proto3" json:"convSeqMap" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CommonResp *CommonResp                             `protobuf:"bytes,11,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *BatchGetConvSeqResp) Reset() {
	*x = BatchGetConvSeqResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetConvSeqResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetConvSeqResp) ProtoMessage() {}

func (x *BatchGetConvSeqResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetConvSeqResp.ProtoReflect.Descriptor instead.
func (*BatchGetConvSeqResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{13}
}

func (x *BatchGetConvSeqResp) GetConvSeqMap() map[string]*BatchGetConvSeqResp_ConvSeq {
	if x != nil {
		return x.ConvSeqMap
	}
	return nil
}

func (x *BatchGetConvSeqResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//GetConvSubscribersReq 获取一个会话里所有的消息订阅者
type GetConvSubscribersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	ConvId    string     `protobuf:"bytes,2,opt,name=convId,proto3" json:"convId"`
	// 最后的活跃时间 会查询 >= lastActiveTime 的订阅者
	LastActiveTime *int64 `protobuf:"varint,3,opt,name=lastActiveTime,proto3,oneof" json:"lastActiveTime"`
}

func (x *GetConvSubscribersReq) Reset() {
	*x = GetConvSubscribersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConvSubscribersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConvSubscribersReq) ProtoMessage() {}

func (x *GetConvSubscribersReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConvSubscribersReq.ProtoReflect.Descriptor instead.
func (*GetConvSubscribersReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{14}
}

func (x *GetConvSubscribersReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetConvSubscribersReq) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *GetConvSubscribersReq) GetLastActiveTime() int64 {
	if x != nil && x.LastActiveTime != nil {
		return *x.LastActiveTime
	}
	return 0
}

type GetConvSubscribersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	UserIdList []string    `protobuf:"bytes,2,rep,name=userIdList,proto3" json:"userIdList"`
}

func (x *GetConvSubscribersResp) Reset() {
	*x = GetConvSubscribersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConvSubscribersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConvSubscribersResp) ProtoMessage() {}

func (x *GetConvSubscribersResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConvSubscribersResp.ProtoReflect.Descriptor instead.
func (*GetConvSubscribersResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{15}
}

func (x *GetConvSubscribersResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetConvSubscribersResp) GetUserIdList() []string {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

type OfflinePushMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	UserIds   []string   `protobuf:"bytes,2,rep,name=userIds,proto3" json:"userIds"`
	Title     string     `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	Content   string     `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
	Payload   string     `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload"`
	UniqueId  string     `protobuf:"bytes,6,opt,name=uniqueId,proto3" json:"uniqueId"`
}

func (x *OfflinePushMsgReq) Reset() {
	*x = OfflinePushMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflinePushMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflinePushMsgReq) ProtoMessage() {}

func (x *OfflinePushMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflinePushMsgReq.ProtoReflect.Descriptor instead.
func (*OfflinePushMsgReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{16}
}

func (x *OfflinePushMsgReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *OfflinePushMsgReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *OfflinePushMsgReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *OfflinePushMsgReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OfflinePushMsgReq) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *OfflinePushMsgReq) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

type OfflinePushMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *OfflinePushMsgResp) Reset() {
	*x = OfflinePushMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflinePushMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflinePushMsgResp) ProtoMessage() {}

func (x *OfflinePushMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflinePushMsgResp.ProtoReflect.Descriptor instead.
func (*OfflinePushMsgResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{17}
}

func (x *OfflinePushMsgResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// GetConvOnlineCountReq 获取一个会话里所有的在线用户
type GetConvOnlineCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	ConvId    string     `protobuf:"bytes,2,opt,name=convId,proto3" json:"convId"`
}

func (x *GetConvOnlineCountReq) Reset() {
	*x = GetConvOnlineCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConvOnlineCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConvOnlineCountReq) ProtoMessage() {}

func (x *GetConvOnlineCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConvOnlineCountReq.ProtoReflect.Descriptor instead.
func (*GetConvOnlineCountReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{18}
}

func (x *GetConvOnlineCountReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetConvOnlineCountReq) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

type GetConvOnlineCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	User       int32       `protobuf:"varint,2,opt,name=user,proto3" json:"user"`
	Device     int32       `protobuf:"varint,3,opt,name=device,proto3" json:"device"`
}

func (x *GetConvOnlineCountResp) Reset() {
	*x = GetConvOnlineCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConvOnlineCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConvOnlineCountResp) ProtoMessage() {}

func (x *GetConvOnlineCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConvOnlineCountResp.ProtoReflect.Descriptor instead.
func (*GetConvOnlineCountResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{19}
}

func (x *GetConvOnlineCountResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetConvOnlineCountResp) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *GetConvOnlineCountResp) GetDevice() int32 {
	if x != nil {
		return x.Device
	}
	return 0
}

//FlushUsersSubConvReq 刷新用户订阅的会话
type FlushUsersSubConvReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	UserIds   []string   `protobuf:"bytes,2,rep,name=userIds,proto3" json:"userIds"`
	// 对比的convIds 如果是单聊并且不是好友 也加入到订阅的会话里
	CompareConvIds []string `protobuf:"bytes,3,rep,name=compareConvIds,proto3" json:"compareConvIds"`
}

func (x *FlushUsersSubConvReq) Reset() {
	*x = FlushUsersSubConvReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushUsersSubConvReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushUsersSubConvReq) ProtoMessage() {}

func (x *FlushUsersSubConvReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushUsersSubConvReq.ProtoReflect.Descriptor instead.
func (*FlushUsersSubConvReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{20}
}

func (x *FlushUsersSubConvReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *FlushUsersSubConvReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *FlushUsersSubConvReq) GetCompareConvIds() []string {
	if x != nil {
		return x.CompareConvIds
	}
	return nil
}

//GetAllMsgListReq 获取所有消息
type GetAllMsgListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq        `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	ConvId    string            `protobuf:"bytes,2,opt,name=convId,proto3" json:"convId"`
	Page      *Page             `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
	Filter    map[string]string `protobuf:"bytes,4,rep,name=filter,proto3" json:"filter" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAllMsgListReq) Reset() {
	*x = GetAllMsgListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllMsgListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMsgListReq) ProtoMessage() {}

func (x *GetAllMsgListReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMsgListReq.ProtoReflect.Descriptor instead.
func (*GetAllMsgListReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{21}
}

func (x *GetAllMsgListReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetAllMsgListReq) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *GetAllMsgListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetAllMsgListReq) GetFilter() map[string]string {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetAllMsgListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp  *CommonResp       `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	MsgDataList []*MsgData        `protobuf:"bytes,2,rep,name=msgDataList,proto3" json:"msgDataList"`
	Total       int64             `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	UserMap     map[string]string `protobuf:"bytes,4,rep,name=userMap,proto3" json:"userMap" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAllMsgListResp) Reset() {
	*x = GetAllMsgListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllMsgListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMsgListResp) ProtoMessage() {}

func (x *GetAllMsgListResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMsgListResp.ProtoReflect.Descriptor instead.
func (*GetAllMsgListResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{22}
}

func (x *GetAllMsgListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetAllMsgListResp) GetMsgDataList() []*MsgData {
	if x != nil {
		return x.MsgDataList
	}
	return nil
}

func (x *GetAllMsgListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetAllMsgListResp) GetUserMap() map[string]string {
	if x != nil {
		return x.UserMap
	}
	return nil
}

//ReadMsgReq 设置会话已读
type ReadMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId      string     `protobuf:"bytes,1,opt,name=senderId,proto3" json:"senderId"`
	ConvId        string     `protobuf:"bytes,2,opt,name=convId,proto3" json:"convId"`
	Seq           string     `protobuf:"bytes,3,opt,name=seq,proto3" json:"seq"`
	NoticeContent []byte     `protobuf:"bytes,4,opt,name=noticeContent,proto3" json:"noticeContent"`
	CommonReq     *CommonReq `protobuf:"bytes,11,opt,name=commonReq,proto3" json:"commonReq"`
}

func (x *ReadMsgReq) Reset() {
	*x = ReadMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMsgReq) ProtoMessage() {}

func (x *ReadMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMsgReq.ProtoReflect.Descriptor instead.
func (*ReadMsgReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{23}
}

func (x *ReadMsgReq) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *ReadMsgReq) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *ReadMsgReq) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

func (x *ReadMsgReq) GetNoticeContent() []byte {
	if x != nil {
		return x.NoticeContent
	}
	return nil
}

func (x *ReadMsgReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

type ReadMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *ReadMsgResp) Reset() {
	*x = ReadMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMsgResp) ProtoMessage() {}

func (x *ReadMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMsgResp.ProtoReflect.Descriptor instead.
func (*ReadMsgResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{24}
}

func (x *ReadMsgResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//EditMsgReq 编辑消息
type EditMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId      string     `protobuf:"bytes,1,opt,name=senderId,proto3" json:"senderId"`
	ServerMsgId   string     `protobuf:"bytes,2,opt,name=serverMsgId,proto3" json:"serverMsgId"`
	ContentType   int32      `protobuf:"varint,3,opt,name=contentType,proto3" json:"contentType"`
	Content       []byte     `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
	Ext           []byte     `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext"`
	NoticeContent []byte     `protobuf:"bytes,6,opt,name=noticeContent,proto3" json:"noticeContent"`
	CommonReq     *CommonReq `protobuf:"bytes,11,opt,name=commonReq,proto3" json:"commonReq"`
}

func (x *EditMsgReq) Reset() {
	*x = EditMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMsgReq) ProtoMessage() {}

func (x *EditMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMsgReq.ProtoReflect.Descriptor instead.
func (*EditMsgReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{25}
}

func (x *EditMsgReq) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *EditMsgReq) GetServerMsgId() string {
	if x != nil {
		return x.ServerMsgId
	}
	return ""
}

func (x *EditMsgReq) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *EditMsgReq) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *EditMsgReq) GetExt() []byte {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *EditMsgReq) GetNoticeContent() []byte {
	if x != nil {
		return x.NoticeContent
	}
	return nil
}

func (x *EditMsgReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

type EditMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *EditMsgResp) Reset() {
	*x = EditMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMsgResp) ProtoMessage() {}

func (x *EditMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMsgResp.ProtoReflect.Descriptor instead.
func (*EditMsgResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{26}
}

func (x *EditMsgResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//FlushShieldWordTireTreeReq 刷新屏蔽词
type FlushShieldWordTireTreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
}

func (x *FlushShieldWordTireTreeReq) Reset() {
	*x = FlushShieldWordTireTreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushShieldWordTireTreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushShieldWordTireTreeReq) ProtoMessage() {}

func (x *FlushShieldWordTireTreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushShieldWordTireTreeReq.ProtoReflect.Descriptor instead.
func (*FlushShieldWordTireTreeReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{27}
}

func (x *FlushShieldWordTireTreeReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

type FlushShieldWordTireTreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *FlushShieldWordTireTreeResp) Reset() {
	*x = FlushShieldWordTireTreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushShieldWordTireTreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushShieldWordTireTreeResp) ProtoMessage() {}

func (x *FlushShieldWordTireTreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushShieldWordTireTreeResp.ProtoReflect.Descriptor instead.
func (*FlushShieldWordTireTreeResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{28}
}

func (x *FlushShieldWordTireTreeResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type RedPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketId string `protobuf:"bytes,1,opt,name=redPacketId,proto3" json:"redPacketId"`
	ConvId      string `protobuf:"bytes,2,opt,name=convId,proto3" json:"convId"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	//红包类型
	RedPacketType RedPacketType `protobuf:"varint,4,opt,name=redPacketType,proto3,enum=pb.RedPacketType" json:"redPacketType"`
	//红包个数
	Count int32 `protobuf:"varint,5,opt,name=count,proto3" json:"count"`
	//红包总金额 单位分 只有RedPacketType=Random_RedPacket时才有用
	TotalAmount int64 `protobuf:"varint,6,opt,name=totalAmount,proto3" json:"totalAmount"`
	//单个红包金额 单位分 只有RedPacketType=Normal_RedPacket时才有用
	SingleAmount int64 `protobuf:"varint,7,opt,name=singleAmount,proto3" json:"singleAmount"`
	//红包封面
	Cover string `protobuf:"bytes,8,opt,name=cover,proto3" json:"cover"`
	//红包领取状态
	RedPacketStatus RedPacketStatus       `protobuf:"varint,9,opt,name=redPacketStatus,proto3,enum=pb.RedPacketStatus" json:"redPacketStatus"`
	ReceiverList    []*RedPacket_Receiver `protobuf:"bytes,10,rep,name=receiverList,proto3" json:"receiverList"`
	//红包发送时间
	SendTime int64 `protobuf:"varint,11,opt,name=sendTime,proto3" json:"sendTime"`
	//红包过期时间
	ExpireTime int64 `protobuf:"varint,12,opt,name=expireTime,proto3" json:"expireTime"`
}

func (x *RedPacket) Reset() {
	*x = RedPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacket) ProtoMessage() {}

func (x *RedPacket) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacket.ProtoReflect.Descriptor instead.
func (*RedPacket) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{29}
}

func (x *RedPacket) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

func (x *RedPacket) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *RedPacket) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RedPacket) GetRedPacketType() RedPacketType {
	if x != nil {
		return x.RedPacketType
	}
	return RedPacketType_Normal_RedPacket
}

func (x *RedPacket) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RedPacket) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *RedPacket) GetSingleAmount() int64 {
	if x != nil {
		return x.SingleAmount
	}
	return 0
}

func (x *RedPacket) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *RedPacket) GetRedPacketStatus() RedPacketStatus {
	if x != nil {
		return x.RedPacketStatus
	}
	return RedPacketStatus_Not_Received
}

func (x *RedPacket) GetReceiverList() []*RedPacket_Receiver {
	if x != nil {
		return x.ReceiverList
	}
	return nil
}

func (x *RedPacket) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *RedPacket) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

//SendRedPacketReq 发红包
type SendRedPacketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	RedPacket *RedPacket `protobuf:"bytes,2,opt,name=redPacket,proto3" json:"redPacket"`
}

func (x *SendRedPacketReq) Reset() {
	*x = SendRedPacketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRedPacketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRedPacketReq) ProtoMessage() {}

func (x *SendRedPacketReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRedPacketReq.ProtoReflect.Descriptor instead.
func (*SendRedPacketReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{30}
}

func (x *SendRedPacketReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *SendRedPacketReq) GetRedPacket() *RedPacket {
	if x != nil {
		return x.RedPacket
	}
	return nil
}

type SendRedPacketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	RedPacket  *RedPacket  `protobuf:"bytes,2,opt,name=redPacket,proto3" json:"redPacket"`
}

func (x *SendRedPacketResp) Reset() {
	*x = SendRedPacketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRedPacketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRedPacketResp) ProtoMessage() {}

func (x *SendRedPacketResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRedPacketResp.ProtoReflect.Descriptor instead.
func (*SendRedPacketResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{31}
}

func (x *SendRedPacketResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *SendRedPacketResp) GetRedPacket() *RedPacket {
	if x != nil {
		return x.RedPacket
	}
	return nil
}

//ReceiveRedPacketReq 领取红包
type ReceiveRedPacketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq   *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	ConvId      string     `protobuf:"bytes,2,opt,name=convId,proto3" json:"convId"`
	RedPacketId string     `protobuf:"bytes,3,opt,name=redPacketId,proto3" json:"redPacketId"`
	ServerMsgId string     `protobuf:"bytes,4,opt,name=serverMsgId,proto3" json:"serverMsgId"`
}

func (x *ReceiveRedPacketReq) Reset() {
	*x = ReceiveRedPacketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveRedPacketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveRedPacketReq) ProtoMessage() {}

func (x *ReceiveRedPacketReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveRedPacketReq.ProtoReflect.Descriptor instead.
func (*ReceiveRedPacketReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{32}
}

func (x *ReceiveRedPacketReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *ReceiveRedPacketReq) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *ReceiveRedPacketReq) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

func (x *ReceiveRedPacketReq) GetServerMsgId() string {
	if x != nil {
		return x.ServerMsgId
	}
	return ""
}

type ReceiveRedPacketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	RedPacket  *RedPacket  `protobuf:"bytes,2,opt,name=redPacket,proto3" json:"redPacket"`
}

func (x *ReceiveRedPacketResp) Reset() {
	*x = ReceiveRedPacketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveRedPacketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveRedPacketResp) ProtoMessage() {}

func (x *ReceiveRedPacketResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveRedPacketResp.ProtoReflect.Descriptor instead.
func (*ReceiveRedPacketResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{33}
}

func (x *ReceiveRedPacketResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *ReceiveRedPacketResp) GetRedPacket() *RedPacket {
	if x != nil {
		return x.RedPacket
	}
	return nil
}

//GetRedPacketDetailReq 获取红包详情
type GetRedPacketDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq   *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	ConvId      string     `protobuf:"bytes,2,opt,name=convId,proto3" json:"convId"`
	RedPacketId string     `protobuf:"bytes,3,opt,name=redPacketId,proto3" json:"redPacketId"`
}

func (x *GetRedPacketDetailReq) Reset() {
	*x = GetRedPacketDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRedPacketDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedPacketDetailReq) ProtoMessage() {}

func (x *GetRedPacketDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedPacketDetailReq.ProtoReflect.Descriptor instead.
func (*GetRedPacketDetailReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{34}
}

func (x *GetRedPacketDetailReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetRedPacketDetailReq) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *GetRedPacketDetailReq) GetRedPacketId() string {
	if x != nil {
		return x.RedPacketId
	}
	return ""
}

type GetRedPacketDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	RedPacket  *RedPacket  `protobuf:"bytes,2,opt,name=redPacket,proto3" json:"redPacket"`
}

func (x *GetRedPacketDetailResp) Reset() {
	*x = GetRedPacketDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRedPacketDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedPacketDetailResp) ProtoMessage() {}

func (x *GetRedPacketDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedPacketDetailResp.ProtoReflect.Descriptor instead.
func (*GetRedPacketDetailResp) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{35}
}

func (x *GetRedPacketDetailResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetRedPacketDetailResp) GetRedPacket() *RedPacket {
	if x != nil {
		return x.RedPacket
	}
	return nil
}

type MsgData_OfflinePush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`
	Payload string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload"`
}

func (x *MsgData_OfflinePush) Reset() {
	*x = MsgData_OfflinePush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgData_OfflinePush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgData_OfflinePush) ProtoMessage() {}

func (x *MsgData_OfflinePush) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgData_OfflinePush.ProtoReflect.Descriptor instead.
func (*MsgData_OfflinePush) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MsgData_OfflinePush) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MsgData_OfflinePush) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MsgData_OfflinePush) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type MsgData_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 服务端是否需要保存消息
	StorageForServer bool `protobuf:"varint,1,opt,name=storageForServer,proto3" json:"storageForServer"`
	// 客户端是否需要保存消息
	StorageForClient bool `protobuf:"varint,2,opt,name=storageForClient,proto3" json:"storageForClient"`
	// 是否需要解密 （端对端加密技术，服务端无法解密）
	NeedDecrypt bool `protobuf:"varint,3,opt,name=needDecrypt,proto3" json:"needDecrypt"`
	// 是否需要离线推送
	OfflinePush bool `protobuf:"varint,4,opt,name=offlinePush,proto3" json:"offlinePush"`
	// 是否需要重新渲染会话
	UpdateConvMsg bool `protobuf:"varint,5,opt,name=updateConvMsg,proto3" json:"updateConvMsg"`
	// 消息是否需要计入未读数
	UpdateUnreadCount bool `protobuf:"varint,6,opt,name=updateUnreadCount,proto3" json:"updateUnreadCount"`
}

func (x *MsgData_Options) Reset() {
	*x = MsgData_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgData_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgData_Options) ProtoMessage() {}

func (x *MsgData_Options) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgData_Options.ProtoReflect.Descriptor instead.
func (*MsgData_Options) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MsgData_Options) GetStorageForServer() bool {
	if x != nil {
		return x.StorageForServer
	}
	return false
}

func (x *MsgData_Options) GetStorageForClient() bool {
	if x != nil {
		return x.StorageForClient
	}
	return false
}

func (x *MsgData_Options) GetNeedDecrypt() bool {
	if x != nil {
		return x.NeedDecrypt
	}
	return false
}

func (x *MsgData_Options) GetOfflinePush() bool {
	if x != nil {
		return x.OfflinePush
	}
	return false
}

func (x *MsgData_Options) GetUpdateConvMsg() bool {
	if x != nil {
		return x.UpdateConvMsg
	}
	return false
}

func (x *MsgData_Options) GetUpdateUnreadCount() bool {
	if x != nil {
		return x.UpdateUnreadCount
	}
	return false
}

type BatchGetMsgListByConvIdReq_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvId  string   `protobuf:"bytes,1,opt,name=convId,proto3" json:"convId"`
	SeqList []string `protobuf:"bytes,2,rep,name=seqList,proto3" json:"seqList"`
}

func (x *BatchGetMsgListByConvIdReq_Item) Reset() {
	*x = BatchGetMsgListByConvIdReq_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetMsgListByConvIdReq_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetMsgListByConvIdReq_Item) ProtoMessage() {}

func (x *BatchGetMsgListByConvIdReq_Item) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetMsgListByConvIdReq_Item.ProtoReflect.Descriptor instead.
func (*BatchGetMsgListByConvIdReq_Item) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{6, 0}
}

func (x *BatchGetMsgListByConvIdReq_Item) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *BatchGetMsgListByConvIdReq_Item) GetSeqList() []string {
	if x != nil {
		return x.SeqList
	}
	return nil
}

type BatchGetConvSeqResp_ConvSeq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvId     string `protobuf:"bytes,1,opt,name=convId,proto3" json:"convId"`
	MinSeq     string `protobuf:"bytes,2,opt,name=minSeq,proto3" json:"minSeq"`
	MaxSeq     string `protobuf:"bytes,3,opt,name=maxSeq,proto3" json:"maxSeq"`
	UpdateTime string `protobuf:"bytes,4,opt,name=updateTime,proto3" json:"updateTime"`
}

func (x *BatchGetConvSeqResp_ConvSeq) Reset() {
	*x = BatchGetConvSeqResp_ConvSeq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetConvSeqResp_ConvSeq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetConvSeqResp_ConvSeq) ProtoMessage() {}

func (x *BatchGetConvSeqResp_ConvSeq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetConvSeqResp_ConvSeq.ProtoReflect.Descriptor instead.
func (*BatchGetConvSeqResp_ConvSeq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{13, 0}
}

func (x *BatchGetConvSeqResp_ConvSeq) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *BatchGetConvSeqResp_ConvSeq) GetMinSeq() string {
	if x != nil {
		return x.MinSeq
	}
	return ""
}

func (x *BatchGetConvSeqResp_ConvSeq) GetMaxSeq() string {
	if x != nil {
		return x.MaxSeq
	}
	return ""
}

func (x *BatchGetConvSeqResp_ConvSeq) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

//红包领取者
type RedPacket_Receiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId"`
	Amount      int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount"`
	ReceiveTime int64  `protobuf:"varint,3,opt,name=receiveTime,proto3" json:"receiveTime"`
	Avatar      string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar"`
	NickName    string `protobuf:"bytes,5,opt,name=nickName,proto3" json:"nickName"`
}

func (x *RedPacket_Receiver) Reset() {
	*x = RedPacket_Receiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacket_Receiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacket_Receiver) ProtoMessage() {}

func (x *RedPacket_Receiver) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacket_Receiver.ProtoReflect.Descriptor instead.
func (*RedPacket_Receiver) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{29, 0}
}

func (x *RedPacket_Receiver) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RedPacket_Receiver) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RedPacket_Receiver) GetReceiveTime() int64 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

func (x *RedPacket_Receiver) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *RedPacket_Receiver) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

var File_msg_proto protoreflect.FileDescriptor

var file_msg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x68, 0x0a, 0x09, 0x4d, 0x73, 0x67,
	0x4d, 0x51, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x4d, 0x51,
	0x42, 0x6f, 0x64, 0x79, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1c, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x10, 0x00, 0x22, 0x9a, 0x06, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x71, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12,
	0x2d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39,
	0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x0b, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x57, 0x0a, 0x0b, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xf9, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e,
	0x65, 0x65, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x4d,
	0x73, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x3c, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa6,
	0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x2d, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3f, 0x0a, 0x0e, 0x50, 0x75,
	0x73, 0x68, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x0b,
	0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x1a,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x43, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x43, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x38, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x71, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x6f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2d, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0xbe, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x22, 0x67, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x90, 0x01, 0x0a, 0x11,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x52, 0x65,
	0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x71,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x22, 0x44,
	0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x71,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x61, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x71, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x76, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0xe1, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x71, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x47, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x71, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x71, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x53, 0x65, 0x71, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x76, 0x53, 0x65, 0x71, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x1a, 0x71, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x76,
	0x53, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x53, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x5e, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x76, 0x53, 0x65, 0x71, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x53, 0x65, 0x71, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x71,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9c, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5c, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x76, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x0b,
	0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x73,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x1a,
	0x3a, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x71,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x22, 0x3d, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xeb, 0x01, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x22, 0x3d, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x49, 0x0a, 0x1a, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x6f,
	0x72, 0x64, 0x54, 0x69, 0x72, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x4d, 0x0a, 0x1b, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x72,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xd0, 0x04, 0x0a, 0x09, 0x52, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0f, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x90, 0x01, 0x0a, 0x08, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x10,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a,
	0x09, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x09, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x70, 0x0a, 0x11, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2b, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x09, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x9e, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x73, 0x0a,
	0x14, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x22, 0x7e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x09,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x10, 0x01, 0x2a, 0x55, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x5f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x41, 0x6c, 0x6c, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x32, 0x9e, 0x0b,
	0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x11,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x76,
	0x49, 0x64, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x65,
	0x71, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x53, 0x65, 0x71, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x53, 0x65, 0x71, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x71, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x53,
	0x65, 0x71, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0c, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a,
	0x0f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x15, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x11, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x76,
	0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d,
	0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x07,
	0x52, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x07, 0x45, 0x64,
	0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x17, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x72, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x72, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x72, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x06,
	0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msg_proto_rawDescOnce sync.Once
	file_msg_proto_rawDescData = file_msg_proto_rawDesc
)

func file_msg_proto_rawDescGZIP() []byte {
	file_msg_proto_rawDescOnce.Do(func() {
		file_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_proto_rawDescData)
	})
	return file_msg_proto_rawDescData
}

var file_msg_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_msg_proto_goTypes = []interface{}{
	(RedPacketType)(0),                      // 0: pb.RedPacketType
	(RedPacketStatus)(0),                    // 1: pb.RedPacketStatus
	(MsgMQBody_Event)(0),                    // 2: pb.MsgMQBody.Event
	(*MsgMQBody)(nil),                       // 3: pb.MsgMQBody
	(*MsgData)(nil),                         // 4: pb.MsgData
	(*MsgDataList)(nil),                     // 5: pb.MsgDataList
	(*SendMsgListReq)(nil),                  // 6: pb.SendMsgListReq
	(*SendMsgListResp)(nil),                 // 7: pb.SendMsgListResp
	(*PushMsgListReq)(nil),                  // 8: pb.PushMsgListReq
	(*BatchGetMsgListByConvIdReq)(nil),      // 9: pb.BatchGetMsgListByConvIdReq
	(*GetMsgListResp)(nil),                  // 10: pb.GetMsgListResp
	(*GetMsgByIdReq)(nil),                   // 11: pb.GetMsgByIdReq
	(*GetMsgByIdResp)(nil),                  // 12: pb.GetMsgByIdResp
	(*BatchSetMinSeqReq)(nil),               // 13: pb.BatchSetMinSeqReq
	(*BatchSetMinSeqResp)(nil),              // 14: pb.BatchSetMinSeqResp
	(*BatchGetConvSeqReq)(nil),              // 15: pb.BatchGetConvSeqReq
	(*BatchGetConvSeqResp)(nil),             // 16: pb.BatchGetConvSeqResp
	(*GetConvSubscribersReq)(nil),           // 17: pb.GetConvSubscribersReq
	(*GetConvSubscribersResp)(nil),          // 18: pb.GetConvSubscribersResp
	(*OfflinePushMsgReq)(nil),               // 19: pb.OfflinePushMsgReq
	(*OfflinePushMsgResp)(nil),              // 20: pb.OfflinePushMsgResp
	(*GetConvOnlineCountReq)(nil),           // 21: pb.GetConvOnlineCountReq
	(*GetConvOnlineCountResp)(nil),          // 22: pb.GetConvOnlineCountResp
	(*FlushUsersSubConvReq)(nil),            // 23: pb.FlushUsersSubConvReq
	(*GetAllMsgListReq)(nil),                // 24: pb.GetAllMsgListReq
	(*GetAllMsgListResp)(nil),               // 25: pb.GetAllMsgListResp
	(*ReadMsgReq)(nil),                      // 26: pb.ReadMsgReq
	(*ReadMsgResp)(nil),                     // 27: pb.ReadMsgResp
	(*EditMsgReq)(nil),                      // 28: pb.EditMsgReq
	(*EditMsgResp)(nil),                     // 29: pb.EditMsgResp
	(*FlushShieldWordTireTreeReq)(nil),      // 30: pb.FlushShieldWordTireTreeReq
	(*FlushShieldWordTireTreeResp)(nil),     // 31: pb.FlushShieldWordTireTreeResp
	(*RedPacket)(nil),                       // 32: pb.RedPacket
	(*SendRedPacketReq)(nil),                // 33: pb.SendRedPacketReq
	(*SendRedPacketResp)(nil),               // 34: pb.SendRedPacketResp
	(*ReceiveRedPacketReq)(nil),             // 35: pb.ReceiveRedPacketReq
	(*ReceiveRedPacketResp)(nil),            // 36: pb.ReceiveRedPacketResp
	(*GetRedPacketDetailReq)(nil),           // 37: pb.GetRedPacketDetailReq
	(*GetRedPacketDetailResp)(nil),          // 38: pb.GetRedPacketDetailResp
	(*MsgData_OfflinePush)(nil),             // 39: pb.MsgData.OfflinePush
	(*MsgData_Options)(nil),                 // 40: pb.MsgData.Options
	(*BatchGetMsgListByConvIdReq_Item)(nil), // 41: pb.BatchGetMsgListByConvIdReq.Item
	(*BatchGetConvSeqResp_ConvSeq)(nil),     // 42: pb.BatchGetConvSeqResp.ConvSeq
	nil,                                     // 43: pb.BatchGetConvSeqResp.ConvSeqMapEntry
	nil,                                     // 44: pb.GetAllMsgListReq.FilterEntry
	nil,                                     // 45: pb.GetAllMsgListResp.UserMapEntry
	(*RedPacket_Receiver)(nil),              // 46: pb.RedPacket.Receiver
	(*CommonReq)(nil),                       // 47: pb.CommonReq
	(*CommonResp)(nil),                      // 48: pb.CommonResp
	(*Page)(nil),                            // 49: pb.Page
	(*AfterConnectReq)(nil),                 // 50: pb.AfterConnectReq
	(*AfterDisconnectReq)(nil),              // 51: pb.AfterDisconnectReq
	(*KeepAliveReq)(nil),                    // 52: pb.KeepAliveReq
	(*KeepAliveResp)(nil),                   // 53: pb.KeepAliveResp
}
var file_msg_proto_depIdxs = []int32{
	2,  // 0: pb.MsgMQBody.event:type_name -> pb.MsgMQBody.Event
	40, // 1: pb.MsgData.options:type_name -> pb.MsgData.Options
	39, // 2: pb.MsgData.offlinePush:type_name -> pb.MsgData.OfflinePush
	4,  // 3: pb.MsgDataList.msgDataList:type_name -> pb.MsgData
	4,  // 4: pb.SendMsgListReq.msgDataList:type_name -> pb.MsgData
	47, // 5: pb.SendMsgListReq.commonReq:type_name -> pb.CommonReq
	48, // 6: pb.SendMsgListResp.commonResp:type_name -> pb.CommonResp
	4,  // 7: pb.PushMsgListReq.msgDataList:type_name -> pb.MsgData
	41, // 8: pb.BatchGetMsgListByConvIdReq.items:type_name -> pb.BatchGetMsgListByConvIdReq.Item
	47, // 9: pb.BatchGetMsgListByConvIdReq.commonReq:type_name -> pb.CommonReq
	4,  // 10: pb.GetMsgListResp.msgDataList:type_name -> pb.MsgData
	48, // 11: pb.GetMsgListResp.commonResp:type_name -> pb.CommonResp
	47, // 12: pb.GetMsgByIdReq.commonReq:type_name -> pb.CommonReq
	4,  // 13: pb.GetMsgByIdResp.msgData:type_name -> pb.MsgData
	48, // 14: pb.GetMsgByIdResp.commonResp:type_name -> pb.CommonResp
	47, // 15: pb.BatchSetMinSeqReq.commonReq:type_name -> pb.CommonReq
	48, // 16: pb.BatchSetMinSeqResp.commonResp:type_name -> pb.CommonResp
	47, // 17: pb.BatchGetConvSeqReq.commonReq:type_name -> pb.CommonReq
	43, // 18: pb.BatchGetConvSeqResp.convSeqMap:type_name -> pb.BatchGetConvSeqResp.ConvSeqMapEntry
	48, // 19: pb.BatchGetConvSeqResp.commonResp:type_name -> pb.CommonResp
	47, // 20: pb.GetConvSubscribersReq.commonReq:type_name -> pb.CommonReq
	48, // 21: pb.GetConvSubscribersResp.commonResp:type_name -> pb.CommonResp
	47, // 22: pb.OfflinePushMsgReq.commonReq:type_name -> pb.CommonReq
	48, // 23: pb.OfflinePushMsgResp.commonResp:type_name -> pb.CommonResp
	47, // 24: pb.GetConvOnlineCountReq.commonReq:type_name -> pb.CommonReq
	48, // 25: pb.GetConvOnlineCountResp.commonResp:type_name -> pb.CommonResp
	47, // 26: pb.FlushUsersSubConvReq.commonReq:type_name -> pb.CommonReq
	47, // 27: pb.GetAllMsgListReq.commonReq:type_name -> pb.CommonReq
	49, // 28: pb.GetAllMsgListReq.page:type_name -> pb.Page
	44, // 29: pb.GetAllMsgListReq.filter:type_name -> pb.GetAllMsgListReq.FilterEntry
	48, // 30: pb.GetAllMsgListResp.commonResp:type_name -> pb.CommonResp
	4,  // 31: pb.GetAllMsgListResp.msgDataList:type_name -> pb.MsgData
	45, // 32: pb.GetAllMsgListResp.userMap:type_name -> pb.GetAllMsgListResp.UserMapEntry
	47, // 33: pb.ReadMsgReq.commonReq:type_name -> pb.CommonReq
	48, // 34: pb.ReadMsgResp.commonResp:type_name -> pb.CommonResp
	47, // 35: pb.EditMsgReq.commonReq:type_name -> pb.CommonReq
	48, // 36: pb.EditMsgResp.commonResp:type_name -> pb.CommonResp
	47, // 37: pb.FlushShieldWordTireTreeReq.commonReq:type_name -> pb.CommonReq
	48, // 38: pb.FlushShieldWordTireTreeResp.commonResp:type_name -> pb.CommonResp
	0,  // 39: pb.RedPacket.redPacketType:type_name -> pb.RedPacketType
	1,  // 40: pb.RedPacket.redPacketStatus:type_name -> pb.RedPacketStatus
	46, // 41: pb.RedPacket.receiverList:type_name -> pb.RedPacket.Receiver
	47, // 42: pb.SendRedPacketReq.commonReq:type_name -> pb.CommonReq
	32, // 43: pb.SendRedPacketReq.redPacket:type_name -> pb.RedPacket
	48, // 44: pb.SendRedPacketResp.commonResp:type_name -> pb.CommonResp
	32, // 45: pb.SendRedPacketResp.redPacket:type_name -> pb.RedPacket
	47, // 46: pb.ReceiveRedPacketReq.commonReq:type_name -> pb.CommonReq
	48, // 47: pb.ReceiveRedPacketResp.commonResp:type_name -> pb.CommonResp
	32, // 48: pb.ReceiveRedPacketResp.redPacket:type_name -> pb.RedPacket
	47, // 49: pb.GetRedPacketDetailReq.commonReq:type_name -> pb.CommonReq
	48, // 50: pb.GetRedPacketDetailResp.commonResp:type_name -> pb.CommonResp
	32, // 51: pb.GetRedPacketDetailResp.redPacket:type_name -> pb.RedPacket
	42, // 52: pb.BatchGetConvSeqResp.ConvSeqMapEntry.value:type_name -> pb.BatchGetConvSeqResp.ConvSeq
	5,  // 53: pb.msgService.InsertMsgDataList:input_type -> pb.MsgDataList
	6,  // 54: pb.msgService.SendMsgListSync:input_type -> pb.SendMsgListReq
	6,  // 55: pb.msgService.SendMsgListAsync:input_type -> pb.SendMsgListReq
	8,  // 56: pb.msgService.PushMsgList:input_type -> pb.PushMsgListReq
	9,  // 57: pb.msgService.BatchGetMsgListByConvId:input_type -> pb.BatchGetMsgListByConvIdReq
	11, // 58: pb.msgService.GetMsgById:input_type -> pb.GetMsgByIdReq
	13, // 59: pb.msgService.BatchSetMinSeq:input_type -> pb.BatchSetMinSeqReq
	15, // 60: pb.msgService.BatchGetConvSeq:input_type -> pb.BatchGetConvSeqReq
	50, // 61: pb.msgService.AfterConnect:input_type -> pb.AfterConnectReq
	51, // 62: pb.msgService.AfterDisconnect:input_type -> pb.AfterDisconnectReq
	52, // 63: pb.msgService.KeepAlive:input_type -> pb.KeepAliveReq
	17, // 64: pb.msgService.GetConvSubscribers:input_type -> pb.GetConvSubscribersReq
	19, // 65: pb.msgService.OfflinePushMsg:input_type -> pb.OfflinePushMsgReq
	21, // 66: pb.msgService.GetConvOnlineCount:input_type -> pb.GetConvOnlineCountReq
	23, // 67: pb.msgService.FlushUsersSubConv:input_type -> pb.FlushUsersSubConvReq
	24, // 68: pb.msgService.GetAllMsgList:input_type -> pb.GetAllMsgListReq
	26, // 69: pb.msgService.ReadMsg:input_type -> pb.ReadMsgReq
	28, // 70: pb.msgService.EditMsg:input_type -> pb.EditMsgReq
	30, // 71: pb.msgService.FlushShieldWordTireTree:input_type -> pb.FlushShieldWordTireTreeReq
	33, // 72: pb.msgService.SendRedPacket:input_type -> pb.SendRedPacketReq
	35, // 73: pb.msgService.ReceiveRedPacket:input_type -> pb.ReceiveRedPacketReq
	37, // 74: pb.msgService.GetRedPacketDetail:input_type -> pb.GetRedPacketDetailReq
	5,  // 75: pb.msgService.InsertMsgDataList:output_type -> pb.MsgDataList
	7,  // 76: pb.msgService.SendMsgListSync:output_type -> pb.SendMsgListResp
	7,  // 77: pb.msgService.SendMsgListAsync:output_type -> pb.SendMsgListResp
	48, // 78: pb.msgService.PushMsgList:output_type -> pb.CommonResp
	10, // 79: pb.msgService.BatchGetMsgListByConvId:output_type -> pb.GetMsgListResp
	12, // 80: pb.msgService.GetMsgById:output_type -> pb.GetMsgByIdResp
	14, // 81: pb.msgService.BatchSetMinSeq:output_type -> pb.BatchSetMinSeqResp
	16, // 82: pb.msgService.BatchGetConvSeq:output_type -> pb.BatchGetConvSeqResp
	48, // 83: pb.msgService.AfterConnect:output_type -> pb.CommonResp
	48, // 84: pb.msgService.AfterDisconnect:output_type -> pb.CommonResp
	53, // 85: pb.msgService.KeepAlive:output_type -> pb.KeepAliveResp
	18, // 86: pb.msgService.GetConvSubscribers:output_type -> pb.GetConvSubscribersResp
	20, // 87: pb.msgService.OfflinePushMsg:output_type -> pb.OfflinePushMsgResp
	22, // 88: pb.msgService.GetConvOnlineCount:output_type -> pb.GetConvOnlineCountResp
	48, // 89: pb.msgService.FlushUsersSubConv:output_type -> pb.CommonResp
	25, // 90: pb.msgService.GetAllMsgList:output_type -> pb.GetAllMsgListResp
	27, // 91: pb.msgService.ReadMsg:output_type -> pb.ReadMsgResp
	29, // 92: pb.msgService.EditMsg:output_type -> pb.EditMsgResp
	31, // 93: pb.msgService.FlushShieldWordTireTree:output_type -> pb.FlushShieldWordTireTreeResp
	34, // 94: pb.msgService.SendRedPacket:output_type -> pb.SendRedPacketResp
	36, // 95: pb.msgService.ReceiveRedPacket:output_type -> pb.ReceiveRedPacketResp
	38, // 96: pb.msgService.GetRedPacketDetail:output_type -> pb.GetRedPacketDetailResp
	75, // [75:97] is the sub-list for method output_type
	53, // [53:75] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_msg_proto_init() }
func file_msg_proto_init() {
	if File_msg_proto != nil {
		return
	}
	file_conn_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgMQBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMsgListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMsgListByConvIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMsgListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMsgByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMsgByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetMinSeqReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetMinSeqResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetConvSeqReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetConvSeqResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConvSubscribersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConvSubscribersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflinePushMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflinePushMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConvOnlineCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConvOnlineCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushUsersSubConvReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllMsgListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllMsgListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushShieldWordTireTreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushShieldWordTireTreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRedPacketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRedPacketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveRedPacketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveRedPacketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRedPacketDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRedPacketDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgData_OfflinePush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgData_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetMsgListByConvIdReq_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetConvSeqResp_ConvSeq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacket_Receiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_msg_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_msg_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_msg_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msg_proto_goTypes,
		DependencyIndexes: file_msg_proto_depIdxs,
		EnumInfos:         file_msg_proto_enumTypes,
		MessageInfos:      file_msg_proto_msgTypes,
	}.Build()
	File_msg_proto = out.File
	file_msg_proto_rawDesc = nil
	file_msg_proto_goTypes = nil
	file_msg_proto_depIdxs = nil
}
