// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notice.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NoticeData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NoticeData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NoticeDataMultiError, or
// nil if none found.
func (m *NoticeData) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConvId

	// no validation rules for UnreadCount

	// no validation rules for UnreadAbsolute

	// no validation rules for NoticeId

	// no validation rules for CreateTime

	// no validation rules for Title

	// no validation rules for ContentType

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NoticeDataValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NoticeDataValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoticeDataValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Ext

	if len(errors) > 0 {
		return NoticeDataMultiError(errors)
	}

	return nil
}

// NoticeDataMultiError is an error wrapping multiple validation errors
// returned by NoticeData.ValidateAll() if the designated constraints aren't met.
type NoticeDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeDataMultiError) AllErrors() []error { return m }

// NoticeDataValidationError is the validation error returned by
// NoticeData.Validate if the designated constraints aren't met.
type NoticeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeDataValidationError) ErrorName() string { return "NoticeDataValidationError" }

// Error satisfies the builtin error interface
func (e NoticeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeDataValidationError{}

// Validate checks the field values on NoticeDataList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NoticeDataList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeDataList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NoticeDataListMultiError,
// or nil if none found.
func (m *NoticeDataList) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeDataList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNoticeDataList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NoticeDataListValidationError{
						field:  fmt.Sprintf("NoticeDataList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NoticeDataListValidationError{
						field:  fmt.Sprintf("NoticeDataList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NoticeDataListValidationError{
					field:  fmt.Sprintf("NoticeDataList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NoticeDataListMultiError(errors)
	}

	return nil
}

// NoticeDataListMultiError is an error wrapping multiple validation errors
// returned by NoticeDataList.ValidateAll() if the designated constraints
// aren't met.
type NoticeDataListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeDataListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeDataListMultiError) AllErrors() []error { return m }

// NoticeDataListValidationError is the validation error returned by
// NoticeDataList.Validate if the designated constraints aren't met.
type NoticeDataListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeDataListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeDataListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeDataListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeDataListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeDataListValidationError) ErrorName() string { return "NoticeDataListValidationError" }

// Error satisfies the builtin error interface
func (e NoticeDataListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeDataList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeDataListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeDataListValidationError{}

// Validate checks the field values on SendNoticeDataReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendNoticeDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNoticeDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNoticeDataReqMultiError, or nil if none found.
func (m *SendNoticeDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNoticeDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNoticeDataReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNoticeData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNoticeDataReqValidationError{
					field:  "NoticeData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNoticeDataReqValidationError{
					field:  "NoticeData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNoticeData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNoticeDataReqValidationError{
				field:  "NoticeData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.IsBroadcast != nil {
		// no validation rules for IsBroadcast
	}

	if m.Inserted != nil {
		// no validation rules for Inserted
	}

	if len(errors) > 0 {
		return SendNoticeDataReqMultiError(errors)
	}

	return nil
}

// SendNoticeDataReqMultiError is an error wrapping multiple validation errors
// returned by SendNoticeDataReq.ValidateAll() if the designated constraints
// aren't met.
type SendNoticeDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNoticeDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNoticeDataReqMultiError) AllErrors() []error { return m }

// SendNoticeDataReqValidationError is the validation error returned by
// SendNoticeDataReq.Validate if the designated constraints aren't met.
type SendNoticeDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNoticeDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNoticeDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNoticeDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNoticeDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNoticeDataReqValidationError) ErrorName() string {
	return "SendNoticeDataReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendNoticeDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNoticeDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNoticeDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNoticeDataReqValidationError{}

// Validate checks the field values on SendNoticeDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNoticeDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNoticeDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNoticeDataRespMultiError, or nil if none found.
func (m *SendNoticeDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNoticeDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNoticeDataRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendNoticeDataRespMultiError(errors)
	}

	return nil
}

// SendNoticeDataRespMultiError is an error wrapping multiple validation errors
// returned by SendNoticeDataResp.ValidateAll() if the designated constraints
// aren't met.
type SendNoticeDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNoticeDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNoticeDataRespMultiError) AllErrors() []error { return m }

// SendNoticeDataRespValidationError is the validation error returned by
// SendNoticeDataResp.Validate if the designated constraints aren't met.
type SendNoticeDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNoticeDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNoticeDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNoticeDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNoticeDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNoticeDataRespValidationError) ErrorName() string {
	return "SendNoticeDataRespValidationError"
}

// Error satisfies the builtin error interface
func (e SendNoticeDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNoticeDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNoticeDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNoticeDataRespValidationError{}

// Validate checks the field values on PushNoticeDataReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PushNoticeDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushNoticeDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushNoticeDataReqMultiError, or nil if none found.
func (m *PushNoticeDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PushNoticeDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushNoticeDataReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NoticeId

	if len(errors) > 0 {
		return PushNoticeDataReqMultiError(errors)
	}

	return nil
}

// PushNoticeDataReqMultiError is an error wrapping multiple validation errors
// returned by PushNoticeDataReq.ValidateAll() if the designated constraints
// aren't met.
type PushNoticeDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushNoticeDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushNoticeDataReqMultiError) AllErrors() []error { return m }

// PushNoticeDataReqValidationError is the validation error returned by
// PushNoticeDataReq.Validate if the designated constraints aren't met.
type PushNoticeDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushNoticeDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushNoticeDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushNoticeDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushNoticeDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushNoticeDataReqValidationError) ErrorName() string {
	return "PushNoticeDataReqValidationError"
}

// Error satisfies the builtin error interface
func (e PushNoticeDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushNoticeDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushNoticeDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushNoticeDataReqValidationError{}

// Validate checks the field values on PushNoticeDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushNoticeDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushNoticeDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushNoticeDataRespMultiError, or nil if none found.
func (m *PushNoticeDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PushNoticeDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushNoticeDataRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushNoticeDataRespMultiError(errors)
	}

	return nil
}

// PushNoticeDataRespMultiError is an error wrapping multiple validation errors
// returned by PushNoticeDataResp.ValidateAll() if the designated constraints
// aren't met.
type PushNoticeDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushNoticeDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushNoticeDataRespMultiError) AllErrors() []error { return m }

// PushNoticeDataRespValidationError is the validation error returned by
// PushNoticeDataResp.Validate if the designated constraints aren't met.
type PushNoticeDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushNoticeDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushNoticeDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushNoticeDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushNoticeDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushNoticeDataRespValidationError) ErrorName() string {
	return "PushNoticeDataRespValidationError"
}

// Error satisfies the builtin error interface
func (e PushNoticeDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushNoticeDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushNoticeDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushNoticeDataRespValidationError{}

// Validate checks the field values on GetUserNoticeDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserNoticeDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserNoticeDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserNoticeDataReqMultiError, or nil if none found.
func (m *GetUserNoticeDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNoticeDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserNoticeDataReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserNoticeDataReqMultiError(errors)
	}

	return nil
}

// GetUserNoticeDataReqMultiError is an error wrapping multiple validation
// errors returned by GetUserNoticeDataReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserNoticeDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNoticeDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNoticeDataReqMultiError) AllErrors() []error { return m }

// GetUserNoticeDataReqValidationError is the validation error returned by
// GetUserNoticeDataReq.Validate if the designated constraints aren't met.
type GetUserNoticeDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNoticeDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNoticeDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNoticeDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNoticeDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNoticeDataReqValidationError) ErrorName() string {
	return "GetUserNoticeDataReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNoticeDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNoticeDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNoticeDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNoticeDataReqValidationError{}

// Validate checks the field values on GetUserNoticeDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserNoticeDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserNoticeDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserNoticeDataRespMultiError, or nil if none found.
func (m *GetUserNoticeDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNoticeDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserNoticeDataRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNoticeData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserNoticeDataRespValidationError{
						field:  fmt.Sprintf("NoticeData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserNoticeDataRespValidationError{
						field:  fmt.Sprintf("NoticeData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserNoticeDataRespValidationError{
					field:  fmt.Sprintf("NoticeData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Push

	if len(errors) > 0 {
		return GetUserNoticeDataRespMultiError(errors)
	}

	return nil
}

// GetUserNoticeDataRespMultiError is an error wrapping multiple validation
// errors returned by GetUserNoticeDataResp.ValidateAll() if the designated
// constraints aren't met.
type GetUserNoticeDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNoticeDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNoticeDataRespMultiError) AllErrors() []error { return m }

// GetUserNoticeDataRespValidationError is the validation error returned by
// GetUserNoticeDataResp.Validate if the designated constraints aren't met.
type GetUserNoticeDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNoticeDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNoticeDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNoticeDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNoticeDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNoticeDataRespValidationError) ErrorName() string {
	return "GetUserNoticeDataRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNoticeDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNoticeDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNoticeDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNoticeDataRespValidationError{}

// Validate checks the field values on AckNoticeDataReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AckNoticeDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AckNoticeDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AckNoticeDataReqMultiError, or nil if none found.
func (m *AckNoticeDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AckNoticeDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AckNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AckNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AckNoticeDataReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AckNoticeDataReqMultiError(errors)
	}

	return nil
}

// AckNoticeDataReqMultiError is an error wrapping multiple validation errors
// returned by AckNoticeDataReq.ValidateAll() if the designated constraints
// aren't met.
type AckNoticeDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AckNoticeDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AckNoticeDataReqMultiError) AllErrors() []error { return m }

// AckNoticeDataReqValidationError is the validation error returned by
// AckNoticeDataReq.Validate if the designated constraints aren't met.
type AckNoticeDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AckNoticeDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AckNoticeDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AckNoticeDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AckNoticeDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AckNoticeDataReqValidationError) ErrorName() string { return "AckNoticeDataReqValidationError" }

// Error satisfies the builtin error interface
func (e AckNoticeDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAckNoticeDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AckNoticeDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AckNoticeDataReqValidationError{}

// Validate checks the field values on AckNoticeDataResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AckNoticeDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AckNoticeDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AckNoticeDataRespMultiError, or nil if none found.
func (m *AckNoticeDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AckNoticeDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AckNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AckNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AckNoticeDataRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AckNoticeDataRespMultiError(errors)
	}

	return nil
}

// AckNoticeDataRespMultiError is an error wrapping multiple validation errors
// returned by AckNoticeDataResp.ValidateAll() if the designated constraints
// aren't met.
type AckNoticeDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AckNoticeDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AckNoticeDataRespMultiError) AllErrors() []error { return m }

// AckNoticeDataRespValidationError is the validation error returned by
// AckNoticeDataResp.Validate if the designated constraints aren't met.
type AckNoticeDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AckNoticeDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AckNoticeDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AckNoticeDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AckNoticeDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AckNoticeDataRespValidationError) ErrorName() string {
	return "AckNoticeDataRespValidationError"
}

// Error satisfies the builtin error interface
func (e AckNoticeDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAckNoticeDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AckNoticeDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AckNoticeDataRespValidationError{}

// Validate checks the field values on GetUserNoticeConvIdsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserNoticeConvIdsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserNoticeConvIdsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserNoticeConvIdsReqMultiError, or nil if none found.
func (m *GetUserNoticeConvIdsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNoticeConvIdsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserNoticeConvIdsReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserNoticeConvIdsReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserNoticeConvIdsReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserNoticeConvIdsReqMultiError(errors)
	}

	return nil
}

// GetUserNoticeConvIdsReqMultiError is an error wrapping multiple validation
// errors returned by GetUserNoticeConvIdsReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserNoticeConvIdsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNoticeConvIdsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNoticeConvIdsReqMultiError) AllErrors() []error { return m }

// GetUserNoticeConvIdsReqValidationError is the validation error returned by
// GetUserNoticeConvIdsReq.Validate if the designated constraints aren't met.
type GetUserNoticeConvIdsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNoticeConvIdsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNoticeConvIdsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNoticeConvIdsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNoticeConvIdsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNoticeConvIdsReqValidationError) ErrorName() string {
	return "GetUserNoticeConvIdsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNoticeConvIdsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNoticeConvIdsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNoticeConvIdsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNoticeConvIdsReqValidationError{}

// Validate checks the field values on GetUserNoticeConvIdsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserNoticeConvIdsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserNoticeConvIdsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserNoticeConvIdsRespMultiError, or nil if none found.
func (m *GetUserNoticeConvIdsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNoticeConvIdsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserNoticeConvIdsRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserNoticeConvIdsRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserNoticeConvIdsRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserNoticeConvIdsRespMultiError(errors)
	}

	return nil
}

// GetUserNoticeConvIdsRespMultiError is an error wrapping multiple validation
// errors returned by GetUserNoticeConvIdsResp.ValidateAll() if the designated
// constraints aren't met.
type GetUserNoticeConvIdsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNoticeConvIdsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNoticeConvIdsRespMultiError) AllErrors() []error { return m }

// GetUserNoticeConvIdsRespValidationError is the validation error returned by
// GetUserNoticeConvIdsResp.Validate if the designated constraints aren't met.
type GetUserNoticeConvIdsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNoticeConvIdsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNoticeConvIdsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNoticeConvIdsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNoticeConvIdsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNoticeConvIdsRespValidationError) ErrorName() string {
	return "GetUserNoticeConvIdsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNoticeConvIdsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNoticeConvIdsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNoticeConvIdsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNoticeConvIdsRespValidationError{}

// Validate checks the field values on GetNoticeConvAllSubscribersReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNoticeConvAllSubscribersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoticeConvAllSubscribersReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNoticeConvAllSubscribersReqMultiError, or nil if none found.
func (m *GetNoticeConvAllSubscribersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoticeConvAllSubscribersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNoticeConvAllSubscribersReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNoticeConvAllSubscribersReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNoticeConvAllSubscribersReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConvId

	if len(errors) > 0 {
		return GetNoticeConvAllSubscribersReqMultiError(errors)
	}

	return nil
}

// GetNoticeConvAllSubscribersReqMultiError is an error wrapping multiple
// validation errors returned by GetNoticeConvAllSubscribersReq.ValidateAll()
// if the designated constraints aren't met.
type GetNoticeConvAllSubscribersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoticeConvAllSubscribersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoticeConvAllSubscribersReqMultiError) AllErrors() []error { return m }

// GetNoticeConvAllSubscribersReqValidationError is the validation error
// returned by GetNoticeConvAllSubscribersReq.Validate if the designated
// constraints aren't met.
type GetNoticeConvAllSubscribersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoticeConvAllSubscribersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoticeConvAllSubscribersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoticeConvAllSubscribersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoticeConvAllSubscribersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoticeConvAllSubscribersReqValidationError) ErrorName() string {
	return "GetNoticeConvAllSubscribersReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetNoticeConvAllSubscribersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoticeConvAllSubscribersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoticeConvAllSubscribersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoticeConvAllSubscribersReqValidationError{}

// Validate checks the field values on GetNoticeConvAllSubscribersResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNoticeConvAllSubscribersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoticeConvAllSubscribersResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNoticeConvAllSubscribersRespMultiError, or nil if none found.
func (m *GetNoticeConvAllSubscribersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoticeConvAllSubscribersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNoticeConvAllSubscribersRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNoticeConvAllSubscribersRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNoticeConvAllSubscribersRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNoticeConvAllSubscribersRespMultiError(errors)
	}

	return nil
}

// GetNoticeConvAllSubscribersRespMultiError is an error wrapping multiple
// validation errors returned by GetNoticeConvAllSubscribersResp.ValidateAll()
// if the designated constraints aren't met.
type GetNoticeConvAllSubscribersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoticeConvAllSubscribersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoticeConvAllSubscribersRespMultiError) AllErrors() []error { return m }

// GetNoticeConvAllSubscribersRespValidationError is the validation error
// returned by GetNoticeConvAllSubscribersResp.Validate if the designated
// constraints aren't met.
type GetNoticeConvAllSubscribersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoticeConvAllSubscribersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoticeConvAllSubscribersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoticeConvAllSubscribersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoticeConvAllSubscribersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoticeConvAllSubscribersRespValidationError) ErrorName() string {
	return "GetNoticeConvAllSubscribersRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetNoticeConvAllSubscribersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoticeConvAllSubscribersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoticeConvAllSubscribersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoticeConvAllSubscribersRespValidationError{}

// Validate checks the field values on SetUserSubscriptionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserSubscriptionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserSubscriptionsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserSubscriptionsReqMultiError, or nil if none found.
func (m *SetUserSubscriptionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserSubscriptionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetUserSubscriptionsReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetUserSubscriptionsReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetUserSubscriptionsReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetUserSubscriptionsReqMultiError(errors)
	}

	return nil
}

// SetUserSubscriptionsReqMultiError is an error wrapping multiple validation
// errors returned by SetUserSubscriptionsReq.ValidateAll() if the designated
// constraints aren't met.
type SetUserSubscriptionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserSubscriptionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserSubscriptionsReqMultiError) AllErrors() []error { return m }

// SetUserSubscriptionsReqValidationError is the validation error returned by
// SetUserSubscriptionsReq.Validate if the designated constraints aren't met.
type SetUserSubscriptionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserSubscriptionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserSubscriptionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserSubscriptionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserSubscriptionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserSubscriptionsReqValidationError) ErrorName() string {
	return "SetUserSubscriptionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserSubscriptionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserSubscriptionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserSubscriptionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserSubscriptionsReqValidationError{}

// Validate checks the field values on NoticeData_Options with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NoticeData_Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeData_Options with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NoticeData_OptionsMultiError, or nil if none found.
func (m *NoticeData_Options) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeData_Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StorageForClient

	// no validation rules for UpdateConvMsg

	// no validation rules for OnlinePushOnce

	if len(errors) > 0 {
		return NoticeData_OptionsMultiError(errors)
	}

	return nil
}

// NoticeData_OptionsMultiError is an error wrapping multiple validation errors
// returned by NoticeData_Options.ValidateAll() if the designated constraints
// aren't met.
type NoticeData_OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeData_OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeData_OptionsMultiError) AllErrors() []error { return m }

// NoticeData_OptionsValidationError is the validation error returned by
// NoticeData_Options.Validate if the designated constraints aren't met.
type NoticeData_OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeData_OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeData_OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeData_OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeData_OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeData_OptionsValidationError) ErrorName() string {
	return "NoticeData_OptionsValidationError"
}

// Error satisfies the builtin error interface
func (e NoticeData_OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeData_Options.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeData_OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeData_OptionsValidationError{}
