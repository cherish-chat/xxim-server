// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notice.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NoticeData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NoticeData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NoticeDataMultiError, or
// nil if none found.
func (m *NoticeData) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConvId

	// no validation rules for NoticeId

	// no validation rules for CreateTime

	// no validation rules for Title

	// no validation rules for ContentType

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NoticeDataValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NoticeDataValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoticeDataValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Ext

	if len(errors) > 0 {
		return NoticeDataMultiError(errors)
	}

	return nil
}

// NoticeDataMultiError is an error wrapping multiple validation errors
// returned by NoticeData.ValidateAll() if the designated constraints aren't met.
type NoticeDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeDataMultiError) AllErrors() []error { return m }

// NoticeDataValidationError is the validation error returned by
// NoticeData.Validate if the designated constraints aren't met.
type NoticeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeDataValidationError) ErrorName() string { return "NoticeDataValidationError" }

// Error satisfies the builtin error interface
func (e NoticeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeDataValidationError{}

// Validate checks the field values on NoticeDataList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NoticeDataList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeDataList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NoticeDataListMultiError,
// or nil if none found.
func (m *NoticeDataList) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeDataList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNoticeDataList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NoticeDataListValidationError{
						field:  fmt.Sprintf("NoticeDataList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NoticeDataListValidationError{
						field:  fmt.Sprintf("NoticeDataList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NoticeDataListValidationError{
					field:  fmt.Sprintf("NoticeDataList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NoticeDataListMultiError(errors)
	}

	return nil
}

// NoticeDataListMultiError is an error wrapping multiple validation errors
// returned by NoticeDataList.ValidateAll() if the designated constraints
// aren't met.
type NoticeDataListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeDataListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeDataListMultiError) AllErrors() []error { return m }

// NoticeDataListValidationError is the validation error returned by
// NoticeDataList.Validate if the designated constraints aren't met.
type NoticeDataListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeDataListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeDataListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeDataListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeDataListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeDataListValidationError) ErrorName() string { return "NoticeDataListValidationError" }

// Error satisfies the builtin error interface
func (e NoticeDataListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeDataList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeDataListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeDataListValidationError{}

// Validate checks the field values on GetUserNoticeDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserNoticeDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserNoticeDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserNoticeDataReqMultiError, or nil if none found.
func (m *GetUserNoticeDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNoticeDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserNoticeDataReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for ConvId

	if m.DeviceId != nil {
		// no validation rules for DeviceId
	}

	if len(errors) > 0 {
		return GetUserNoticeDataReqMultiError(errors)
	}

	return nil
}

// GetUserNoticeDataReqMultiError is an error wrapping multiple validation
// errors returned by GetUserNoticeDataReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserNoticeDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNoticeDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNoticeDataReqMultiError) AllErrors() []error { return m }

// GetUserNoticeDataReqValidationError is the validation error returned by
// GetUserNoticeDataReq.Validate if the designated constraints aren't met.
type GetUserNoticeDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNoticeDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNoticeDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNoticeDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNoticeDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNoticeDataReqValidationError) ErrorName() string {
	return "GetUserNoticeDataReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNoticeDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNoticeDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNoticeDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNoticeDataReqValidationError{}

// Validate checks the field values on GetUserNoticeDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserNoticeDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserNoticeDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserNoticeDataRespMultiError, or nil if none found.
func (m *GetUserNoticeDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNoticeDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserNoticeDataRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNoticeData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserNoticeDataRespValidationError{
						field:  fmt.Sprintf("NoticeData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserNoticeDataRespValidationError{
						field:  fmt.Sprintf("NoticeData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserNoticeDataRespValidationError{
					field:  fmt.Sprintf("NoticeData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Push

	if len(errors) > 0 {
		return GetUserNoticeDataRespMultiError(errors)
	}

	return nil
}

// GetUserNoticeDataRespMultiError is an error wrapping multiple validation
// errors returned by GetUserNoticeDataResp.ValidateAll() if the designated
// constraints aren't met.
type GetUserNoticeDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNoticeDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNoticeDataRespMultiError) AllErrors() []error { return m }

// GetUserNoticeDataRespValidationError is the validation error returned by
// GetUserNoticeDataResp.Validate if the designated constraints aren't met.
type GetUserNoticeDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNoticeDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNoticeDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNoticeDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNoticeDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNoticeDataRespValidationError) ErrorName() string {
	return "GetUserNoticeDataRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNoticeDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNoticeDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNoticeDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNoticeDataRespValidationError{}

// Validate checks the field values on AckNoticeDataReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AckNoticeDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AckNoticeDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AckNoticeDataReqMultiError, or nil if none found.
func (m *AckNoticeDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AckNoticeDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConvId

	// no validation rules for NoticeId

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AckNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AckNoticeDataReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AckNoticeDataReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AckNoticeDataReqMultiError(errors)
	}

	return nil
}

// AckNoticeDataReqMultiError is an error wrapping multiple validation errors
// returned by AckNoticeDataReq.ValidateAll() if the designated constraints
// aren't met.
type AckNoticeDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AckNoticeDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AckNoticeDataReqMultiError) AllErrors() []error { return m }

// AckNoticeDataReqValidationError is the validation error returned by
// AckNoticeDataReq.Validate if the designated constraints aren't met.
type AckNoticeDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AckNoticeDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AckNoticeDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AckNoticeDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AckNoticeDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AckNoticeDataReqValidationError) ErrorName() string { return "AckNoticeDataReqValidationError" }

// Error satisfies the builtin error interface
func (e AckNoticeDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAckNoticeDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AckNoticeDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AckNoticeDataReqValidationError{}

// Validate checks the field values on AckNoticeDataResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AckNoticeDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AckNoticeDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AckNoticeDataRespMultiError, or nil if none found.
func (m *AckNoticeDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AckNoticeDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AckNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AckNoticeDataRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AckNoticeDataRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AckNoticeDataRespMultiError(errors)
	}

	return nil
}

// AckNoticeDataRespMultiError is an error wrapping multiple validation errors
// returned by AckNoticeDataResp.ValidateAll() if the designated constraints
// aren't met.
type AckNoticeDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AckNoticeDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AckNoticeDataRespMultiError) AllErrors() []error { return m }

// AckNoticeDataRespValidationError is the validation error returned by
// AckNoticeDataResp.Validate if the designated constraints aren't met.
type AckNoticeDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AckNoticeDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AckNoticeDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AckNoticeDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AckNoticeDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AckNoticeDataRespValidationError) ErrorName() string {
	return "AckNoticeDataRespValidationError"
}

// Error satisfies the builtin error interface
func (e AckNoticeDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAckNoticeDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AckNoticeDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AckNoticeDataRespValidationError{}

// Validate checks the field values on NoticeData_Options with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NoticeData_Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeData_Options with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NoticeData_OptionsMultiError, or nil if none found.
func (m *NoticeData_Options) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeData_Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StorageForClient

	// no validation rules for UpdateConvMsg

	if len(errors) > 0 {
		return NoticeData_OptionsMultiError(errors)
	}

	return nil
}

// NoticeData_OptionsMultiError is an error wrapping multiple validation errors
// returned by NoticeData_Options.ValidateAll() if the designated constraints
// aren't met.
type NoticeData_OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeData_OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeData_OptionsMultiError) AllErrors() []error { return m }

// NoticeData_OptionsValidationError is the validation error returned by
// NoticeData_Options.Validate if the designated constraints aren't met.
type NoticeData_OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeData_OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeData_OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeData_OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeData_OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeData_OptionsValidationError) ErrorName() string {
	return "NoticeData_OptionsValidationError"
}

// Error satisfies the builtin error interface
func (e NoticeData_OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeData_Options.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeData_OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeData_OptionsValidationError{}
