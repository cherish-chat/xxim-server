// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: conn.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnServiceClient is the client API for ConnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnServiceClient interface {
	KickUserConn(ctx context.Context, in *KickUserConnReq, opts ...grpc.CallOption) (*KickUserConnResp, error)
	GetUserConn(ctx context.Context, in *GetUserConnReq, opts ...grpc.CallOption) (*GetUserConnResp, error)
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
	KeepAlive(ctx context.Context, in *KeepAliveReq, opts ...grpc.CallOption) (*KeepAliveResp, error)
}

type connServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnServiceClient(cc grpc.ClientConnInterface) ConnServiceClient {
	return &connServiceClient{cc}
}

func (c *connServiceClient) KickUserConn(ctx context.Context, in *KickUserConnReq, opts ...grpc.CallOption) (*KickUserConnResp, error) {
	out := new(KickUserConnResp)
	err := c.cc.Invoke(ctx, "/pb.connService/KickUserConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) GetUserConn(ctx context.Context, in *GetUserConnReq, opts ...grpc.CallOption) (*GetUserConnResp, error) {
	out := new(GetUserConnResp)
	err := c.cc.Invoke(ctx, "/pb.connService/GetUserConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	out := new(SendMsgResp)
	err := c.cc.Invoke(ctx, "/pb.connService/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) KeepAlive(ctx context.Context, in *KeepAliveReq, opts ...grpc.CallOption) (*KeepAliveResp, error) {
	out := new(KeepAliveResp)
	err := c.cc.Invoke(ctx, "/pb.connService/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnServiceServer is the server API for ConnService service.
// All implementations must embed UnimplementedConnServiceServer
// for forward compatibility
type ConnServiceServer interface {
	KickUserConn(context.Context, *KickUserConnReq) (*KickUserConnResp, error)
	GetUserConn(context.Context, *GetUserConnReq) (*GetUserConnResp, error)
	SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error)
	KeepAlive(context.Context, *KeepAliveReq) (*KeepAliveResp, error)
	mustEmbedUnimplementedConnServiceServer()
}

// UnimplementedConnServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnServiceServer struct {
}

func (UnimplementedConnServiceServer) KickUserConn(context.Context, *KickUserConnReq) (*KickUserConnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUserConn not implemented")
}
func (UnimplementedConnServiceServer) GetUserConn(context.Context, *GetUserConnReq) (*GetUserConnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConn not implemented")
}
func (UnimplementedConnServiceServer) SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedConnServiceServer) KeepAlive(context.Context, *KeepAliveReq) (*KeepAliveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedConnServiceServer) mustEmbedUnimplementedConnServiceServer() {}

// UnsafeConnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnServiceServer will
// result in compilation errors.
type UnsafeConnServiceServer interface {
	mustEmbedUnimplementedConnServiceServer()
}

func RegisterConnServiceServer(s grpc.ServiceRegistrar, srv ConnServiceServer) {
	s.RegisterService(&ConnService_ServiceDesc, srv)
}

func _ConnService_KickUserConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickUserConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).KickUserConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.connService/KickUserConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).KickUserConn(ctx, req.(*KickUserConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_GetUserConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).GetUserConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.connService/GetUserConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).GetUserConn(ctx, req.(*GetUserConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.connService/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.connService/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).KeepAlive(ctx, req.(*KeepAliveReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnService_ServiceDesc is the grpc.ServiceDesc for ConnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.connService",
	HandlerType: (*ConnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KickUserConn",
			Handler:    _ConnService_KickUserConn_Handler,
		},
		{
			MethodName: "GetUserConn",
			Handler:    _ConnService_GetUserConn_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _ConnService_SendMsg_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _ConnService_KeepAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conn.proto",
}
