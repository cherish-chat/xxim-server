syntax = "proto3";
package pb;
option go_package = "./pb";
import "conn.proto";
import "common.proto";

// 服务器通过websocket发送给客户端的消息体
message MsgMQBody {
  // 推送事件
  enum Event {
    // 插入消息并推送消息
    SendMsgListSync = 0;
  }
  Event event = 1;
  bytes data = 2;
}

message MsgData {
  message OfflinePush {
    string title = 1;
    string content = 2;
    string payload = 3;
  }
  message Options {
    // 服务端是否需要保存消息
    bool storageForServer = 1;
    // 客户端是否需要保存消息
    bool storageForClient = 2;
    // 是否需要解密 （端对端加密技术，服务端无法解密）
    bool needDecrypt = 3;
    // 是否需要离线推送
    bool offlinePush = 4;
    // 是否需要重新渲染会话
    bool updateConvMsg = 5;
    // 消息是否需要计入未读数
    bool updateUnreadCount = 6;
  }
  string clientMsgId = 1;
  string serverMsgId = 2;
  string clientTime = 3;
  string serverTime = 4;

  string senderId = 11; // 发送者id
  bytes senderInfo = 12; // 发送者信息

  string convId = 21; // 会话id (单聊时 single:user1-user2，群聊时 group:groupId，通知号 notice:noticeId)
  repeated string atUsers = 22;   // 强提醒用户id列表 用户不在线时，会收到离线推送，除非用户屏蔽了该会话 如果需要提醒所有人，可以传入"all"

  int32 contentType = 31; // 消息内容类型
  bytes content = 32; // 消息内容
  string seq = 33; // 消息序号 会话内唯一且递增

  Options options = 41; // 消息选项
  OfflinePush offlinePush = 42; // 离线推送

  bytes ext = 101;
}

message MsgDataList {
  repeated MsgData msgDataList = 1;
}

message SendMsgListReq {
  repeated MsgData msgDataList = 1;
  // options
  // 1. 延迟时间（秒） 不得大于 864000秒 也就是10天
  optional int32 deliverAfter = 2;
  CommonReq commonReq = 11;
}

message SendMsgListResp {
  CommonResp commonResp = 1;
}

message PushMsgListReq {
  repeated MsgData msgDataList = 1;
}

message BatchGetMsgListByConvIdReq {
  message Item {
    string convId = 1;
    repeated string seqList = 2;
  }
  repeated Item items = 1;
  bool push = 2;
  CommonReq commonReq = 11;
}

message GetMsgListResp {
  repeated MsgData msgDataList = 1;
  CommonResp commonResp = 11;
}

message GetMsgByIdReq {
  optional string serverMsgId = 1;
  optional string clientMsgId = 2;
  bool push = 3;
  CommonReq commonReq = 11;
}

message GetMsgByIdResp {
  MsgData msgData = 1;
  CommonResp commonResp = 11;
}

//批量设置用户某会话的minseq
message BatchSetMinSeqReq {
  CommonReq commonReq = 1;
  string convId = 2;
  repeated string userIdList = 3;
  string minSeq = 4;
}

message BatchSetMinSeqResp {
  CommonResp commonResp = 1;
}

//批量获取会话的seq
message BatchGetConvSeqReq {
  repeated string convIdList = 1;
  CommonReq commonReq = 11;
}

message BatchGetConvSeqResp {
  message ConvSeq {
    string convId = 1;
    string minSeq = 2;
    string maxSeq = 3;
    string updateTime = 4;
  }
  map<string, ConvSeq> convSeqMap = 1;
  CommonResp commonResp = 11;
}

//GetConvSubscribersReq 获取一个会话里所有的消息订阅者
message GetConvSubscribersReq {
  CommonReq commonReq = 1;
  string convId = 2;
  // 最后的活跃时间 会查询 >= lastActiveTime 的订阅者
  optional int64 lastActiveTime = 3;
}

message GetConvSubscribersResp {
  CommonResp commonResp = 1;
  repeated string userIdList = 2;
}

message OfflinePushMsgReq {
  CommonReq commonReq = 1;
  repeated string userIds = 2;
  string title = 3;
  string content = 4;
  string payload = 5;
  string uniqueId = 6;
}

message OfflinePushMsgResp {
  CommonResp commonResp = 1;
}

// GetConvOnlineCountReq 获取一个会话里所有的在线用户
message GetConvOnlineCountReq {
  CommonReq commonReq = 1;
  string convId = 2;
}

message GetConvOnlineCountResp {
  CommonResp commonResp = 1;
  int32 user = 2;
  int32 device = 3;
}

//FlushUsersSubConvReq 刷新用户订阅的会话
message FlushUsersSubConvReq {
  CommonReq commonReq = 1;
  repeated string userIds = 2;
  // 对比的convIds 如果是单聊并且不是好友 也加入到订阅的会话里
  repeated string compareConvIds = 3;
}

//GetAllMsgListReq 获取所有消息
message GetAllMsgListReq {
  CommonReq commonReq = 1;
  string convId = 2;
  Page page = 3;
  map<string, string> filter = 4;
}

message GetAllMsgListResp {
  CommonResp commonResp = 1;
  repeated MsgData msgDataList = 2;
  int64 total = 3;
  map<string, string> userMap = 4;
}

//ReadMsgReq 设置会话已读
message ReadMsgReq {
  string senderId = 1;
  string convId = 2;
  string seq = 3;
  bytes noticeContent = 4;
  CommonReq commonReq = 11;
}

message ReadMsgResp {
  CommonResp commonResp = 1;
}

//EditMsgReq 编辑消息
message EditMsgReq {
  string senderId = 1;
  string serverMsgId = 2;
  int32 contentType = 3;
  bytes content = 4;
  bytes ext = 5;
  bytes noticeContent = 6;
  CommonReq commonReq = 11;
}

message EditMsgResp {
  CommonResp commonResp = 1;
}

//FlushShieldWordTireTreeReq 刷新屏蔽词
message FlushShieldWordTireTreeReq {
  CommonReq commonReq = 1;
}

message FlushShieldWordTireTreeResp {
  CommonResp commonResp = 1;
}

enum RedPacketType {
  //普通红包 平均分配
  Normal_RedPacket = 0;
  //拼手气红包
  Random_RedPacket = 1;
}

enum RedPacketStatus {
  //未领取
  Not_Received = 0;
  //已领取部分
  Received_Part = 1;
  //已领取完
  Received_All = 2;
  //已过期
  Expired = 3;
}

message RedPacket {
  string redPacketId = 1;
  string convId = 2;
  string title = 3;
  //红包类型
  RedPacketType redPacketType = 4;
  //红包个数
  int32 count = 5;
  //红包总金额 单位分 只有RedPacketType=Random_RedPacket时才有用
  int64 totalAmount = 6;
  //单个红包金额 单位分 只有RedPacketType=Normal_RedPacket时才有用
  int64 singleAmount = 7;
  //红包封面
  string cover = 8;
  //红包领取状态
  RedPacketStatus redPacketStatus = 9;
  //红包领取者
  message Receiver {
    string userId = 1;
    int64 amount = 2;
    int64 receiveTime = 3;
    string avatar = 4;
    string nickName = 5;
  }
  repeated Receiver receiverList = 10;
  //红包发送时间
  int64 sendTime = 11;
  //红包过期时间
  int64 expireTime = 12;
}

//SendRedPacketReq 发红包
message SendRedPacketReq {
  CommonReq commonReq = 1;
  RedPacket redPacket = 2;
}

message SendRedPacketResp {
  CommonResp commonResp = 1;
}

//ReceiveRedPacketReq 领取红包
message ReceiveRedPacketReq {
  CommonReq commonReq = 1;
  string convId = 2;
  string redPacketId = 3;
  string serverMsgId = 4;
}

message ReceiveRedPacketResp {
  CommonResp commonResp = 1;
}

//GetRedPacketDetailReq 获取红包详情
message GetRedPacketDetailReq {
  CommonReq commonReq = 1;
  string convId = 2;
  string redPacketId = 3;
}

message GetRedPacketDetailResp {
  CommonResp commonResp = 1;
  RedPacket redPacket = 2;
}

service msgService {
  rpc InsertMsgDataList(MsgDataList) returns (MsgDataList) {}
  rpc SendMsgListSync(SendMsgListReq) returns (SendMsgListResp) {} // 同步发送消息 成功后立刻能拉取到消息
  rpc SendMsgListAsync(SendMsgListReq) returns (SendMsgListResp) {} // 异步发送消息 成功后只能等待推送
  rpc PushMsgList(PushMsgListReq) returns (CommonResp) {} // 推送消息
  //BatchGetMsgListByConvId 通过seq拉取一个会话的消息
  rpc BatchGetMsgListByConvId(BatchGetMsgListByConvIdReq) returns (GetMsgListResp) {}
  //GetMsgById 通过serverMsgId或者clientMsgId拉取一条消息
  rpc GetMsgById(GetMsgByIdReq) returns (GetMsgByIdResp) {}
  //BatchSetMinSeq 批量设置用户某会话的minseq
  rpc BatchSetMinSeq(BatchSetMinSeqReq) returns (BatchSetMinSeqResp) {}
  //BatchGetConvSeq 批量获取会话的seq
  rpc BatchGetConvSeq(BatchGetConvSeqReq) returns (BatchGetConvSeqResp) {}
  // conn hook
  rpc AfterConnect(AfterConnectReq) returns (CommonResp);
  rpc AfterDisconnect(AfterDisconnectReq) returns (CommonResp);
  rpc KeepAlive(KeepAliveReq) returns (KeepAliveResp);
  //GetConvSubscribers 获取一个会话里所有的消息订阅者
  rpc GetConvSubscribers(GetConvSubscribersReq) returns (GetConvSubscribersResp) {}
  //OfflinePushMsg 离线推送消息
  rpc OfflinePushMsg(OfflinePushMsgReq) returns (OfflinePushMsgResp) {}
  //GetConvOnlineCount 获取一个会话里所有的在线用户
  rpc GetConvOnlineCount(GetConvOnlineCountReq) returns (GetConvOnlineCountResp) {}
  //FlushUsersSubConv 刷新用户订阅的会话
  rpc FlushUsersSubConv(FlushUsersSubConvReq) returns (CommonResp) {}

  //GetAllMsgList 获取所有消息
  rpc GetAllMsgList(GetAllMsgListReq) returns (GetAllMsgListResp) {}
  //ReadMsg 设置会话已读
  rpc ReadMsg(ReadMsgReq) returns (ReadMsgResp) {}
  //EditMsg 编辑消息
  rpc EditMsg(EditMsgReq) returns (EditMsgResp) {}

  //FlushShieldWordTireTree 刷新屏蔽词
  rpc FlushShieldWordTireTree(FlushShieldWordTireTreeReq) returns (FlushShieldWordTireTreeResp) {}

  //SendRedPacket 发红包
  rpc SendRedPacket(SendRedPacketReq) returns (SendRedPacketResp) {}
  //ReceiveRedPacket 领取红包
  rpc ReceiveRedPacket(ReceiveRedPacketReq) returns (ReceiveRedPacketResp) {}
  //GetRedPacketDetail 获取红包详情
  rpc GetRedPacketDetail(GetRedPacketDetailReq) returns (GetRedPacketDetailResp) {}
}
