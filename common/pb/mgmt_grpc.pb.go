// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: mgmt.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MgmtServiceClient is the client API for MgmtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgmtServiceClient interface {
	AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error)
	AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetServerConfig(ctx context.Context, in *GetServerConfigReq, opts ...grpc.CallOption) (*GetServerConfigResp, error)
	GetServerAllConfig(ctx context.Context, in *GetServerAllConfigReq, opts ...grpc.CallOption) (*GetServerAllConfigResp, error)
	UpdateServerConfig(ctx context.Context, in *UpdateServerConfigReq, opts ...grpc.CallOption) (*UpdateServerConfigResp, error)
	GetAppLineConfig(ctx context.Context, in *GetAppLineConfigReq, opts ...grpc.CallOption) (*GetAppLineConfigResp, error)
	UpdateAppLineConfig(ctx context.Context, in *UpdateAppLineConfigReq, opts ...grpc.CallOption) (*UpdateAppLineConfigResp, error)
	LoginMS(ctx context.Context, in *LoginMSReq, opts ...grpc.CallOption) (*LoginMSResp, error)
	HealthMS(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*HealthMSResp, error)
	ConfigMS(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*ConfigMSResp, error)
	GetAllMSMenuList(ctx context.Context, in *GetAllMSMenuListReq, opts ...grpc.CallOption) (*GetAllMSMenuListResp, error)
	GetMyMSMenuList(ctx context.Context, in *GetMyMSMenuListReq, opts ...grpc.CallOption) (*GetMyMSMenuListResp, error)
	GetMSMenuDetail(ctx context.Context, in *GetMSMenuDetailReq, opts ...grpc.CallOption) (*GetMSMenuDetailResp, error)
	AddMSMenu(ctx context.Context, in *AddMSMenuReq, opts ...grpc.CallOption) (*AddMSMenuResp, error)
	UpdateMSMenu(ctx context.Context, in *UpdateMSMenuReq, opts ...grpc.CallOption) (*UpdateMSMenuResp, error)
	DeleteMSMenu(ctx context.Context, in *DeleteMSMenuReq, opts ...grpc.CallOption) (*DeleteMSMenuResp, error)
	GetAllMSApiPathList(ctx context.Context, in *GetAllMSApiPathListReq, opts ...grpc.CallOption) (*GetAllMSApiPathListResp, error)
	GetMyMSApiPathList(ctx context.Context, in *GetMyMSApiPathListReq, opts ...grpc.CallOption) (*GetMyMSApiPathListResp, error)
	GetMSApiPathDetail(ctx context.Context, in *GetMSApiPathDetailReq, opts ...grpc.CallOption) (*GetMSApiPathDetailResp, error)
	AddMSApiPath(ctx context.Context, in *AddMSApiPathReq, opts ...grpc.CallOption) (*AddMSApiPathResp, error)
	UpdateMSApiPath(ctx context.Context, in *UpdateMSApiPathReq, opts ...grpc.CallOption) (*UpdateMSApiPathResp, error)
	DeleteMSApiPath(ctx context.Context, in *DeleteMSApiPathReq, opts ...grpc.CallOption) (*DeleteMSApiPathResp, error)
	GetAllMSRoleList(ctx context.Context, in *GetAllMSRoleListReq, opts ...grpc.CallOption) (*GetAllMSRoleListResp, error)
	GetMSRoleDetail(ctx context.Context, in *GetMSRoleDetailReq, opts ...grpc.CallOption) (*GetMSRoleDetailResp, error)
	AddMSRole(ctx context.Context, in *AddMSRoleReq, opts ...grpc.CallOption) (*AddMSRoleResp, error)
	UpdateMSRole(ctx context.Context, in *UpdateMSRoleReq, opts ...grpc.CallOption) (*UpdateMSRoleResp, error)
	DeleteMSRole(ctx context.Context, in *DeleteMSRoleReq, opts ...grpc.CallOption) (*DeleteMSRoleResp, error)
	GetAllMSUserList(ctx context.Context, in *GetAllMSUserListReq, opts ...grpc.CallOption) (*GetAllMSUserListResp, error)
	GetMSUserDetail(ctx context.Context, in *GetMSUserDetailReq, opts ...grpc.CallOption) (*GetMSUserDetailResp, error)
	GetSelfMSUserDetail(ctx context.Context, in *GetSelfMSUserDetailReq, opts ...grpc.CallOption) (*GetSelfMSUserDetailResp, error)
	AddMSUser(ctx context.Context, in *AddMSUserReq, opts ...grpc.CallOption) (*AddMSUserResp, error)
	UpdateMSUser(ctx context.Context, in *UpdateMSUserReq, opts ...grpc.CallOption) (*UpdateMSUserResp, error)
	DeleteMSUser(ctx context.Context, in *DeleteMSUserReq, opts ...grpc.CallOption) (*DeleteMSUserResp, error)
	SwitchMSUserStatus(ctx context.Context, in *SwitchMSUserStatusReq, opts ...grpc.CallOption) (*SwitchMSUserStatusResp, error)
	GetAllMSIpWhiteList(ctx context.Context, in *GetAllMSIpWhiteListReq, opts ...grpc.CallOption) (*GetAllMSIpWhiteListResp, error)
	GetMSIpWhiteListDetail(ctx context.Context, in *GetMSIpWhiteListDetailReq, opts ...grpc.CallOption) (*GetMSIpWhiteListDetailResp, error)
	AddMSIpWhiteList(ctx context.Context, in *AddMSIpWhiteListReq, opts ...grpc.CallOption) (*AddMSIpWhiteListResp, error)
	UpdateMSIpWhiteList(ctx context.Context, in *UpdateMSIpWhiteListReq, opts ...grpc.CallOption) (*UpdateMSIpWhiteListResp, error)
	DeleteMSIpWhiteList(ctx context.Context, in *DeleteMSIpWhiteListReq, opts ...grpc.CallOption) (*DeleteMSIpWhiteListResp, error)
	GetAllMSOperationLog(ctx context.Context, in *GetAllMSOperationLogReq, opts ...grpc.CallOption) (*GetAllMSOperationLogResp, error)
	GetMSOperationLogDetail(ctx context.Context, in *GetMSOperationLogDetailReq, opts ...grpc.CallOption) (*GetMSOperationLogDetailResp, error)
	DeleteMSOperationLog(ctx context.Context, in *DeleteMSOperationLogReq, opts ...grpc.CallOption) (*DeleteMSOperationLogResp, error)
	GetAllMSLoginRecord(ctx context.Context, in *GetAllMSLoginRecordReq, opts ...grpc.CallOption) (*GetAllMSLoginRecordResp, error)
	//相册分类
	GetAllMSAlbumCate(ctx context.Context, in *GetAllMSAlbumCateReq, opts ...grpc.CallOption) (*GetAllMSAlbumCateResp, error)
	DeleteMSAlbumCate(ctx context.Context, in *DeleteMSAlbumCateReq, opts ...grpc.CallOption) (*DeleteMSAlbumCateResp, error)
	AddMSAlbumCate(ctx context.Context, in *AddMSAlbumCateReq, opts ...grpc.CallOption) (*AddMSAlbumCateResp, error)
	UpdateMSAlbumCate(ctx context.Context, in *UpdateMSAlbumCateReq, opts ...grpc.CallOption) (*UpdateMSAlbumCateResp, error)
	//相册
	GetAllMSAlbum(ctx context.Context, in *GetAllMSAlbumReq, opts ...grpc.CallOption) (*GetAllMSAlbumResp, error)
	DeleteMSAlbum(ctx context.Context, in *DeleteMSAlbumReq, opts ...grpc.CallOption) (*DeleteMSAlbumResp, error)
	UpdateMSAlbum(ctx context.Context, in *UpdateMSAlbumReq, opts ...grpc.CallOption) (*UpdateMSAlbumResp, error)
	StatsMS(ctx context.Context, in *StatsMSReq, opts ...grpc.CallOption) (*StatsMSResp, error)
}

type mgmtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtServiceClient(cc grpc.ClientConnInterface) MgmtServiceClient {
	return &mgmtServiceClient{cc}
}

func (c *mgmtServiceClient) AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/AfterConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/AfterDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetServerConfig(ctx context.Context, in *GetServerConfigReq, opts ...grpc.CallOption) (*GetServerConfigResp, error) {
	out := new(GetServerConfigResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetServerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetServerAllConfig(ctx context.Context, in *GetServerAllConfigReq, opts ...grpc.CallOption) (*GetServerAllConfigResp, error) {
	out := new(GetServerAllConfigResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetServerAllConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) UpdateServerConfig(ctx context.Context, in *UpdateServerConfigReq, opts ...grpc.CallOption) (*UpdateServerConfigResp, error) {
	out := new(UpdateServerConfigResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/UpdateServerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetAppLineConfig(ctx context.Context, in *GetAppLineConfigReq, opts ...grpc.CallOption) (*GetAppLineConfigResp, error) {
	out := new(GetAppLineConfigResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetAppLineConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) UpdateAppLineConfig(ctx context.Context, in *UpdateAppLineConfigReq, opts ...grpc.CallOption) (*UpdateAppLineConfigResp, error) {
	out := new(UpdateAppLineConfigResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/UpdateAppLineConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) LoginMS(ctx context.Context, in *LoginMSReq, opts ...grpc.CallOption) (*LoginMSResp, error) {
	out := new(LoginMSResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/LoginMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) HealthMS(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*HealthMSResp, error) {
	out := new(HealthMSResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/HealthMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) ConfigMS(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*ConfigMSResp, error) {
	out := new(ConfigMSResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/ConfigMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetAllMSMenuList(ctx context.Context, in *GetAllMSMenuListReq, opts ...grpc.CallOption) (*GetAllMSMenuListResp, error) {
	out := new(GetAllMSMenuListResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetAllMSMenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetMyMSMenuList(ctx context.Context, in *GetMyMSMenuListReq, opts ...grpc.CallOption) (*GetMyMSMenuListResp, error) {
	out := new(GetMyMSMenuListResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetMyMSMenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetMSMenuDetail(ctx context.Context, in *GetMSMenuDetailReq, opts ...grpc.CallOption) (*GetMSMenuDetailResp, error) {
	out := new(GetMSMenuDetailResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetMSMenuDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) AddMSMenu(ctx context.Context, in *AddMSMenuReq, opts ...grpc.CallOption) (*AddMSMenuResp, error) {
	out := new(AddMSMenuResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/AddMSMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) UpdateMSMenu(ctx context.Context, in *UpdateMSMenuReq, opts ...grpc.CallOption) (*UpdateMSMenuResp, error) {
	out := new(UpdateMSMenuResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/UpdateMSMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) DeleteMSMenu(ctx context.Context, in *DeleteMSMenuReq, opts ...grpc.CallOption) (*DeleteMSMenuResp, error) {
	out := new(DeleteMSMenuResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/DeleteMSMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetAllMSApiPathList(ctx context.Context, in *GetAllMSApiPathListReq, opts ...grpc.CallOption) (*GetAllMSApiPathListResp, error) {
	out := new(GetAllMSApiPathListResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetAllMSApiPathList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetMyMSApiPathList(ctx context.Context, in *GetMyMSApiPathListReq, opts ...grpc.CallOption) (*GetMyMSApiPathListResp, error) {
	out := new(GetMyMSApiPathListResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetMyMSApiPathList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetMSApiPathDetail(ctx context.Context, in *GetMSApiPathDetailReq, opts ...grpc.CallOption) (*GetMSApiPathDetailResp, error) {
	out := new(GetMSApiPathDetailResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetMSApiPathDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) AddMSApiPath(ctx context.Context, in *AddMSApiPathReq, opts ...grpc.CallOption) (*AddMSApiPathResp, error) {
	out := new(AddMSApiPathResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/AddMSApiPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) UpdateMSApiPath(ctx context.Context, in *UpdateMSApiPathReq, opts ...grpc.CallOption) (*UpdateMSApiPathResp, error) {
	out := new(UpdateMSApiPathResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/UpdateMSApiPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) DeleteMSApiPath(ctx context.Context, in *DeleteMSApiPathReq, opts ...grpc.CallOption) (*DeleteMSApiPathResp, error) {
	out := new(DeleteMSApiPathResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/DeleteMSApiPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetAllMSRoleList(ctx context.Context, in *GetAllMSRoleListReq, opts ...grpc.CallOption) (*GetAllMSRoleListResp, error) {
	out := new(GetAllMSRoleListResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetAllMSRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetMSRoleDetail(ctx context.Context, in *GetMSRoleDetailReq, opts ...grpc.CallOption) (*GetMSRoleDetailResp, error) {
	out := new(GetMSRoleDetailResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetMSRoleDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) AddMSRole(ctx context.Context, in *AddMSRoleReq, opts ...grpc.CallOption) (*AddMSRoleResp, error) {
	out := new(AddMSRoleResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/AddMSRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) UpdateMSRole(ctx context.Context, in *UpdateMSRoleReq, opts ...grpc.CallOption) (*UpdateMSRoleResp, error) {
	out := new(UpdateMSRoleResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/UpdateMSRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) DeleteMSRole(ctx context.Context, in *DeleteMSRoleReq, opts ...grpc.CallOption) (*DeleteMSRoleResp, error) {
	out := new(DeleteMSRoleResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/DeleteMSRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetAllMSUserList(ctx context.Context, in *GetAllMSUserListReq, opts ...grpc.CallOption) (*GetAllMSUserListResp, error) {
	out := new(GetAllMSUserListResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetAllMSUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetMSUserDetail(ctx context.Context, in *GetMSUserDetailReq, opts ...grpc.CallOption) (*GetMSUserDetailResp, error) {
	out := new(GetMSUserDetailResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetMSUserDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetSelfMSUserDetail(ctx context.Context, in *GetSelfMSUserDetailReq, opts ...grpc.CallOption) (*GetSelfMSUserDetailResp, error) {
	out := new(GetSelfMSUserDetailResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetSelfMSUserDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) AddMSUser(ctx context.Context, in *AddMSUserReq, opts ...grpc.CallOption) (*AddMSUserResp, error) {
	out := new(AddMSUserResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/AddMSUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) UpdateMSUser(ctx context.Context, in *UpdateMSUserReq, opts ...grpc.CallOption) (*UpdateMSUserResp, error) {
	out := new(UpdateMSUserResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/UpdateMSUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) DeleteMSUser(ctx context.Context, in *DeleteMSUserReq, opts ...grpc.CallOption) (*DeleteMSUserResp, error) {
	out := new(DeleteMSUserResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/DeleteMSUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) SwitchMSUserStatus(ctx context.Context, in *SwitchMSUserStatusReq, opts ...grpc.CallOption) (*SwitchMSUserStatusResp, error) {
	out := new(SwitchMSUserStatusResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/SwitchMSUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetAllMSIpWhiteList(ctx context.Context, in *GetAllMSIpWhiteListReq, opts ...grpc.CallOption) (*GetAllMSIpWhiteListResp, error) {
	out := new(GetAllMSIpWhiteListResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetAllMSIpWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetMSIpWhiteListDetail(ctx context.Context, in *GetMSIpWhiteListDetailReq, opts ...grpc.CallOption) (*GetMSIpWhiteListDetailResp, error) {
	out := new(GetMSIpWhiteListDetailResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetMSIpWhiteListDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) AddMSIpWhiteList(ctx context.Context, in *AddMSIpWhiteListReq, opts ...grpc.CallOption) (*AddMSIpWhiteListResp, error) {
	out := new(AddMSIpWhiteListResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/AddMSIpWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) UpdateMSIpWhiteList(ctx context.Context, in *UpdateMSIpWhiteListReq, opts ...grpc.CallOption) (*UpdateMSIpWhiteListResp, error) {
	out := new(UpdateMSIpWhiteListResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/UpdateMSIpWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) DeleteMSIpWhiteList(ctx context.Context, in *DeleteMSIpWhiteListReq, opts ...grpc.CallOption) (*DeleteMSIpWhiteListResp, error) {
	out := new(DeleteMSIpWhiteListResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/DeleteMSIpWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetAllMSOperationLog(ctx context.Context, in *GetAllMSOperationLogReq, opts ...grpc.CallOption) (*GetAllMSOperationLogResp, error) {
	out := new(GetAllMSOperationLogResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetAllMSOperationLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetMSOperationLogDetail(ctx context.Context, in *GetMSOperationLogDetailReq, opts ...grpc.CallOption) (*GetMSOperationLogDetailResp, error) {
	out := new(GetMSOperationLogDetailResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetMSOperationLogDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) DeleteMSOperationLog(ctx context.Context, in *DeleteMSOperationLogReq, opts ...grpc.CallOption) (*DeleteMSOperationLogResp, error) {
	out := new(DeleteMSOperationLogResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/DeleteMSOperationLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetAllMSLoginRecord(ctx context.Context, in *GetAllMSLoginRecordReq, opts ...grpc.CallOption) (*GetAllMSLoginRecordResp, error) {
	out := new(GetAllMSLoginRecordResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetAllMSLoginRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetAllMSAlbumCate(ctx context.Context, in *GetAllMSAlbumCateReq, opts ...grpc.CallOption) (*GetAllMSAlbumCateResp, error) {
	out := new(GetAllMSAlbumCateResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetAllMSAlbumCate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) DeleteMSAlbumCate(ctx context.Context, in *DeleteMSAlbumCateReq, opts ...grpc.CallOption) (*DeleteMSAlbumCateResp, error) {
	out := new(DeleteMSAlbumCateResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/DeleteMSAlbumCate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) AddMSAlbumCate(ctx context.Context, in *AddMSAlbumCateReq, opts ...grpc.CallOption) (*AddMSAlbumCateResp, error) {
	out := new(AddMSAlbumCateResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/AddMSAlbumCate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) UpdateMSAlbumCate(ctx context.Context, in *UpdateMSAlbumCateReq, opts ...grpc.CallOption) (*UpdateMSAlbumCateResp, error) {
	out := new(UpdateMSAlbumCateResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/UpdateMSAlbumCate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetAllMSAlbum(ctx context.Context, in *GetAllMSAlbumReq, opts ...grpc.CallOption) (*GetAllMSAlbumResp, error) {
	out := new(GetAllMSAlbumResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetAllMSAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) DeleteMSAlbum(ctx context.Context, in *DeleteMSAlbumReq, opts ...grpc.CallOption) (*DeleteMSAlbumResp, error) {
	out := new(DeleteMSAlbumResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/DeleteMSAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) UpdateMSAlbum(ctx context.Context, in *UpdateMSAlbumReq, opts ...grpc.CallOption) (*UpdateMSAlbumResp, error) {
	out := new(UpdateMSAlbumResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/UpdateMSAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) StatsMS(ctx context.Context, in *StatsMSReq, opts ...grpc.CallOption) (*StatsMSResp, error) {
	out := new(StatsMSResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/StatsMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtServiceServer is the server API for MgmtService service.
// All implementations must embed UnimplementedMgmtServiceServer
// for forward compatibility
type MgmtServiceServer interface {
	AfterConnect(context.Context, *AfterConnectReq) (*CommonResp, error)
	AfterDisconnect(context.Context, *AfterDisconnectReq) (*CommonResp, error)
	GetServerConfig(context.Context, *GetServerConfigReq) (*GetServerConfigResp, error)
	GetServerAllConfig(context.Context, *GetServerAllConfigReq) (*GetServerAllConfigResp, error)
	UpdateServerConfig(context.Context, *UpdateServerConfigReq) (*UpdateServerConfigResp, error)
	GetAppLineConfig(context.Context, *GetAppLineConfigReq) (*GetAppLineConfigResp, error)
	UpdateAppLineConfig(context.Context, *UpdateAppLineConfigReq) (*UpdateAppLineConfigResp, error)
	LoginMS(context.Context, *LoginMSReq) (*LoginMSResp, error)
	HealthMS(context.Context, *CommonReq) (*HealthMSResp, error)
	ConfigMS(context.Context, *CommonReq) (*ConfigMSResp, error)
	GetAllMSMenuList(context.Context, *GetAllMSMenuListReq) (*GetAllMSMenuListResp, error)
	GetMyMSMenuList(context.Context, *GetMyMSMenuListReq) (*GetMyMSMenuListResp, error)
	GetMSMenuDetail(context.Context, *GetMSMenuDetailReq) (*GetMSMenuDetailResp, error)
	AddMSMenu(context.Context, *AddMSMenuReq) (*AddMSMenuResp, error)
	UpdateMSMenu(context.Context, *UpdateMSMenuReq) (*UpdateMSMenuResp, error)
	DeleteMSMenu(context.Context, *DeleteMSMenuReq) (*DeleteMSMenuResp, error)
	GetAllMSApiPathList(context.Context, *GetAllMSApiPathListReq) (*GetAllMSApiPathListResp, error)
	GetMyMSApiPathList(context.Context, *GetMyMSApiPathListReq) (*GetMyMSApiPathListResp, error)
	GetMSApiPathDetail(context.Context, *GetMSApiPathDetailReq) (*GetMSApiPathDetailResp, error)
	AddMSApiPath(context.Context, *AddMSApiPathReq) (*AddMSApiPathResp, error)
	UpdateMSApiPath(context.Context, *UpdateMSApiPathReq) (*UpdateMSApiPathResp, error)
	DeleteMSApiPath(context.Context, *DeleteMSApiPathReq) (*DeleteMSApiPathResp, error)
	GetAllMSRoleList(context.Context, *GetAllMSRoleListReq) (*GetAllMSRoleListResp, error)
	GetMSRoleDetail(context.Context, *GetMSRoleDetailReq) (*GetMSRoleDetailResp, error)
	AddMSRole(context.Context, *AddMSRoleReq) (*AddMSRoleResp, error)
	UpdateMSRole(context.Context, *UpdateMSRoleReq) (*UpdateMSRoleResp, error)
	DeleteMSRole(context.Context, *DeleteMSRoleReq) (*DeleteMSRoleResp, error)
	GetAllMSUserList(context.Context, *GetAllMSUserListReq) (*GetAllMSUserListResp, error)
	GetMSUserDetail(context.Context, *GetMSUserDetailReq) (*GetMSUserDetailResp, error)
	GetSelfMSUserDetail(context.Context, *GetSelfMSUserDetailReq) (*GetSelfMSUserDetailResp, error)
	AddMSUser(context.Context, *AddMSUserReq) (*AddMSUserResp, error)
	UpdateMSUser(context.Context, *UpdateMSUserReq) (*UpdateMSUserResp, error)
	DeleteMSUser(context.Context, *DeleteMSUserReq) (*DeleteMSUserResp, error)
	SwitchMSUserStatus(context.Context, *SwitchMSUserStatusReq) (*SwitchMSUserStatusResp, error)
	GetAllMSIpWhiteList(context.Context, *GetAllMSIpWhiteListReq) (*GetAllMSIpWhiteListResp, error)
	GetMSIpWhiteListDetail(context.Context, *GetMSIpWhiteListDetailReq) (*GetMSIpWhiteListDetailResp, error)
	AddMSIpWhiteList(context.Context, *AddMSIpWhiteListReq) (*AddMSIpWhiteListResp, error)
	UpdateMSIpWhiteList(context.Context, *UpdateMSIpWhiteListReq) (*UpdateMSIpWhiteListResp, error)
	DeleteMSIpWhiteList(context.Context, *DeleteMSIpWhiteListReq) (*DeleteMSIpWhiteListResp, error)
	GetAllMSOperationLog(context.Context, *GetAllMSOperationLogReq) (*GetAllMSOperationLogResp, error)
	GetMSOperationLogDetail(context.Context, *GetMSOperationLogDetailReq) (*GetMSOperationLogDetailResp, error)
	DeleteMSOperationLog(context.Context, *DeleteMSOperationLogReq) (*DeleteMSOperationLogResp, error)
	GetAllMSLoginRecord(context.Context, *GetAllMSLoginRecordReq) (*GetAllMSLoginRecordResp, error)
	//相册分类
	GetAllMSAlbumCate(context.Context, *GetAllMSAlbumCateReq) (*GetAllMSAlbumCateResp, error)
	DeleteMSAlbumCate(context.Context, *DeleteMSAlbumCateReq) (*DeleteMSAlbumCateResp, error)
	AddMSAlbumCate(context.Context, *AddMSAlbumCateReq) (*AddMSAlbumCateResp, error)
	UpdateMSAlbumCate(context.Context, *UpdateMSAlbumCateReq) (*UpdateMSAlbumCateResp, error)
	//相册
	GetAllMSAlbum(context.Context, *GetAllMSAlbumReq) (*GetAllMSAlbumResp, error)
	DeleteMSAlbum(context.Context, *DeleteMSAlbumReq) (*DeleteMSAlbumResp, error)
	UpdateMSAlbum(context.Context, *UpdateMSAlbumReq) (*UpdateMSAlbumResp, error)
	StatsMS(context.Context, *StatsMSReq) (*StatsMSResp, error)
	mustEmbedUnimplementedMgmtServiceServer()
}

// UnimplementedMgmtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMgmtServiceServer struct {
}

func (UnimplementedMgmtServiceServer) AfterConnect(context.Context, *AfterConnectReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterConnect not implemented")
}
func (UnimplementedMgmtServiceServer) AfterDisconnect(context.Context, *AfterDisconnectReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterDisconnect not implemented")
}
func (UnimplementedMgmtServiceServer) GetServerConfig(context.Context, *GetServerConfigReq) (*GetServerConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerConfig not implemented")
}
func (UnimplementedMgmtServiceServer) GetServerAllConfig(context.Context, *GetServerAllConfigReq) (*GetServerAllConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerAllConfig not implemented")
}
func (UnimplementedMgmtServiceServer) UpdateServerConfig(context.Context, *UpdateServerConfigReq) (*UpdateServerConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerConfig not implemented")
}
func (UnimplementedMgmtServiceServer) GetAppLineConfig(context.Context, *GetAppLineConfigReq) (*GetAppLineConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppLineConfig not implemented")
}
func (UnimplementedMgmtServiceServer) UpdateAppLineConfig(context.Context, *UpdateAppLineConfigReq) (*UpdateAppLineConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppLineConfig not implemented")
}
func (UnimplementedMgmtServiceServer) LoginMS(context.Context, *LoginMSReq) (*LoginMSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginMS not implemented")
}
func (UnimplementedMgmtServiceServer) HealthMS(context.Context, *CommonReq) (*HealthMSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthMS not implemented")
}
func (UnimplementedMgmtServiceServer) ConfigMS(context.Context, *CommonReq) (*ConfigMSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigMS not implemented")
}
func (UnimplementedMgmtServiceServer) GetAllMSMenuList(context.Context, *GetAllMSMenuListReq) (*GetAllMSMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMSMenuList not implemented")
}
func (UnimplementedMgmtServiceServer) GetMyMSMenuList(context.Context, *GetMyMSMenuListReq) (*GetMyMSMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyMSMenuList not implemented")
}
func (UnimplementedMgmtServiceServer) GetMSMenuDetail(context.Context, *GetMSMenuDetailReq) (*GetMSMenuDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMSMenuDetail not implemented")
}
func (UnimplementedMgmtServiceServer) AddMSMenu(context.Context, *AddMSMenuReq) (*AddMSMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMSMenu not implemented")
}
func (UnimplementedMgmtServiceServer) UpdateMSMenu(context.Context, *UpdateMSMenuReq) (*UpdateMSMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMSMenu not implemented")
}
func (UnimplementedMgmtServiceServer) DeleteMSMenu(context.Context, *DeleteMSMenuReq) (*DeleteMSMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMSMenu not implemented")
}
func (UnimplementedMgmtServiceServer) GetAllMSApiPathList(context.Context, *GetAllMSApiPathListReq) (*GetAllMSApiPathListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMSApiPathList not implemented")
}
func (UnimplementedMgmtServiceServer) GetMyMSApiPathList(context.Context, *GetMyMSApiPathListReq) (*GetMyMSApiPathListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyMSApiPathList not implemented")
}
func (UnimplementedMgmtServiceServer) GetMSApiPathDetail(context.Context, *GetMSApiPathDetailReq) (*GetMSApiPathDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMSApiPathDetail not implemented")
}
func (UnimplementedMgmtServiceServer) AddMSApiPath(context.Context, *AddMSApiPathReq) (*AddMSApiPathResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMSApiPath not implemented")
}
func (UnimplementedMgmtServiceServer) UpdateMSApiPath(context.Context, *UpdateMSApiPathReq) (*UpdateMSApiPathResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMSApiPath not implemented")
}
func (UnimplementedMgmtServiceServer) DeleteMSApiPath(context.Context, *DeleteMSApiPathReq) (*DeleteMSApiPathResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMSApiPath not implemented")
}
func (UnimplementedMgmtServiceServer) GetAllMSRoleList(context.Context, *GetAllMSRoleListReq) (*GetAllMSRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMSRoleList not implemented")
}
func (UnimplementedMgmtServiceServer) GetMSRoleDetail(context.Context, *GetMSRoleDetailReq) (*GetMSRoleDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMSRoleDetail not implemented")
}
func (UnimplementedMgmtServiceServer) AddMSRole(context.Context, *AddMSRoleReq) (*AddMSRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMSRole not implemented")
}
func (UnimplementedMgmtServiceServer) UpdateMSRole(context.Context, *UpdateMSRoleReq) (*UpdateMSRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMSRole not implemented")
}
func (UnimplementedMgmtServiceServer) DeleteMSRole(context.Context, *DeleteMSRoleReq) (*DeleteMSRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMSRole not implemented")
}
func (UnimplementedMgmtServiceServer) GetAllMSUserList(context.Context, *GetAllMSUserListReq) (*GetAllMSUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMSUserList not implemented")
}
func (UnimplementedMgmtServiceServer) GetMSUserDetail(context.Context, *GetMSUserDetailReq) (*GetMSUserDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMSUserDetail not implemented")
}
func (UnimplementedMgmtServiceServer) GetSelfMSUserDetail(context.Context, *GetSelfMSUserDetailReq) (*GetSelfMSUserDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfMSUserDetail not implemented")
}
func (UnimplementedMgmtServiceServer) AddMSUser(context.Context, *AddMSUserReq) (*AddMSUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMSUser not implemented")
}
func (UnimplementedMgmtServiceServer) UpdateMSUser(context.Context, *UpdateMSUserReq) (*UpdateMSUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMSUser not implemented")
}
func (UnimplementedMgmtServiceServer) DeleteMSUser(context.Context, *DeleteMSUserReq) (*DeleteMSUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMSUser not implemented")
}
func (UnimplementedMgmtServiceServer) SwitchMSUserStatus(context.Context, *SwitchMSUserStatusReq) (*SwitchMSUserStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchMSUserStatus not implemented")
}
func (UnimplementedMgmtServiceServer) GetAllMSIpWhiteList(context.Context, *GetAllMSIpWhiteListReq) (*GetAllMSIpWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMSIpWhiteList not implemented")
}
func (UnimplementedMgmtServiceServer) GetMSIpWhiteListDetail(context.Context, *GetMSIpWhiteListDetailReq) (*GetMSIpWhiteListDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMSIpWhiteListDetail not implemented")
}
func (UnimplementedMgmtServiceServer) AddMSIpWhiteList(context.Context, *AddMSIpWhiteListReq) (*AddMSIpWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMSIpWhiteList not implemented")
}
func (UnimplementedMgmtServiceServer) UpdateMSIpWhiteList(context.Context, *UpdateMSIpWhiteListReq) (*UpdateMSIpWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMSIpWhiteList not implemented")
}
func (UnimplementedMgmtServiceServer) DeleteMSIpWhiteList(context.Context, *DeleteMSIpWhiteListReq) (*DeleteMSIpWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMSIpWhiteList not implemented")
}
func (UnimplementedMgmtServiceServer) GetAllMSOperationLog(context.Context, *GetAllMSOperationLogReq) (*GetAllMSOperationLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMSOperationLog not implemented")
}
func (UnimplementedMgmtServiceServer) GetMSOperationLogDetail(context.Context, *GetMSOperationLogDetailReq) (*GetMSOperationLogDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMSOperationLogDetail not implemented")
}
func (UnimplementedMgmtServiceServer) DeleteMSOperationLog(context.Context, *DeleteMSOperationLogReq) (*DeleteMSOperationLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMSOperationLog not implemented")
}
func (UnimplementedMgmtServiceServer) GetAllMSLoginRecord(context.Context, *GetAllMSLoginRecordReq) (*GetAllMSLoginRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMSLoginRecord not implemented")
}
func (UnimplementedMgmtServiceServer) GetAllMSAlbumCate(context.Context, *GetAllMSAlbumCateReq) (*GetAllMSAlbumCateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMSAlbumCate not implemented")
}
func (UnimplementedMgmtServiceServer) DeleteMSAlbumCate(context.Context, *DeleteMSAlbumCateReq) (*DeleteMSAlbumCateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMSAlbumCate not implemented")
}
func (UnimplementedMgmtServiceServer) AddMSAlbumCate(context.Context, *AddMSAlbumCateReq) (*AddMSAlbumCateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMSAlbumCate not implemented")
}
func (UnimplementedMgmtServiceServer) UpdateMSAlbumCate(context.Context, *UpdateMSAlbumCateReq) (*UpdateMSAlbumCateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMSAlbumCate not implemented")
}
func (UnimplementedMgmtServiceServer) GetAllMSAlbum(context.Context, *GetAllMSAlbumReq) (*GetAllMSAlbumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMSAlbum not implemented")
}
func (UnimplementedMgmtServiceServer) DeleteMSAlbum(context.Context, *DeleteMSAlbumReq) (*DeleteMSAlbumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMSAlbum not implemented")
}
func (UnimplementedMgmtServiceServer) UpdateMSAlbum(context.Context, *UpdateMSAlbumReq) (*UpdateMSAlbumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMSAlbum not implemented")
}
func (UnimplementedMgmtServiceServer) StatsMS(context.Context, *StatsMSReq) (*StatsMSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsMS not implemented")
}
func (UnimplementedMgmtServiceServer) mustEmbedUnimplementedMgmtServiceServer() {}

// UnsafeMgmtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtServiceServer will
// result in compilation errors.
type UnsafeMgmtServiceServer interface {
	mustEmbedUnimplementedMgmtServiceServer()
}

func RegisterMgmtServiceServer(s grpc.ServiceRegistrar, srv MgmtServiceServer) {
	s.RegisterService(&MgmtService_ServiceDesc, srv)
}

func _MgmtService_AfterConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).AfterConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/AfterConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).AfterConnect(ctx, req.(*AfterConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_AfterDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterDisconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).AfterDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/AfterDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).AfterDisconnect(ctx, req.(*AfterDisconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetServerConfig(ctx, req.(*GetServerConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetServerAllConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerAllConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetServerAllConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetServerAllConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetServerAllConfig(ctx, req.(*GetServerAllConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_UpdateServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).UpdateServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/UpdateServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).UpdateServerConfig(ctx, req.(*UpdateServerConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetAppLineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppLineConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetAppLineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetAppLineConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetAppLineConfig(ctx, req.(*GetAppLineConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_UpdateAppLineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppLineConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).UpdateAppLineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/UpdateAppLineConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).UpdateAppLineConfig(ctx, req.(*UpdateAppLineConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_LoginMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).LoginMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/LoginMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).LoginMS(ctx, req.(*LoginMSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_HealthMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).HealthMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/HealthMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).HealthMS(ctx, req.(*CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_ConfigMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).ConfigMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/ConfigMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).ConfigMS(ctx, req.(*CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetAllMSMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMSMenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetAllMSMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetAllMSMenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetAllMSMenuList(ctx, req.(*GetAllMSMenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetMyMSMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyMSMenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetMyMSMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetMyMSMenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetMyMSMenuList(ctx, req.(*GetMyMSMenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetMSMenuDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMSMenuDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetMSMenuDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetMSMenuDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetMSMenuDetail(ctx, req.(*GetMSMenuDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_AddMSMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMSMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).AddMSMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/AddMSMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).AddMSMenu(ctx, req.(*AddMSMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_UpdateMSMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMSMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).UpdateMSMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/UpdateMSMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).UpdateMSMenu(ctx, req.(*UpdateMSMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_DeleteMSMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMSMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).DeleteMSMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/DeleteMSMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).DeleteMSMenu(ctx, req.(*DeleteMSMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetAllMSApiPathList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMSApiPathListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetAllMSApiPathList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetAllMSApiPathList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetAllMSApiPathList(ctx, req.(*GetAllMSApiPathListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetMyMSApiPathList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyMSApiPathListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetMyMSApiPathList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetMyMSApiPathList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetMyMSApiPathList(ctx, req.(*GetMyMSApiPathListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetMSApiPathDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMSApiPathDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetMSApiPathDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetMSApiPathDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetMSApiPathDetail(ctx, req.(*GetMSApiPathDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_AddMSApiPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMSApiPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).AddMSApiPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/AddMSApiPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).AddMSApiPath(ctx, req.(*AddMSApiPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_UpdateMSApiPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMSApiPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).UpdateMSApiPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/UpdateMSApiPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).UpdateMSApiPath(ctx, req.(*UpdateMSApiPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_DeleteMSApiPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMSApiPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).DeleteMSApiPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/DeleteMSApiPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).DeleteMSApiPath(ctx, req.(*DeleteMSApiPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetAllMSRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMSRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetAllMSRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetAllMSRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetAllMSRoleList(ctx, req.(*GetAllMSRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetMSRoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMSRoleDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetMSRoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetMSRoleDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetMSRoleDetail(ctx, req.(*GetMSRoleDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_AddMSRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMSRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).AddMSRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/AddMSRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).AddMSRole(ctx, req.(*AddMSRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_UpdateMSRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMSRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).UpdateMSRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/UpdateMSRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).UpdateMSRole(ctx, req.(*UpdateMSRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_DeleteMSRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMSRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).DeleteMSRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/DeleteMSRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).DeleteMSRole(ctx, req.(*DeleteMSRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetAllMSUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMSUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetAllMSUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetAllMSUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetAllMSUserList(ctx, req.(*GetAllMSUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetMSUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMSUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetMSUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetMSUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetMSUserDetail(ctx, req.(*GetMSUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetSelfMSUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelfMSUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetSelfMSUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetSelfMSUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetSelfMSUserDetail(ctx, req.(*GetSelfMSUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_AddMSUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMSUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).AddMSUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/AddMSUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).AddMSUser(ctx, req.(*AddMSUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_UpdateMSUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMSUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).UpdateMSUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/UpdateMSUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).UpdateMSUser(ctx, req.(*UpdateMSUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_DeleteMSUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMSUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).DeleteMSUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/DeleteMSUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).DeleteMSUser(ctx, req.(*DeleteMSUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_SwitchMSUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchMSUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).SwitchMSUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/SwitchMSUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).SwitchMSUserStatus(ctx, req.(*SwitchMSUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetAllMSIpWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMSIpWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetAllMSIpWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetAllMSIpWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetAllMSIpWhiteList(ctx, req.(*GetAllMSIpWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetMSIpWhiteListDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMSIpWhiteListDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetMSIpWhiteListDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetMSIpWhiteListDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetMSIpWhiteListDetail(ctx, req.(*GetMSIpWhiteListDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_AddMSIpWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMSIpWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).AddMSIpWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/AddMSIpWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).AddMSIpWhiteList(ctx, req.(*AddMSIpWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_UpdateMSIpWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMSIpWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).UpdateMSIpWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/UpdateMSIpWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).UpdateMSIpWhiteList(ctx, req.(*UpdateMSIpWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_DeleteMSIpWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMSIpWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).DeleteMSIpWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/DeleteMSIpWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).DeleteMSIpWhiteList(ctx, req.(*DeleteMSIpWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetAllMSOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMSOperationLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetAllMSOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetAllMSOperationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetAllMSOperationLog(ctx, req.(*GetAllMSOperationLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetMSOperationLogDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMSOperationLogDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetMSOperationLogDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetMSOperationLogDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetMSOperationLogDetail(ctx, req.(*GetMSOperationLogDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_DeleteMSOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMSOperationLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).DeleteMSOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/DeleteMSOperationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).DeleteMSOperationLog(ctx, req.(*DeleteMSOperationLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetAllMSLoginRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMSLoginRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetAllMSLoginRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetAllMSLoginRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetAllMSLoginRecord(ctx, req.(*GetAllMSLoginRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetAllMSAlbumCate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMSAlbumCateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetAllMSAlbumCate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetAllMSAlbumCate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetAllMSAlbumCate(ctx, req.(*GetAllMSAlbumCateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_DeleteMSAlbumCate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMSAlbumCateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).DeleteMSAlbumCate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/DeleteMSAlbumCate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).DeleteMSAlbumCate(ctx, req.(*DeleteMSAlbumCateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_AddMSAlbumCate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMSAlbumCateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).AddMSAlbumCate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/AddMSAlbumCate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).AddMSAlbumCate(ctx, req.(*AddMSAlbumCateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_UpdateMSAlbumCate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMSAlbumCateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).UpdateMSAlbumCate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/UpdateMSAlbumCate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).UpdateMSAlbumCate(ctx, req.(*UpdateMSAlbumCateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetAllMSAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMSAlbumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetAllMSAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetAllMSAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetAllMSAlbum(ctx, req.(*GetAllMSAlbumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_DeleteMSAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMSAlbumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).DeleteMSAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/DeleteMSAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).DeleteMSAlbum(ctx, req.(*DeleteMSAlbumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_UpdateMSAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMSAlbumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).UpdateMSAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/UpdateMSAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).UpdateMSAlbum(ctx, req.(*UpdateMSAlbumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_StatsMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsMSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).StatsMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/StatsMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).StatsMS(ctx, req.(*StatsMSReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtService_ServiceDesc is the grpc.ServiceDesc for MgmtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.mgmtService",
	HandlerType: (*MgmtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AfterConnect",
			Handler:    _MgmtService_AfterConnect_Handler,
		},
		{
			MethodName: "AfterDisconnect",
			Handler:    _MgmtService_AfterDisconnect_Handler,
		},
		{
			MethodName: "GetServerConfig",
			Handler:    _MgmtService_GetServerConfig_Handler,
		},
		{
			MethodName: "GetServerAllConfig",
			Handler:    _MgmtService_GetServerAllConfig_Handler,
		},
		{
			MethodName: "UpdateServerConfig",
			Handler:    _MgmtService_UpdateServerConfig_Handler,
		},
		{
			MethodName: "GetAppLineConfig",
			Handler:    _MgmtService_GetAppLineConfig_Handler,
		},
		{
			MethodName: "UpdateAppLineConfig",
			Handler:    _MgmtService_UpdateAppLineConfig_Handler,
		},
		{
			MethodName: "LoginMS",
			Handler:    _MgmtService_LoginMS_Handler,
		},
		{
			MethodName: "HealthMS",
			Handler:    _MgmtService_HealthMS_Handler,
		},
		{
			MethodName: "ConfigMS",
			Handler:    _MgmtService_ConfigMS_Handler,
		},
		{
			MethodName: "GetAllMSMenuList",
			Handler:    _MgmtService_GetAllMSMenuList_Handler,
		},
		{
			MethodName: "GetMyMSMenuList",
			Handler:    _MgmtService_GetMyMSMenuList_Handler,
		},
		{
			MethodName: "GetMSMenuDetail",
			Handler:    _MgmtService_GetMSMenuDetail_Handler,
		},
		{
			MethodName: "AddMSMenu",
			Handler:    _MgmtService_AddMSMenu_Handler,
		},
		{
			MethodName: "UpdateMSMenu",
			Handler:    _MgmtService_UpdateMSMenu_Handler,
		},
		{
			MethodName: "DeleteMSMenu",
			Handler:    _MgmtService_DeleteMSMenu_Handler,
		},
		{
			MethodName: "GetAllMSApiPathList",
			Handler:    _MgmtService_GetAllMSApiPathList_Handler,
		},
		{
			MethodName: "GetMyMSApiPathList",
			Handler:    _MgmtService_GetMyMSApiPathList_Handler,
		},
		{
			MethodName: "GetMSApiPathDetail",
			Handler:    _MgmtService_GetMSApiPathDetail_Handler,
		},
		{
			MethodName: "AddMSApiPath",
			Handler:    _MgmtService_AddMSApiPath_Handler,
		},
		{
			MethodName: "UpdateMSApiPath",
			Handler:    _MgmtService_UpdateMSApiPath_Handler,
		},
		{
			MethodName: "DeleteMSApiPath",
			Handler:    _MgmtService_DeleteMSApiPath_Handler,
		},
		{
			MethodName: "GetAllMSRoleList",
			Handler:    _MgmtService_GetAllMSRoleList_Handler,
		},
		{
			MethodName: "GetMSRoleDetail",
			Handler:    _MgmtService_GetMSRoleDetail_Handler,
		},
		{
			MethodName: "AddMSRole",
			Handler:    _MgmtService_AddMSRole_Handler,
		},
		{
			MethodName: "UpdateMSRole",
			Handler:    _MgmtService_UpdateMSRole_Handler,
		},
		{
			MethodName: "DeleteMSRole",
			Handler:    _MgmtService_DeleteMSRole_Handler,
		},
		{
			MethodName: "GetAllMSUserList",
			Handler:    _MgmtService_GetAllMSUserList_Handler,
		},
		{
			MethodName: "GetMSUserDetail",
			Handler:    _MgmtService_GetMSUserDetail_Handler,
		},
		{
			MethodName: "GetSelfMSUserDetail",
			Handler:    _MgmtService_GetSelfMSUserDetail_Handler,
		},
		{
			MethodName: "AddMSUser",
			Handler:    _MgmtService_AddMSUser_Handler,
		},
		{
			MethodName: "UpdateMSUser",
			Handler:    _MgmtService_UpdateMSUser_Handler,
		},
		{
			MethodName: "DeleteMSUser",
			Handler:    _MgmtService_DeleteMSUser_Handler,
		},
		{
			MethodName: "SwitchMSUserStatus",
			Handler:    _MgmtService_SwitchMSUserStatus_Handler,
		},
		{
			MethodName: "GetAllMSIpWhiteList",
			Handler:    _MgmtService_GetAllMSIpWhiteList_Handler,
		},
		{
			MethodName: "GetMSIpWhiteListDetail",
			Handler:    _MgmtService_GetMSIpWhiteListDetail_Handler,
		},
		{
			MethodName: "AddMSIpWhiteList",
			Handler:    _MgmtService_AddMSIpWhiteList_Handler,
		},
		{
			MethodName: "UpdateMSIpWhiteList",
			Handler:    _MgmtService_UpdateMSIpWhiteList_Handler,
		},
		{
			MethodName: "DeleteMSIpWhiteList",
			Handler:    _MgmtService_DeleteMSIpWhiteList_Handler,
		},
		{
			MethodName: "GetAllMSOperationLog",
			Handler:    _MgmtService_GetAllMSOperationLog_Handler,
		},
		{
			MethodName: "GetMSOperationLogDetail",
			Handler:    _MgmtService_GetMSOperationLogDetail_Handler,
		},
		{
			MethodName: "DeleteMSOperationLog",
			Handler:    _MgmtService_DeleteMSOperationLog_Handler,
		},
		{
			MethodName: "GetAllMSLoginRecord",
			Handler:    _MgmtService_GetAllMSLoginRecord_Handler,
		},
		{
			MethodName: "GetAllMSAlbumCate",
			Handler:    _MgmtService_GetAllMSAlbumCate_Handler,
		},
		{
			MethodName: "DeleteMSAlbumCate",
			Handler:    _MgmtService_DeleteMSAlbumCate_Handler,
		},
		{
			MethodName: "AddMSAlbumCate",
			Handler:    _MgmtService_AddMSAlbumCate_Handler,
		},
		{
			MethodName: "UpdateMSAlbumCate",
			Handler:    _MgmtService_UpdateMSAlbumCate_Handler,
		},
		{
			MethodName: "GetAllMSAlbum",
			Handler:    _MgmtService_GetAllMSAlbum_Handler,
		},
		{
			MethodName: "DeleteMSAlbum",
			Handler:    _MgmtService_DeleteMSAlbum_Handler,
		},
		{
			MethodName: "UpdateMSAlbum",
			Handler:    _MgmtService_UpdateMSAlbum_Handler,
		},
		{
			MethodName: "StatsMS",
			Handler:    _MgmtService_StatsMS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mgmt.proto",
}
