// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: mgmt.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MgmtServiceClient is the client API for MgmtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgmtServiceClient interface {
	AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error)
	AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetServerConfig(ctx context.Context, in *GetServerConfigReq, opts ...grpc.CallOption) (*GetServerConfigResp, error)
}

type mgmtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtServiceClient(cc grpc.ClientConnInterface) MgmtServiceClient {
	return &mgmtServiceClient{cc}
}

func (c *mgmtServiceClient) AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/AfterConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/AfterDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtServiceClient) GetServerConfig(ctx context.Context, in *GetServerConfigReq, opts ...grpc.CallOption) (*GetServerConfigResp, error) {
	out := new(GetServerConfigResp)
	err := c.cc.Invoke(ctx, "/pb.mgmtService/GetServerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtServiceServer is the server API for MgmtService service.
// All implementations must embed UnimplementedMgmtServiceServer
// for forward compatibility
type MgmtServiceServer interface {
	AfterConnect(context.Context, *AfterConnectReq) (*CommonResp, error)
	AfterDisconnect(context.Context, *AfterDisconnectReq) (*CommonResp, error)
	GetServerConfig(context.Context, *GetServerConfigReq) (*GetServerConfigResp, error)
	mustEmbedUnimplementedMgmtServiceServer()
}

// UnimplementedMgmtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMgmtServiceServer struct {
}

func (UnimplementedMgmtServiceServer) AfterConnect(context.Context, *AfterConnectReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterConnect not implemented")
}
func (UnimplementedMgmtServiceServer) AfterDisconnect(context.Context, *AfterDisconnectReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterDisconnect not implemented")
}
func (UnimplementedMgmtServiceServer) GetServerConfig(context.Context, *GetServerConfigReq) (*GetServerConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerConfig not implemented")
}
func (UnimplementedMgmtServiceServer) mustEmbedUnimplementedMgmtServiceServer() {}

// UnsafeMgmtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtServiceServer will
// result in compilation errors.
type UnsafeMgmtServiceServer interface {
	mustEmbedUnimplementedMgmtServiceServer()
}

func RegisterMgmtServiceServer(s grpc.ServiceRegistrar, srv MgmtServiceServer) {
	s.RegisterService(&MgmtService_ServiceDesc, srv)
}

func _MgmtService_AfterConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).AfterConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/AfterConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).AfterConnect(ctx, req.(*AfterConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_AfterDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterDisconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).AfterDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/AfterDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).AfterDisconnect(ctx, req.(*AfterDisconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtService_GetServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServiceServer).GetServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.mgmtService/GetServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServiceServer).GetServerConfig(ctx, req.(*GetServerConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtService_ServiceDesc is the grpc.ServiceDesc for MgmtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.mgmtService",
	HandlerType: (*MgmtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AfterConnect",
			Handler:    _MgmtService_AfterConnect_Handler,
		},
		{
			MethodName: "AfterDisconnect",
			Handler:    _MgmtService_AfterDisconnect_Handler,
		},
		{
			MethodName: "GetServerConfig",
			Handler:    _MgmtService_GetServerConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mgmt.proto",
}
