syntax = "proto3";
package pb;

message CommonReq {
  string userId = 1;
  string token = 2;

  string deviceModel = 11;
  string deviceId = 12;
  string osVersion = 13;
  string platform = 14;

  string appVersion = 21;
  string language = 22;

  bytes data = 31;

  string ip = 41;
  string userAgent = 42;
}

message CommonResp {
  enum Code {
    Success = 0;

    UnknownError = 1;
    InternalError = 2;
    RequestError = 3;
    AuthError = 4;
    ToastError = 5;
    AlertError = 7;
    RetryError = 8;
  }
  Code code = 1;
  optional string msg = 2;
  bytes data = 3;
}

enum PushEvent {
  // 消息推送
  PushMsgDataList = 0;
  // 通知推送
  PushNoticeDataList = 1;
  // 响应返回
  ReturnResponse = 2;
}

message PushBody {
  PushEvent event = 1;
  bytes data = 2;
}

// 客户端发送事件
enum RequestEvent {
  // 发送消息
  SendMsgList = 0;
  // 批量获取会话的消息seq
  SyncConvSeq = 1;
  // 批量同步消息列表
  SyncMsgList = 2;
  // 确认消费通知
  AckNotice = 3;
  // 获取一条消息
  GetMsgById = 4;
}

// 客户端发送的消息体
message RequestBody {
  RequestEvent event = 1;
  string reqId = 2;
  bytes data = 3;
}

// 服务端返回响应的消息体
message ResponseBody {
  RequestEvent event = 1;
  string reqId = 2;
  int32 code = 3;
  bytes data = 4;
}

message MsgData {
  message OfflinePush {
    string title = 1;
    string content = 2;
    string payload = 3;
  }
  message Options {
    // 服务端是否需要保存消息
    bool storageForServer = 1;
    // 客户端是否需要保存消息
    bool storageForClient = 2;
    // 是否需要解密 （端对端加密技术，服务端无法解密）
    bool needDecrypt = 3;
    // 是否需要离线推送
    bool offlinePush = 4;
    // 是否需要重新渲染会话
    bool updateConvMsg = 5;
    // 消息是否需要计入未读数
    bool updateUnreadCount = 6;
  }
  string clientMsgId = 1;
  string serverMsgId = 2;
  string clientTime = 3;
  string serverTime = 4;

  string senderId = 11;
  bytes senderInfo = 12;

  string convId = 21;
  repeated string atUsers = 22;

  int32 contentType = 31;
  bytes content = 32;
  string seq = 33;

  Options options = 41;
  OfflinePush offlinePush = 42;

  bytes ext = 100;
}

message MsgDataList {
  repeated MsgData msgDataList = 1;
}

//通知数据
message NoticeData {
  message Options {
    // 客户端是否需要保存消息
    bool storageForClient = 1;
    // 是否需要重新渲染会话
    bool updateConvMsg = 2;
    // 只推送在线用户一次
    bool onlinePushOnce = 3;
  }
  // 会话信息
  string convId = 1; // 会话id (notice:$noticeId)
  int32 unreadCount = 2; // 会话未读数
  // 未读数量是绝对值还是增量
  bool unreadAbsolute = 3;

  // 消息信息
  string noticeId = 11;
  string createTime = 12;
  string title = 13; // 消息标题(显示在会话列表)
  int32 contentType = 14; // 通知数据类型
  bytes content = 15; // 消息数据

  // 附加信息
  Options options = 21; // 通知选项

  // 扩展信息
  bytes ext = 31; // 扩展字段
}

message NoticeDataList {
  repeated NoticeData noticeDataList = 1;
}

message SendMsgListReq {
  CommonReq commonReq = 1;
  repeated MsgData msgDataList = 2;
  optional int32 deliverAfter = 11;
}

message SendMsgListResp {
  CommonResp commonResp = 1;
}

message BatchGetMsgListByConvIdReq {
  message Item {
    string convId = 1;
    repeated string seqList = 2;
  }
  CommonReq commonReq = 1;
  repeated Item items = 2;
  bool push = 3;
}

message GetMsgListResp {
  CommonResp commonResp = 1;
  repeated MsgData msgDataList = 2;
}

message GetMsgByIdReq {
  CommonReq commonReq = 1;
  optional string serverMsgId = 2;
  optional string clientMsgId = 3;
  bool push = 4;
}

message GetMsgByIdResp {
  CommonResp commonResp = 1;
  MsgData msgData = 2;
}

message BatchGetConvSeqReq {
  CommonReq commonReq = 1;
  repeated string convIdList = 2;
}

message BatchGetConvSeqResp {
  CommonResp commonResp = 1;
  message ConvSeq {
    string convId = 1;
    string minSeq = 2;
    string maxSeq = 3;
    string updateTime = 4;
  }
  map<string, ConvSeq> convSeqMap = 2;
}

//AckNoticeDataReq 确认通知数据
message AckNoticeDataReq {
  CommonReq commonReq = 1;
  repeated string noticeIds = 2;
}

message AckNoticeDataResp {
  CommonResp commonResp = 1;
}