// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: xx.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XxServiceClient is the client API for XxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XxServiceClient interface {
	//Register 注册用户
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	//GetUser 获取用户信息
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	//Login 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	//UpdateUser 更新用户信息
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	//SearchUser 搜索用户
	SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
	//GetFriend 获取好友
	GetFriend(ctx context.Context, in *GetFriendReq, opts ...grpc.CallOption) (*GetFriendResp, error)
	//CreateFriend 添加好友
	CreateFriend(ctx context.Context, in *CreateFriendReq, opts ...grpc.CallOption) (*CreateFriendResp, error)
	//UpdateFriend 更新好友
	UpdateFriend(ctx context.Context, in *UpdateFriendReq, opts ...grpc.CallOption) (*UpdateFriendResp, error)
	//DeleteFriend 删除好友
	DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
	//CreateGroup 创建群组
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	//GetGroup 获取群组
	GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error)
	//InviteGroup 邀请加入群组
	InviteGroup(ctx context.Context, in *InviteGroupReq, opts ...grpc.CallOption) (*InviteGroupResp, error)
	//UpdateGroup 更新群组
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error)
	//QuitGroupMember 退出群组
	QuitGroupMember(ctx context.Context, in *QuitGroupMemberReq, opts ...grpc.CallOption) (*QuitGroupMemberResp, error)
	//KickGroupMember 踢出群组
	KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error)
	//ClearGroupMember 清空群组成员
	ClearGroupMember(ctx context.Context, in *ClearGroupMemberReq, opts ...grpc.CallOption) (*ClearGroupMemberResp, error)
}

type xxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXxServiceClient(cc grpc.ClientConnInterface) XxServiceClient {
	return &xxServiceClient{cc}
}

func (c *xxServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	out := new(SearchUserResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) GetFriend(ctx context.Context, in *GetFriendReq, opts ...grpc.CallOption) (*GetFriendResp, error) {
	out := new(GetFriendResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/GetFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) CreateFriend(ctx context.Context, in *CreateFriendReq, opts ...grpc.CallOption) (*CreateFriendResp, error) {
	out := new(CreateFriendResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/CreateFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) UpdateFriend(ctx context.Context, in *UpdateFriendReq, opts ...grpc.CallOption) (*UpdateFriendResp, error) {
	out := new(UpdateFriendResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/UpdateFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	out := new(DeleteFriendResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error) {
	out := new(GetGroupResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) InviteGroup(ctx context.Context, in *InviteGroupReq, opts ...grpc.CallOption) (*InviteGroupResp, error) {
	out := new(InviteGroupResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/InviteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error) {
	out := new(UpdateGroupResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) QuitGroupMember(ctx context.Context, in *QuitGroupMemberReq, opts ...grpc.CallOption) (*QuitGroupMemberResp, error) {
	out := new(QuitGroupMemberResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/QuitGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error) {
	out := new(KickGroupMemberResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/KickGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xxServiceClient) ClearGroupMember(ctx context.Context, in *ClearGroupMemberReq, opts ...grpc.CallOption) (*ClearGroupMemberResp, error) {
	out := new(ClearGroupMemberResp)
	err := c.cc.Invoke(ctx, "/pb.xxService/ClearGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XxServiceServer is the server API for XxService service.
// All implementations must embed UnimplementedXxServiceServer
// for forward compatibility
type XxServiceServer interface {
	//Register 注册用户
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	//GetUser 获取用户信息
	GetUser(context.Context, *GetUserReq) (*GetUserResp, error)
	//Login 登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	//UpdateUser 更新用户信息
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	//SearchUser 搜索用户
	SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error)
	//GetFriend 获取好友
	GetFriend(context.Context, *GetFriendReq) (*GetFriendResp, error)
	//CreateFriend 添加好友
	CreateFriend(context.Context, *CreateFriendReq) (*CreateFriendResp, error)
	//UpdateFriend 更新好友
	UpdateFriend(context.Context, *UpdateFriendReq) (*UpdateFriendResp, error)
	//DeleteFriend 删除好友
	DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error)
	//CreateGroup 创建群组
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	//GetGroup 获取群组
	GetGroup(context.Context, *GetGroupReq) (*GetGroupResp, error)
	//InviteGroup 邀请加入群组
	InviteGroup(context.Context, *InviteGroupReq) (*InviteGroupResp, error)
	//UpdateGroup 更新群组
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error)
	//QuitGroupMember 退出群组
	QuitGroupMember(context.Context, *QuitGroupMemberReq) (*QuitGroupMemberResp, error)
	//KickGroupMember 踢出群组
	KickGroupMember(context.Context, *KickGroupMemberReq) (*KickGroupMemberResp, error)
	//ClearGroupMember 清空群组成员
	ClearGroupMember(context.Context, *ClearGroupMemberReq) (*ClearGroupMemberResp, error)
	mustEmbedUnimplementedXxServiceServer()
}

// UnimplementedXxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedXxServiceServer struct {
}

func (UnimplementedXxServiceServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedXxServiceServer) GetUser(context.Context, *GetUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedXxServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedXxServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedXxServiceServer) SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedXxServiceServer) GetFriend(context.Context, *GetFriendReq) (*GetFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriend not implemented")
}
func (UnimplementedXxServiceServer) CreateFriend(context.Context, *CreateFriendReq) (*CreateFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriend not implemented")
}
func (UnimplementedXxServiceServer) UpdateFriend(context.Context, *UpdateFriendReq) (*UpdateFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriend not implemented")
}
func (UnimplementedXxServiceServer) DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedXxServiceServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedXxServiceServer) GetGroup(context.Context, *GetGroupReq) (*GetGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedXxServiceServer) InviteGroup(context.Context, *InviteGroupReq) (*InviteGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteGroup not implemented")
}
func (UnimplementedXxServiceServer) UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedXxServiceServer) QuitGroupMember(context.Context, *QuitGroupMemberReq) (*QuitGroupMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitGroupMember not implemented")
}
func (UnimplementedXxServiceServer) KickGroupMember(context.Context, *KickGroupMemberReq) (*KickGroupMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickGroupMember not implemented")
}
func (UnimplementedXxServiceServer) ClearGroupMember(context.Context, *ClearGroupMemberReq) (*ClearGroupMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearGroupMember not implemented")
}
func (UnimplementedXxServiceServer) mustEmbedUnimplementedXxServiceServer() {}

// UnsafeXxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XxServiceServer will
// result in compilation errors.
type UnsafeXxServiceServer interface {
	mustEmbedUnimplementedXxServiceServer()
}

func RegisterXxServiceServer(s grpc.ServiceRegistrar, srv XxServiceServer) {
	s.RegisterService(&XxService_ServiceDesc, srv)
}

func _XxService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).SearchUser(ctx, req.(*SearchUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_GetFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).GetFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/GetFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).GetFriend(ctx, req.(*GetFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_CreateFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).CreateFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/CreateFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).CreateFriend(ctx, req.(*CreateFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_UpdateFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).UpdateFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/UpdateFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).UpdateFriend(ctx, req.(*UpdateFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).DeleteFriend(ctx, req.(*DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).GetGroup(ctx, req.(*GetGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_InviteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).InviteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/InviteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).InviteGroup(ctx, req.(*InviteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_QuitGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).QuitGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/QuitGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).QuitGroupMember(ctx, req.(*QuitGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_KickGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).KickGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/KickGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).KickGroupMember(ctx, req.(*KickGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XxService_ClearGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XxServiceServer).ClearGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.xxService/ClearGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XxServiceServer).ClearGroupMember(ctx, req.(*ClearGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

// XxService_ServiceDesc is the grpc.ServiceDesc for XxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.xxService",
	HandlerType: (*XxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _XxService_Register_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _XxService_GetUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _XxService_Login_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _XxService_UpdateUser_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _XxService_SearchUser_Handler,
		},
		{
			MethodName: "GetFriend",
			Handler:    _XxService_GetFriend_Handler,
		},
		{
			MethodName: "CreateFriend",
			Handler:    _XxService_CreateFriend_Handler,
		},
		{
			MethodName: "UpdateFriend",
			Handler:    _XxService_UpdateFriend_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _XxService_DeleteFriend_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _XxService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _XxService_GetGroup_Handler,
		},
		{
			MethodName: "InviteGroup",
			Handler:    _XxService_InviteGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _XxService_UpdateGroup_Handler,
		},
		{
			MethodName: "QuitGroupMember",
			Handler:    _XxService_QuitGroupMember_Handler,
		},
		{
			MethodName: "KickGroupMember",
			Handler:    _XxService_KickGroupMember_Handler,
		},
		{
			MethodName: "ClearGroupMember",
			Handler:    _XxService_ClearGroupMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xx.proto",
}
