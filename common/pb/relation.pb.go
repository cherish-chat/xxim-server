// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.5
// source: relation.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestAddFriendStatus int32

const (
	// 未处理
	RequestAddFriendStatus_Unhandled RequestAddFriendStatus = 0
	// 已同意
	RequestAddFriendStatus_Agreed RequestAddFriendStatus = 1
	// 已拒绝
	RequestAddFriendStatus_Refused RequestAddFriendStatus = 2
)

// Enum value maps for RequestAddFriendStatus.
var (
	RequestAddFriendStatus_name = map[int32]string{
		0: "Unhandled",
		1: "Agreed",
		2: "Refused",
	}
	RequestAddFriendStatus_value = map[string]int32{
		"Unhandled": 0,
		"Agreed":    1,
		"Refused":   2,
	}
)

func (x RequestAddFriendStatus) Enum() *RequestAddFriendStatus {
	p := new(RequestAddFriendStatus)
	*p = x
	return p
}

func (x RequestAddFriendStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestAddFriendStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_relation_proto_enumTypes[0].Descriptor()
}

func (RequestAddFriendStatus) Type() protoreflect.EnumType {
	return &file_relation_proto_enumTypes[0]
}

func (x RequestAddFriendStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestAddFriendStatus.Descriptor instead.
func (RequestAddFriendStatus) EnumDescriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{0}
}

type AreBlackListReq_Option int32

const (
	AreBlackListReq_Or      AreBlackListReq_Option = 0 // A拉黑B 或者 B拉黑A
	AreBlackListReq_And     AreBlackListReq_Option = 1 // A拉黑B 并且 B拉黑A
	AreBlackListReq_ABlackB AreBlackListReq_Option = 2 // A拉黑B
	AreBlackListReq_BBlackA AreBlackListReq_Option = 3 // B拉黑A
)

// Enum value maps for AreBlackListReq_Option.
var (
	AreBlackListReq_Option_name = map[int32]string{
		0: "Or",
		1: "And",
		2: "ABlackB",
		3: "BBlackA",
	}
	AreBlackListReq_Option_value = map[string]int32{
		"Or":      0,
		"And":     1,
		"ABlackB": 2,
		"BBlackA": 3,
	}
)

func (x AreBlackListReq_Option) Enum() *AreBlackListReq_Option {
	p := new(AreBlackListReq_Option)
	*p = x
	return p
}

func (x AreBlackListReq_Option) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AreBlackListReq_Option) Descriptor() protoreflect.EnumDescriptor {
	return file_relation_proto_enumTypes[1].Descriptor()
}

func (AreBlackListReq_Option) Type() protoreflect.EnumType {
	return &file_relation_proto_enumTypes[1]
}

func (x AreBlackListReq_Option) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AreBlackListReq_Option.Descriptor instead.
func (AreBlackListReq_Option) EnumDescriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{2, 0}
}

type GetFriendListReq_Opt int32

const (
	GetFriendListReq_WithBaseInfo GetFriendListReq_Opt = 0 // 带用户的基本信息
	GetFriendListReq_OnlyId       GetFriendListReq_Opt = 1 // 只有用户id
)

// Enum value maps for GetFriendListReq_Opt.
var (
	GetFriendListReq_Opt_name = map[int32]string{
		0: "WithBaseInfo",
		1: "OnlyId",
	}
	GetFriendListReq_Opt_value = map[string]int32{
		"WithBaseInfo": 0,
		"OnlyId":       1,
	}
)

func (x GetFriendListReq_Opt) Enum() *GetFriendListReq_Opt {
	p := new(GetFriendListReq_Opt)
	*p = x
	return p
}

func (x GetFriendListReq_Opt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetFriendListReq_Opt) Descriptor() protoreflect.EnumDescriptor {
	return file_relation_proto_enumTypes[2].Descriptor()
}

func (GetFriendListReq_Opt) Type() protoreflect.EnumType {
	return &file_relation_proto_enumTypes[2]
}

func (x GetFriendListReq_Opt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetFriendListReq_Opt.Descriptor instead.
func (GetFriendListReq_Opt) EnumDescriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{24, 0}
}

//A和BList是不是好友
type AreFriendsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	A         string     `protobuf:"bytes,2,opt,name=a,proto3" json:"a"`
	BList     []string   `protobuf:"bytes,3,rep,name=bList,proto3" json:"bList"`
}

func (x *AreFriendsReq) Reset() {
	*x = AreFriendsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreFriendsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreFriendsReq) ProtoMessage() {}

func (x *AreFriendsReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreFriendsReq.ProtoReflect.Descriptor instead.
func (*AreFriendsReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{0}
}

func (x *AreFriendsReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *AreFriendsReq) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *AreFriendsReq) GetBList() []string {
	if x != nil {
		return x.BList
	}
	return nil
}

type AreFriendsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp     `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	FriendList map[string]bool `protobuf:"bytes,2,rep,name=friendList,proto3" json:"friendList" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AreFriendsResp) Reset() {
	*x = AreFriendsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreFriendsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreFriendsResp) ProtoMessage() {}

func (x *AreFriendsResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreFriendsResp.ProtoReflect.Descriptor instead.
func (*AreFriendsResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{1}
}

func (x *AreFriendsResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *AreFriendsResp) GetFriendList() map[string]bool {
	if x != nil {
		return x.FriendList
	}
	return nil
}

//A和BList是不是有拉黑关系
type AreBlackListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	A         string     `protobuf:"bytes,2,opt,name=a,proto3" json:"a"`
	BList     []string   `protobuf:"bytes,3,rep,name=bList,proto3" json:"bList"`
}

func (x *AreBlackListReq) Reset() {
	*x = AreBlackListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreBlackListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreBlackListReq) ProtoMessage() {}

func (x *AreBlackListReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreBlackListReq.ProtoReflect.Descriptor instead.
func (*AreBlackListReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{2}
}

func (x *AreBlackListReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *AreBlackListReq) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *AreBlackListReq) GetBList() []string {
	if x != nil {
		return x.BList
	}
	return nil
}

type AreBlackListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp     `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	BlackList  map[string]bool `protobuf:"bytes,2,rep,name=blackList,proto3" json:"blackList" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AreBlackListResp) Reset() {
	*x = AreBlackListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreBlackListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreBlackListResp) ProtoMessage() {}

func (x *AreBlackListResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreBlackListResp.ProtoReflect.Descriptor instead.
func (*AreBlackListResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{3}
}

func (x *AreBlackListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *AreBlackListResp) GetBlackList() map[string]bool {
	if x != nil {
		return x.BlackList
	}
	return nil
}

type RequestAddFriendExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`
}

func (x *RequestAddFriendExtra) Reset() {
	*x = RequestAddFriendExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAddFriendExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAddFriendExtra) ProtoMessage() {}

func (x *RequestAddFriendExtra) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAddFriendExtra.ProtoReflect.Descriptor instead.
func (*RequestAddFriendExtra) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{4}
}

func (x *RequestAddFriendExtra) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RequestAddFriendExtra) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

//RequestAddFriendReq 请求添加好友
type RequestAddFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	To        string     `protobuf:"bytes,2,opt,name=to,proto3" json:"to"`
	// 附加消息
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
}

func (x *RequestAddFriendReq) Reset() {
	*x = RequestAddFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAddFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAddFriendReq) ProtoMessage() {}

func (x *RequestAddFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAddFriendReq.ProtoReflect.Descriptor instead.
func (*RequestAddFriendReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{5}
}

func (x *RequestAddFriendReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *RequestAddFriendReq) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *RequestAddFriendReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RequestAddFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *RequestAddFriendResp) Reset() {
	*x = RequestAddFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAddFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAddFriendResp) ProtoMessage() {}

func (x *RequestAddFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAddFriendResp.ProtoReflect.Descriptor instead.
func (*RequestAddFriendResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{6}
}

func (x *RequestAddFriendResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//AcceptAddFriendReq 接受添加好友
type AcceptAddFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq   *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	ApplyUserId string     `protobuf:"bytes,2,opt,name=applyUserId,proto3" json:"applyUserId"`   // 申请人id
	RequestId   *string    `protobuf:"bytes,3,opt,name=requestId,proto3,oneof" json:"requestId"` // 申请id
}

func (x *AcceptAddFriendReq) Reset() {
	*x = AcceptAddFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptAddFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptAddFriendReq) ProtoMessage() {}

func (x *AcceptAddFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptAddFriendReq.ProtoReflect.Descriptor instead.
func (*AcceptAddFriendReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{7}
}

func (x *AcceptAddFriendReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *AcceptAddFriendReq) GetApplyUserId() string {
	if x != nil {
		return x.ApplyUserId
	}
	return ""
}

func (x *AcceptAddFriendReq) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type AcceptAddFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *AcceptAddFriendResp) Reset() {
	*x = AcceptAddFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptAddFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptAddFriendResp) ProtoMessage() {}

func (x *AcceptAddFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptAddFriendResp.ProtoReflect.Descriptor instead.
func (*AcceptAddFriendResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{8}
}

func (x *AcceptAddFriendResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//RejectAddFriendReq 拒绝添加好友
type RejectAddFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq   *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	ApplyUserId string     `protobuf:"bytes,2,opt,name=applyUserId,proto3" json:"applyUserId"` // 申请人id
	RequestId   string     `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId"`     // 申请id
	Block       bool       `protobuf:"varint,4,opt,name=block,proto3" json:"block"`            // 是否拉黑
}

func (x *RejectAddFriendReq) Reset() {
	*x = RejectAddFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectAddFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectAddFriendReq) ProtoMessage() {}

func (x *RejectAddFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectAddFriendReq.ProtoReflect.Descriptor instead.
func (*RejectAddFriendReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{9}
}

func (x *RejectAddFriendReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *RejectAddFriendReq) GetApplyUserId() string {
	if x != nil {
		return x.ApplyUserId
	}
	return ""
}

func (x *RejectAddFriendReq) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RejectAddFriendReq) GetBlock() bool {
	if x != nil {
		return x.Block
	}
	return false
}

type RejectAddFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *RejectAddFriendResp) Reset() {
	*x = RejectAddFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectAddFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectAddFriendResp) ProtoMessage() {}

func (x *RejectAddFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectAddFriendResp.ProtoReflect.Descriptor instead.
func (*RejectAddFriendResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{10}
}

func (x *RejectAddFriendResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//GetFriendCountReq 获取好友总数
type GetFriendCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
}

func (x *GetFriendCountReq) Reset() {
	*x = GetFriendCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendCountReq) ProtoMessage() {}

func (x *GetFriendCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendCountReq.ProtoReflect.Descriptor instead.
func (*GetFriendCountReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{11}
}

func (x *GetFriendCountReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

type GetFriendCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	Count      int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *GetFriendCountResp) Reset() {
	*x = GetFriendCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendCountResp) ProtoMessage() {}

func (x *GetFriendCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendCountResp.ProtoReflect.Descriptor instead.
func (*GetFriendCountResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{12}
}

func (x *GetFriendCountResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetFriendCountResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

//拉黑用户
type BlockUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	UserId    string     `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId"`
}

func (x *BlockUserReq) Reset() {
	*x = BlockUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserReq) ProtoMessage() {}

func (x *BlockUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserReq.ProtoReflect.Descriptor instead.
func (*BlockUserReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{13}
}

func (x *BlockUserReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *BlockUserReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type BlockUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *BlockUserResp) Reset() {
	*x = BlockUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserResp) ProtoMessage() {}

func (x *BlockUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserResp.ProtoReflect.Descriptor instead.
func (*BlockUserResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{14}
}

func (x *BlockUserResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//删除拉黑用户
type DeleteBlockUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	UserId    string     `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId"`
}

func (x *DeleteBlockUserReq) Reset() {
	*x = DeleteBlockUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBlockUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlockUserReq) ProtoMessage() {}

func (x *DeleteBlockUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlockUserReq.ProtoReflect.Descriptor instead.
func (*DeleteBlockUserReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteBlockUserReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *DeleteBlockUserReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DeleteBlockUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *DeleteBlockUserResp) Reset() {
	*x = DeleteBlockUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBlockUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlockUserResp) ProtoMessage() {}

func (x *DeleteBlockUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlockUserResp.ProtoReflect.Descriptor instead.
func (*DeleteBlockUserResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteBlockUserResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//解除好友关系
type DeleteFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	UserId    string     `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId"`
	Block     bool       `protobuf:"varint,3,opt,name=block,proto3" json:"block"` // 是否拉黑
}

func (x *DeleteFriendReq) Reset() {
	*x = DeleteFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendReq) ProtoMessage() {}

func (x *DeleteFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendReq.ProtoReflect.Descriptor instead.
func (*DeleteFriendReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteFriendReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *DeleteFriendReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteFriendReq) GetBlock() bool {
	if x != nil {
		return x.Block
	}
	return false
}

type DeleteFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *DeleteFriendResp) Reset() {
	*x = DeleteFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendResp) ProtoMessage() {}

func (x *DeleteFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendResp.ProtoReflect.Descriptor instead.
func (*DeleteFriendResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteFriendResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type SingleConvSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvId string `protobuf:"bytes,1,opt,name=convId,proto3" json:"convId"`
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId"`
	// 设为置顶
	IsTop *bool `protobuf:"varint,3,opt,name=isTop,proto3,oneof" json:"isTop"`
	// 设为免打扰
	IsDisturb *bool `protobuf:"varint,4,opt,name=isDisturb,proto3,oneof" json:"isDisturb"`
	// 消息通知设置 （当免打扰时，此设置无效）
	// 通知显示消息预览
	NotifyPreview *bool `protobuf:"varint,5,opt,name=notifyPreview,proto3,oneof" json:"notifyPreview"`
	// 通知声音
	NotifySound *bool `protobuf:"varint,6,opt,name=notifySound,proto3,oneof" json:"notifySound"`
	// 通知自定义声音
	NotifyCustomSound *string `protobuf:"bytes,7,opt,name=notifyCustomSound,proto3,oneof" json:"notifyCustomSound"`
	// 通知震动
	NotifyVibrate *bool `protobuf:"varint,8,opt,name=notifyVibrate,proto3,oneof" json:"notifyVibrate"`
	// 屏蔽此人消息
	IsShield *bool `protobuf:"varint,9,opt,name=isShield,proto3,oneof" json:"isShield"`
	// 聊天背景
	ChatBg *string `protobuf:"bytes,10,opt,name=chatBg,proto3,oneof" json:"chatBg"`
}

func (x *SingleConvSetting) Reset() {
	*x = SingleConvSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleConvSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleConvSetting) ProtoMessage() {}

func (x *SingleConvSetting) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleConvSetting.ProtoReflect.Descriptor instead.
func (*SingleConvSetting) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{19}
}

func (x *SingleConvSetting) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *SingleConvSetting) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SingleConvSetting) GetIsTop() bool {
	if x != nil && x.IsTop != nil {
		return *x.IsTop
	}
	return false
}

func (x *SingleConvSetting) GetIsDisturb() bool {
	if x != nil && x.IsDisturb != nil {
		return *x.IsDisturb
	}
	return false
}

func (x *SingleConvSetting) GetNotifyPreview() bool {
	if x != nil && x.NotifyPreview != nil {
		return *x.NotifyPreview
	}
	return false
}

func (x *SingleConvSetting) GetNotifySound() bool {
	if x != nil && x.NotifySound != nil {
		return *x.NotifySound
	}
	return false
}

func (x *SingleConvSetting) GetNotifyCustomSound() string {
	if x != nil && x.NotifyCustomSound != nil {
		return *x.NotifyCustomSound
	}
	return ""
}

func (x *SingleConvSetting) GetNotifyVibrate() bool {
	if x != nil && x.NotifyVibrate != nil {
		return *x.NotifyVibrate
	}
	return false
}

func (x *SingleConvSetting) GetIsShield() bool {
	if x != nil && x.IsShield != nil {
		return *x.IsShield
	}
	return false
}

func (x *SingleConvSetting) GetChatBg() string {
	if x != nil && x.ChatBg != nil {
		return *x.ChatBg
	}
	return ""
}

//设置单聊设置
type SetSingleConvSettingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq         `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	Setting   *SingleConvSetting `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting"`
}

func (x *SetSingleConvSettingReq) Reset() {
	*x = SetSingleConvSettingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSingleConvSettingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSingleConvSettingReq) ProtoMessage() {}

func (x *SetSingleConvSettingReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSingleConvSettingReq.ProtoReflect.Descriptor instead.
func (*SetSingleConvSettingReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{20}
}

func (x *SetSingleConvSettingReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *SetSingleConvSettingReq) GetSetting() *SingleConvSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type SetSingleConvSettingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
}

func (x *SetSingleConvSettingResp) Reset() {
	*x = SetSingleConvSettingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSingleConvSettingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSingleConvSettingResp) ProtoMessage() {}

func (x *SetSingleConvSettingResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSingleConvSettingResp.ProtoReflect.Descriptor instead.
func (*SetSingleConvSettingResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{21}
}

func (x *SetSingleConvSettingResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

//获取单聊设置
type GetSingleConvSettingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	ConvId    string     `protobuf:"bytes,2,opt,name=convId,proto3" json:"convId"`
	UserId    string     `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId"`
}

func (x *GetSingleConvSettingReq) Reset() {
	*x = GetSingleConvSettingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleConvSettingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleConvSettingReq) ProtoMessage() {}

func (x *GetSingleConvSettingReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleConvSettingReq.ProtoReflect.Descriptor instead.
func (*GetSingleConvSettingReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{22}
}

func (x *GetSingleConvSettingReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetSingleConvSettingReq) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *GetSingleConvSettingReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetSingleConvSettingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp        `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	Setting    *SingleConvSetting `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting"`
}

func (x *GetSingleConvSettingResp) Reset() {
	*x = GetSingleConvSettingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleConvSettingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleConvSettingResp) ProtoMessage() {}

func (x *GetSingleConvSettingResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleConvSettingResp.ProtoReflect.Descriptor instead.
func (*GetSingleConvSettingResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{23}
}

func (x *GetSingleConvSettingResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetSingleConvSettingResp) GetSetting() *SingleConvSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

//GetFriendListReq 获取好友列表
type GetFriendListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 分页
	Page *Page                `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	Opt  GetFriendListReq_Opt `protobuf:"varint,10,opt,name=opt,proto3,enum=pb.GetFriendListReq_Opt" json:"opt"`
}

func (x *GetFriendListReq) Reset() {
	*x = GetFriendListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendListReq) ProtoMessage() {}

func (x *GetFriendListReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendListReq.ProtoReflect.Descriptor instead.
func (*GetFriendListReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{24}
}

func (x *GetFriendListReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetFriendListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetFriendListReq) GetOpt() GetFriendListReq_Opt {
	if x != nil {
		return x.Opt
	}
	return GetFriendListReq_WithBaseInfo
}

type GetFriendListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp              `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	Ids        []string                 `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids"`
	UserMap    map[string]*UserBaseInfo `protobuf:"bytes,3,rep,name=userMap,proto3" json:"userMap" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetFriendListResp) Reset() {
	*x = GetFriendListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendListResp) ProtoMessage() {}

func (x *GetFriendListResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendListResp.ProtoReflect.Descriptor instead.
func (*GetFriendListResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{25}
}

func (x *GetFriendListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetFriendListResp) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetFriendListResp) GetUserMap() map[string]*UserBaseInfo {
	if x != nil {
		return x.UserMap
	}
	return nil
}

// 获取我的好友通知列表
type GetMyFriendEventListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReq *CommonReq `protobuf:"bytes,1,opt,name=commonReq,proto3" json:"commonReq"`
	// 分页
	PageIndex string `protobuf:"bytes,2,opt,name=pageIndex,proto3" json:"pageIndex"` // 上次请求的pageIndex 第一次请求传空
}

func (x *GetMyFriendEventListReq) Reset() {
	*x = GetMyFriendEventListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyFriendEventListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyFriendEventListReq) ProtoMessage() {}

func (x *GetMyFriendEventListReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyFriendEventListReq.ProtoReflect.Descriptor instead.
func (*GetMyFriendEventListReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{26}
}

func (x *GetMyFriendEventListReq) GetCommonReq() *CommonReq {
	if x != nil {
		return x.CommonReq
	}
	return nil
}

func (x *GetMyFriendEventListReq) GetPageIndex() string {
	if x != nil {
		return x.PageIndex
	}
	return ""
}

type FriendEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 发起人
	FromUserId string `protobuf:"bytes,1,opt,name=fromUserId,proto3" json:"fromUserId"`
	// 接收人
	ToUserId string `protobuf:"bytes,2,opt,name=toUserId,proto3" json:"toUserId"`
	// 申请状态
	Status RequestAddFriendStatus `protobuf:"varint,3,opt,name=status,proto3,enum=pb.RequestAddFriendStatus" json:"status"`
	// 申请时间
	CreateTime string `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime"`
	// 更新时间
	UpdateTime string `protobuf:"bytes,5,opt,name=updateTime,proto3" json:"updateTime"`
	// 附加信息
	Extra []*RequestAddFriendExtra `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra"`
}

func (x *FriendEvent) Reset() {
	*x = FriendEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendEvent) ProtoMessage() {}

func (x *FriendEvent) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendEvent.ProtoReflect.Descriptor instead.
func (*FriendEvent) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{27}
}

func (x *FriendEvent) GetFromUserId() string {
	if x != nil {
		return x.FromUserId
	}
	return ""
}

func (x *FriendEvent) GetToUserId() string {
	if x != nil {
		return x.ToUserId
	}
	return ""
}

func (x *FriendEvent) GetStatus() RequestAddFriendStatus {
	if x != nil {
		return x.Status
	}
	return RequestAddFriendStatus_Unhandled
}

func (x *FriendEvent) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *FriendEvent) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *FriendEvent) GetExtra() []*RequestAddFriendExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetMyFriendEventListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp       *CommonResp    `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp"`
	FriendNotifyList []*FriendEvent `protobuf:"bytes,2,rep,name=friendNotifyList,proto3" json:"friendNotifyList"`
	PageIndex        string         `protobuf:"bytes,3,opt,name=pageIndex,proto3" json:"pageIndex"` // 下次请求的pageIndex
}

func (x *GetMyFriendEventListResp) Reset() {
	*x = GetMyFriendEventListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyFriendEventListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyFriendEventListResp) ProtoMessage() {}

func (x *GetMyFriendEventListResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyFriendEventListResp.ProtoReflect.Descriptor instead.
func (*GetMyFriendEventListResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{28}
}

func (x *GetMyFriendEventListResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetMyFriendEventListResp) GetFriendNotifyList() []*FriendEvent {
	if x != nil {
		return x.FriendNotifyList
	}
	return nil
}

func (x *GetMyFriendEventListResp) GetPageIndex() string {
	if x != nil {
		return x.PageIndex
	}
	return ""
}

var File_relation_proto protoreflect.FileDescriptor

var file_relation_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x70, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x08, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x0d, 0x41, 0x72, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0e, 0x41,
	0x72, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a,
	0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x97, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x10, 0x03, 0x22, 0xc3, 0x01, 0x0a, 0x10, 0x41,
	0x72, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x41, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x49, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x13, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x97, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x45, 0x0a, 0x13, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x40, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x22, 0x5a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x53,
	0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2b,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x59, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x45, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x42, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xe9, 0x03, 0x0a, 0x11, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x73, 0x44,
	0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0b,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x69, 0x73, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06,
	0x52, 0x08, 0x69, 0x73, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x42, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x42, 0x67, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69,
	0x73, 0x54, 0x6f, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x44, 0x69, 0x73, 0x74, 0x75,
	0x72, 0x62, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x73, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x42, 0x67, 0x22, 0x77, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x4a, 0x0a,
	0x18, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x76, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x7b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a,
	0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xae,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x2e, 0x4f, 0x70, 0x74, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x23, 0x0a, 0x03, 0x4f, 0x70,
	0x74, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x64, 0x10, 0x01, 0x22,
	0xe1, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x1a, 0x4c, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xee, 0x01, 0x0a, 0x0b, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xa5, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4d, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x2a, 0x40, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x64, 0x10, 0x02, 0x32, 0x93, 0x07, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x72, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x72, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x65, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41,
	0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x16,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_relation_proto_rawDescOnce sync.Once
	file_relation_proto_rawDescData = file_relation_proto_rawDesc
)

func file_relation_proto_rawDescGZIP() []byte {
	file_relation_proto_rawDescOnce.Do(func() {
		file_relation_proto_rawDescData = protoimpl.X.CompressGZIP(file_relation_proto_rawDescData)
	})
	return file_relation_proto_rawDescData
}

var file_relation_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_relation_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_relation_proto_goTypes = []interface{}{
	(RequestAddFriendStatus)(0),      // 0: pb.RequestAddFriendStatus
	(AreBlackListReq_Option)(0),      // 1: pb.AreBlackListReq.Option
	(GetFriendListReq_Opt)(0),        // 2: pb.GetFriendListReq.Opt
	(*AreFriendsReq)(nil),            // 3: pb.AreFriendsReq
	(*AreFriendsResp)(nil),           // 4: pb.AreFriendsResp
	(*AreBlackListReq)(nil),          // 5: pb.AreBlackListReq
	(*AreBlackListResp)(nil),         // 6: pb.AreBlackListResp
	(*RequestAddFriendExtra)(nil),    // 7: pb.RequestAddFriendExtra
	(*RequestAddFriendReq)(nil),      // 8: pb.RequestAddFriendReq
	(*RequestAddFriendResp)(nil),     // 9: pb.RequestAddFriendResp
	(*AcceptAddFriendReq)(nil),       // 10: pb.AcceptAddFriendReq
	(*AcceptAddFriendResp)(nil),      // 11: pb.AcceptAddFriendResp
	(*RejectAddFriendReq)(nil),       // 12: pb.RejectAddFriendReq
	(*RejectAddFriendResp)(nil),      // 13: pb.RejectAddFriendResp
	(*GetFriendCountReq)(nil),        // 14: pb.GetFriendCountReq
	(*GetFriendCountResp)(nil),       // 15: pb.GetFriendCountResp
	(*BlockUserReq)(nil),             // 16: pb.BlockUserReq
	(*BlockUserResp)(nil),            // 17: pb.BlockUserResp
	(*DeleteBlockUserReq)(nil),       // 18: pb.DeleteBlockUserReq
	(*DeleteBlockUserResp)(nil),      // 19: pb.DeleteBlockUserResp
	(*DeleteFriendReq)(nil),          // 20: pb.DeleteFriendReq
	(*DeleteFriendResp)(nil),         // 21: pb.DeleteFriendResp
	(*SingleConvSetting)(nil),        // 22: pb.SingleConvSetting
	(*SetSingleConvSettingReq)(nil),  // 23: pb.SetSingleConvSettingReq
	(*SetSingleConvSettingResp)(nil), // 24: pb.SetSingleConvSettingResp
	(*GetSingleConvSettingReq)(nil),  // 25: pb.GetSingleConvSettingReq
	(*GetSingleConvSettingResp)(nil), // 26: pb.GetSingleConvSettingResp
	(*GetFriendListReq)(nil),         // 27: pb.GetFriendListReq
	(*GetFriendListResp)(nil),        // 28: pb.GetFriendListResp
	(*GetMyFriendEventListReq)(nil),  // 29: pb.GetMyFriendEventListReq
	(*FriendEvent)(nil),              // 30: pb.FriendEvent
	(*GetMyFriendEventListResp)(nil), // 31: pb.GetMyFriendEventListResp
	nil,                              // 32: pb.AreFriendsResp.FriendListEntry
	nil,                              // 33: pb.AreBlackListResp.BlackListEntry
	nil,                              // 34: pb.GetFriendListResp.UserMapEntry
	(*CommonReq)(nil),                // 35: pb.CommonReq
	(*CommonResp)(nil),               // 36: pb.CommonResp
	(*Page)(nil),                     // 37: pb.Page
	(*UserBaseInfo)(nil),             // 38: pb.UserBaseInfo
}
var file_relation_proto_depIdxs = []int32{
	35, // 0: pb.AreFriendsReq.commonReq:type_name -> pb.CommonReq
	36, // 1: pb.AreFriendsResp.commonResp:type_name -> pb.CommonResp
	32, // 2: pb.AreFriendsResp.friendList:type_name -> pb.AreFriendsResp.FriendListEntry
	35, // 3: pb.AreBlackListReq.commonReq:type_name -> pb.CommonReq
	36, // 4: pb.AreBlackListResp.commonResp:type_name -> pb.CommonResp
	33, // 5: pb.AreBlackListResp.blackList:type_name -> pb.AreBlackListResp.BlackListEntry
	35, // 6: pb.RequestAddFriendReq.commonReq:type_name -> pb.CommonReq
	36, // 7: pb.RequestAddFriendResp.commonResp:type_name -> pb.CommonResp
	35, // 8: pb.AcceptAddFriendReq.commonReq:type_name -> pb.CommonReq
	36, // 9: pb.AcceptAddFriendResp.commonResp:type_name -> pb.CommonResp
	35, // 10: pb.RejectAddFriendReq.commonReq:type_name -> pb.CommonReq
	36, // 11: pb.RejectAddFriendResp.commonResp:type_name -> pb.CommonResp
	35, // 12: pb.GetFriendCountReq.commonReq:type_name -> pb.CommonReq
	36, // 13: pb.GetFriendCountResp.commonResp:type_name -> pb.CommonResp
	35, // 14: pb.BlockUserReq.commonReq:type_name -> pb.CommonReq
	36, // 15: pb.BlockUserResp.commonResp:type_name -> pb.CommonResp
	35, // 16: pb.DeleteBlockUserReq.commonReq:type_name -> pb.CommonReq
	36, // 17: pb.DeleteBlockUserResp.commonResp:type_name -> pb.CommonResp
	35, // 18: pb.DeleteFriendReq.commonReq:type_name -> pb.CommonReq
	36, // 19: pb.DeleteFriendResp.commonResp:type_name -> pb.CommonResp
	35, // 20: pb.SetSingleConvSettingReq.commonReq:type_name -> pb.CommonReq
	22, // 21: pb.SetSingleConvSettingReq.setting:type_name -> pb.SingleConvSetting
	36, // 22: pb.SetSingleConvSettingResp.commonResp:type_name -> pb.CommonResp
	35, // 23: pb.GetSingleConvSettingReq.commonReq:type_name -> pb.CommonReq
	36, // 24: pb.GetSingleConvSettingResp.commonResp:type_name -> pb.CommonResp
	22, // 25: pb.GetSingleConvSettingResp.setting:type_name -> pb.SingleConvSetting
	35, // 26: pb.GetFriendListReq.commonReq:type_name -> pb.CommonReq
	37, // 27: pb.GetFriendListReq.page:type_name -> pb.Page
	2,  // 28: pb.GetFriendListReq.opt:type_name -> pb.GetFriendListReq.Opt
	36, // 29: pb.GetFriendListResp.commonResp:type_name -> pb.CommonResp
	34, // 30: pb.GetFriendListResp.userMap:type_name -> pb.GetFriendListResp.UserMapEntry
	35, // 31: pb.GetMyFriendEventListReq.commonReq:type_name -> pb.CommonReq
	0,  // 32: pb.FriendEvent.status:type_name -> pb.RequestAddFriendStatus
	7,  // 33: pb.FriendEvent.extra:type_name -> pb.RequestAddFriendExtra
	36, // 34: pb.GetMyFriendEventListResp.commonResp:type_name -> pb.CommonResp
	30, // 35: pb.GetMyFriendEventListResp.friendNotifyList:type_name -> pb.FriendEvent
	38, // 36: pb.GetFriendListResp.UserMapEntry.value:type_name -> pb.UserBaseInfo
	3,  // 37: pb.relationService.AreFriends:input_type -> pb.AreFriendsReq
	5,  // 38: pb.relationService.AreBlackList:input_type -> pb.AreBlackListReq
	8,  // 39: pb.relationService.RequestAddFriend:input_type -> pb.RequestAddFriendReq
	10, // 40: pb.relationService.AcceptAddFriend:input_type -> pb.AcceptAddFriendReq
	12, // 41: pb.relationService.RejectAddFriend:input_type -> pb.RejectAddFriendReq
	14, // 42: pb.relationService.GetFriendCount:input_type -> pb.GetFriendCountReq
	16, // 43: pb.relationService.BlockUser:input_type -> pb.BlockUserReq
	18, // 44: pb.relationService.DeleteBlockUser:input_type -> pb.DeleteBlockUserReq
	20, // 45: pb.relationService.DeleteFriend:input_type -> pb.DeleteFriendReq
	23, // 46: pb.relationService.SetSingleConvSetting:input_type -> pb.SetSingleConvSettingReq
	25, // 47: pb.relationService.GetSingleConvSetting:input_type -> pb.GetSingleConvSettingReq
	27, // 48: pb.relationService.GetFriendList:input_type -> pb.GetFriendListReq
	29, // 49: pb.relationService.GetMyFriendEventList:input_type -> pb.GetMyFriendEventListReq
	4,  // 50: pb.relationService.AreFriends:output_type -> pb.AreFriendsResp
	6,  // 51: pb.relationService.AreBlackList:output_type -> pb.AreBlackListResp
	9,  // 52: pb.relationService.RequestAddFriend:output_type -> pb.RequestAddFriendResp
	11, // 53: pb.relationService.AcceptAddFriend:output_type -> pb.AcceptAddFriendResp
	13, // 54: pb.relationService.RejectAddFriend:output_type -> pb.RejectAddFriendResp
	15, // 55: pb.relationService.GetFriendCount:output_type -> pb.GetFriendCountResp
	17, // 56: pb.relationService.BlockUser:output_type -> pb.BlockUserResp
	19, // 57: pb.relationService.DeleteBlockUser:output_type -> pb.DeleteBlockUserResp
	21, // 58: pb.relationService.DeleteFriend:output_type -> pb.DeleteFriendResp
	24, // 59: pb.relationService.SetSingleConvSetting:output_type -> pb.SetSingleConvSettingResp
	26, // 60: pb.relationService.GetSingleConvSetting:output_type -> pb.GetSingleConvSettingResp
	28, // 61: pb.relationService.GetFriendList:output_type -> pb.GetFriendListResp
	31, // 62: pb.relationService.GetMyFriendEventList:output_type -> pb.GetMyFriendEventListResp
	50, // [50:63] is the sub-list for method output_type
	37, // [37:50] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_relation_proto_init() }
func file_relation_proto_init() {
	if File_relation_proto != nil {
		return
	}
	file_common_proto_init()
	file_im_proto_init()
	file_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_relation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreFriendsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreFriendsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreBlackListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreBlackListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAddFriendExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAddFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAddFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptAddFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptAddFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectAddFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectAddFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBlockUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBlockUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleConvSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSingleConvSettingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSingleConvSettingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleConvSettingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleConvSettingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyFriendEventListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyFriendEventListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_relation_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_relation_proto_msgTypes[19].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relation_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_relation_proto_goTypes,
		DependencyIndexes: file_relation_proto_depIdxs,
		EnumInfos:         file_relation_proto_enumTypes,
		MessageInfos:      file_relation_proto_msgTypes,
	}.Build()
	File_relation_proto = out.File
	file_relation_proto_rawDesc = nil
	file_relation_proto_goTypes = nil
	file_relation_proto_depIdxs = nil
}
