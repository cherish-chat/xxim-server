syntax = "proto3";
package pb;
option go_package = "./pb";
import "common.proto";

// 服务器通过websocket发送给客户端的消息体
message ConnMQBody {
  // 推送事件
  enum Event {
    Unknown = 0;
  }
  Event event = 1;
  bytes data = 2;
}

message ConnParam {
  string userId = 1;
  string token = 2;
  string deviceId = 3;
  string platform = 4;
  string ips = 5;
  string networkUsed = 6;
  map<string, string> headers = 7;
  string podIp = 8;
}

// 获取用户的连接 可以用userId、platforms、devices过滤
message GetUserConnReq {
  repeated string userIds = 1;
  repeated string platforms = 2;
  repeated string devices = 3;
}

message GetUserConnResp {
  CommonResp commonResp = 1;
  repeated ConnParam connParams = 2;
}

message KickUserConnReq {
  GetUserConnReq getUserConnReq = 1; // 搜索用户的连接
}

message KickUserConnResp {
  CommonResp commonResp = 1;
}

enum PushEvent {
  PushMsgDataList = 0;
  RequestAddFriend = 1;
}

message PushBody {
  PushEvent event = 1;
  bytes data = 2;
}

message SendMsgReq {
  GetUserConnReq getUserConnReq = 1; // 搜索用户的连接
  PushEvent event = 2;
  bytes data = 3; // 发送的数据
}

message SendMsgResp {
  CommonResp commonResp = 1;
  // 发送成功的连接
  repeated ConnParam successConnParams = 2;
  // 发送失败的连接
  repeated ConnParam failedConnParams = 3;
}

message AfterConnectReq {
  ConnParam connParam = 1;
  string connectedAt = 2;
}

message AfterDisconnectReq {
  ConnParam connParam = 1;
  string connectedAt = 2;
  string disconnectedAt = 3;
}

service connService {
  rpc KickUserConn(KickUserConnReq) returns (KickUserConnResp);
  rpc GetUserConn(GetUserConnReq) returns (GetUserConnResp);
  rpc SendMsg(SendMsgReq) returns (SendMsgResp);
}