syntax = "proto3";
package pb;
option go_package = "./pb";
import "common.proto";

// 服务器通过websocket发送给客户端的消息体
message ConnMQBody {
  // 推送事件
  enum Event {
    Unknown = 0;
  }
  Event event = 1;
  bytes data = 2;
}

message ConnParam {
  string userId = 1;
  string token = 2;
  string deviceId = 3;
  string platform = 4;
  string ips = 5;
  string networkUsed = 6;
  map<string, string> headers = 7;
  string podIp = 8;
  string deviceModel = 9;
  string osVersion = 10;
  string appVersion = 11;
  string language = 12;
  int64 timestamp = 13;
  optional string aesKey = 14; // 32位
  optional string aesIv = 15; // 16位
}

// 获取用户的连接 可以用userId、platforms、devices过滤
message GetUserConnReq {
  repeated string userIds = 1;
  repeated string platforms = 2;
  repeated string devices = 3;
}

message GetUserConnResp {
  CommonResp commonResp = 1;
  repeated ConnParam connParams = 2;
}

message KickUserConnReq {
  GetUserConnReq getUserConnReq = 1; // 搜索用户的连接
}

message KickUserConnResp {
  CommonResp commonResp = 1;
}

enum PushEvent {
  // 消息推送
  PushMsgDataList = 0;
  // 通知推送
  PushNoticeData = 1;
  // 响应返回
  PushResponseBody = 2;
}

message PushBody {
  PushEvent event = 1;
  bytes data = 2;
}

// 客户端发送的消息体
message RequestBody {
  string reqId = 1;
  string method = 2;
  bytes data = 3;
}

// 服务端返回响应的消息体
message ResponseBody {
  enum Code {
    Success = 0;

    UnknownError = 1;
    InternalError = 2;
    RequestError = 3;
    AuthError = 4;
    ToastError = 5;
    AlertError = 7;
    RetryError = 8;
  }
  string reqId = 1;
  string method = 2;
  Code code = 3;
  bytes data = 4;
}

message SetCxnParamsReq {
  string packageId = 1;
  string platform = 2;
  string deviceId = 3;
  string deviceModel = 4;
  string osVersion = 5;
  string appVersion = 6;
  string language = 7;
  string networkUsed = 8;
  bytes aesKey = 9; // 用于加密请求和响应
  bytes aesIv = 10; // 用于加密请求和响应
  bytes ext = 11;
}

message SetCxnParamsResp {
  string platform = 1;
  string deviceId = 2;
  string deviceModel = 3;
  string osVersion = 4;
  string appVersion = 5;
  string language = 6;
  string networkUsed = 7;
  optional bytes aesKey = 8; // 用于加密请求和响应
  optional bytes aesIv = 9; // 用于加密请求和响应
  bytes ext = 11;
}

message SetUserParamsReq {
  string userId = 1;
  string token = 2;
  bytes ext = 11;
}

message SetUserParamsResp {
  string userId = 1;
  string token = 2;
  bytes ext = 11;
}

message SendMsgReq {
  GetUserConnReq getUserConnReq = 1; // 搜索用户的连接
  PushEvent event = 2;
  bytes data = 3; // 发送的数据
}

message SendMsgResp {
  CommonResp commonResp = 1;
  // 发送成功的连接
  repeated ConnParam successConnParams = 2;
  // 发送失败的连接
  repeated ConnParam failedConnParams = 3;
}

message AfterConnectReq {
  ConnParam connParam = 1;
  string connectedAt = 2;
}

message AfterDisconnectReq {
  ConnParam connParam = 1;
  string connectedAt = 2;
  string disconnectedAt = 3;
}

//KeepAliveReq 心跳
message KeepAliveReq {
  CommonReq commonReq = 1;
  repeated string convIdList = 2;
}

message KeepAliveResp {
  CommonResp commonResp = 1;
}
service connService {
  rpc KickUserConn(KickUserConnReq) returns (KickUserConnResp);
  rpc GetUserConn(GetUserConnReq) returns (GetUserConnResp);
  rpc SendMsg(SendMsgReq) returns (SendMsgResp);
  rpc KeepAlive(KeepAliveReq) returns (KeepAliveResp);
}