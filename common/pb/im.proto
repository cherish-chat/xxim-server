syntax = "proto3";
package pb;
option go_package = "./pb";
import "common.proto";
import "conn.proto";

message ImMQBody {
  // 推送事件
  enum Event {
    Unknown = 0;
  }
  Event event = 1;
  bytes data = 2;
}

message BeforeConnectReq {
  ConnParam connParam = 1;
}

message BeforeConnectResp {
  int32 code = 1;
  string msg = 2;
}

message GetUserLatestConnReq {
  string userId = 1;
}

message GetUserLatestConnResp {
  string userId = 1;
  string ip = 2;
  IpRegion ipRegion = 3;
  string connectedAt = 4;
  string disconnectedAt = 5;
  string platform = 6;
  string deviceId = 7;
}

//BeforeRequestReq
message BeforeRequestReq {
  CommonReq commonReq = 1;
  string method = 2;
}

message BeforeRequestResp {
  CommonResp commonResp = 1;
}

//batchGetUserLatestConnReq 批量获取用户最新连接信息
message BatchGetUserLatestConnReq {
  repeated string userIds = 1;
}

//batchGetUserLatestConnResp 批量获取用户最新连接信息
message BatchGetUserLatestConnResp {
  CommonResp commonResp = 1;
  repeated GetUserLatestConnResp userLatestConns = 2;
}

//MsgNotifyOpt 消息通知选项
message MsgNotifyOpt {
  bool noDisturb = 1;
  bool preview = 2; // 是否预览
  bool sound = 3; // 是否声音
  string soundName = 4; // 声音名称
  bool vibrate = 5; // 是否震动
}

//GetAllConvIdOfUserReq 获取用户所有会话id
message GetAllConvIdOfUserReq {
  CommonReq commonReq = 1;
  string userId = 2;
}

//GetAllConvIdOfUserResp 获取用户所有会话id
message GetAllConvIdOfUserResp {
  CommonResp commonResp = 1;
  repeated string convIds = 2;
  repeated string groupIds = 3;
  repeated string friendIds = 4;
  repeated string noticeIds = 5;
}

message ConvSetting {
  string userId = 1;
  string convId = 2;
  // 置顶
  optional bool isTop = 3;
  // 设为免打扰
  optional bool isDisturb = 4;
  // 消息通知设置 （当免打扰时，此设置无效）
  // 通知显示消息预览
  optional bool notifyPreview = 5;
  // 通知声音
  optional bool notifySound = 6;
  // 通知自定义声音
  optional string notifyCustomSound = 7;
  // 通知震动
  optional bool notifyVibrate = 8;
  // 屏蔽消息
  optional bool isShield = 9;
  // 聊天背景
  optional string chatBg = 10;
}

//UpdateConvSettingReq 更新会话设置
message UpdateConvSettingReq {
  CommonReq commonReq = 1;
  ConvSetting convSetting = 2;
}

//UpdateConvSettingResp 更新会话设置
message UpdateConvSettingResp {
  CommonResp commonResp = 1;
}

//GetConvSettingReq 获取会话设置
message GetConvSettingReq {
  CommonReq commonReq = 1;
  repeated string convIds = 2;
}

//GetConvSettingResp 获取会话设置
message GetConvSettingResp {
  CommonResp commonResp = 1;
  repeated ConvSetting convSettings = 2;
}

service imService {
  rpc BeforeConnect(BeforeConnectReq) returns (BeforeConnectResp);
  rpc AfterConnect(AfterConnectReq) returns (CommonResp);
  rpc AfterDisconnect(AfterDisconnectReq) returns (CommonResp);
  rpc KeepAlive(KeepAliveReq) returns (KeepAliveResp);
  rpc KickUserConn(KickUserConnReq) returns (KickUserConnResp);
  rpc GetUserConn(GetUserConnReq) returns (GetUserConnResp);
  rpc BeforeRequest(BeforeRequestReq) returns (BeforeRequestResp);
  rpc GetUserLatestConn(GetUserLatestConnReq) returns (GetUserLatestConnResp);
  rpc BatchGetUserLatestConn(BatchGetUserLatestConnReq) returns (BatchGetUserLatestConnResp);
  rpc SendMsg(SendMsgReq) returns (SendMsgResp);
  rpc GetAllConvIdOfUser(GetAllConvIdOfUserReq) returns (GetAllConvIdOfUserResp);
  rpc UpdateConvSetting(UpdateConvSettingReq) returns (UpdateConvSettingResp);
  rpc GetConvSetting(GetConvSettingReq) returns (GetConvSettingResp);
}