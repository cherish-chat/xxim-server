syntax = "proto3";
package pb;
option go_package = "./pb";
import "common.proto";
import "im.proto";
import "user.proto";

//A和BList是不是好友
message AreFriendsReq {
  CommonReq commonReq = 1;
  string a = 2;
  repeated string bList = 3;
}

message AreFriendsResp {
  CommonResp commonResp = 1;
  map<string, bool> friendList = 2;
}

//A和BList是不是有拉黑关系
message AreBlackListReq {
  CommonReq commonReq = 1;
  enum Option {
    Or = 0; // A拉黑B 或者 B拉黑A
    And = 1; // A拉黑B 并且 B拉黑A
    ABlackB = 2; // A拉黑B
    BBlackA = 3; // B拉黑A
  }
  string a = 2;
  repeated string bList = 3;
}

message AreBlackListResp {
  CommonResp commonResp = 1;
  map<string, bool> blackList = 2;
}
enum RequestAddFriendStatus {
  // 未处理
  Unhandled = 0;
  // 已同意
  Agreed = 1;
  // 已拒绝
  Refused = 2;
}
message RequestAddFriendExtra {
  string userId = 1;
  string content = 2;
}
//RequestAddFriendReq 请求添加好友
message RequestAddFriendReq {
  CommonReq commonReq = 1;
  string to = 2;
  // 附加消息
  string message = 3;
}

message RequestAddFriendResp {
  CommonResp commonResp = 1;
}

//AcceptAddFriendReq 接受添加好友
message AcceptAddFriendReq {
  CommonReq commonReq = 1;
  string applyUserId = 2; // 申请人id
  optional string requestId = 3; // 申请id
  optional string sendTextMsg = 4; // 发送的文本消息
}

message AcceptAddFriendResp {
  CommonResp commonResp = 1;
}

//RejectAddFriendReq 拒绝添加好友
message RejectAddFriendReq {
  CommonReq commonReq = 1;
  string applyUserId = 2; // 申请人id
  string requestId = 3; // 申请id
  bool block = 4; // 是否拉黑
}

message RejectAddFriendResp {
  CommonResp commonResp = 1;
}

//GetFriendCountReq 获取好友总数
message GetFriendCountReq {
  CommonReq commonReq = 1;
}

message GetFriendCountResp {
  CommonResp commonResp = 1;
  int32 count = 2;
}

//拉黑用户
message BlockUserReq {
  CommonReq commonReq = 1;
  string userId = 2;
}

message BlockUserResp {
  CommonResp commonResp = 1;
}

//删除拉黑用户
message DeleteBlockUserReq {
  CommonReq commonReq = 1;
  string userId = 2;
}

message DeleteBlockUserResp {
  CommonResp commonResp = 1;
}

//解除好友关系
message DeleteFriendReq {
  CommonReq commonReq = 1;
  string userId = 2;
  bool block = 3; // 是否拉黑
}

message DeleteFriendResp {
  CommonResp commonResp = 1;
}

//GetFriendListReq 获取好友列表
message GetFriendListReq {
  CommonReq commonReq = 1;
  // 分页
  Page page = 2;
  enum Opt {
    WithBaseInfo = 0; // 带用户的基本信息
    OnlyId = 1; // 只有用户id
  }
  Opt opt = 10;
}

message GetFriendListResp {
  CommonResp commonResp = 1;
  repeated string ids = 2;
  map<string, UserBaseInfo> userMap = 3;
}

// 获取我的好友通知列表
message GetMyFriendEventListReq {
  CommonReq commonReq = 1;
  // 分页
  string pageIndex = 2; // 上次请求的pageIndex 第一次请求传空
}

message FriendEvent {
  // 发起人
  string fromUserId = 1;
  // 接收人
  string toUserId = 2;
  // 另一个人的用户信息
  UserBaseInfo otherUserInfo = 3;
  // 申请状态
  RequestAddFriendStatus status = 4;
  // 申请时间
  string createTime = 5;
  // 更新时间
  string updateTime = 6;
  // 附加信息
  RequestAddFriendExtra extra = 7;
}

message GetMyFriendEventListResp {
  CommonResp commonResp = 1;
  repeated FriendEvent friendNotifyList = 2;
  string pageIndex = 3; // 下次请求的pageIndex
}

//分页获取某人的好友列表
message GetFriendListByUserIdReq {
  CommonReq commonReq = 1;
  // 分页
  Page page = 2;
  map<string, string> filter = 3;
  string userId = 4;
}
message GetFriendListByUserIdItem {
  // 用户id
  string userId = 1;
  // 头像
  string avatar = 2;
  // 昵称
  string nickname = 3;
  // 角色
  string role = 4;
}
message GetFriendListByUserIdResp {
  CommonResp commonResp = 1;
  repeated GetFriendListByUserIdItem friendList = 2;
  int64 total = 3;
}

service relationService {
  rpc AreFriends(AreFriendsReq) returns (AreFriendsResp) {}
  rpc AreBlackList(AreBlackListReq) returns (AreBlackListResp) {}
  rpc RequestAddFriend(RequestAddFriendReq) returns (RequestAddFriendResp) {}
  rpc AcceptAddFriend(AcceptAddFriendReq) returns (AcceptAddFriendResp) {}
  rpc RejectAddFriend(RejectAddFriendReq) returns (RejectAddFriendResp) {}
  rpc GetFriendCount(GetFriendCountReq) returns (GetFriendCountResp) {}
  rpc BlockUser(BlockUserReq) returns (BlockUserResp) {}
  rpc DeleteBlockUser(DeleteBlockUserReq) returns (DeleteBlockUserResp) {}
  rpc DeleteFriend(DeleteFriendReq) returns (DeleteFriendResp) {}
  rpc GetFriendList(GetFriendListReq) returns (GetFriendListResp) {}
  rpc GetMyFriendEventList(GetMyFriendEventListReq) returns (GetMyFriendEventListResp) {}

  rpc GetFriendListByUserId(GetFriendListByUserIdReq) returns (GetFriendListByUserIdResp) {}
}