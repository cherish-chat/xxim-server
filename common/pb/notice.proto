syntax = "proto3";
package pb;
option go_package = "./pb";
import "conn.proto";
import "common.proto";

//通知数据
message NoticeData {
  message Options {
    // 客户端是否需要保存消息
    bool storageForClient = 1;
    // 是否需要重新渲染会话
    bool updateConvMsg = 2;
    // 只推送在线用户一次
    bool onlinePushOnce = 3;
  }
  // 会话信息
  string convId = 1; // 会话id (notice:$noticeId)
  int32 unreadCount = 2; // 会话未读数
  // 未读数量是绝对值还是增量
  bool unreadAbsolute = 3;

  // 消息信息
  string noticeId = 11;
  string createTime = 12;
  string title = 13; // 消息标题(显示在会话列表)
  int32 contentType = 14; // 通知数据类型
  bytes content = 15; // 消息数据

  // 附加信息
  Options options = 21; // 通知选项

  // 扩展信息
  bytes ext = 31; // 扩展字段
}

message NoticeDataList {
  repeated NoticeData noticeDataList = 1;
}

//SendNoticeDataReq 发送通知数据
message SendNoticeDataReq {
  CommonReq commonReq = 1;
  NoticeData noticeData = 2;
  optional string userId = 3; // 指定用户id
  optional bool isBroadcast = 4; // 是否广播
  optional bool inserted = 5; // 是否已经插入（应该提前upsert数据 让程序可以查询到 查询成功后直接推送）
}

message SendNoticeDataResp {
  CommonResp commonResp = 1;
}

//PushNoticeDataReq 推送通知数据
message PushNoticeDataReq {
  CommonReq commonReq = 1;
  string noticeId = 2;
}

message PushNoticeDataResp {
  CommonResp commonResp = 1;
}

//GetNoticeDataReq 获取通知数据
message GetUserNoticeDataReq {
  CommonReq commonReq = 1;
  string userId = 2;
}

message GetUserNoticeDataResp {
  CommonResp commonResp = 1;
  repeated NoticeData noticeData = 2;
  bool push = 3;
}

//AckNoticeDataReq 确认通知数据
message AckNoticeDataReq {
  CommonReq commonReq = 1;
  repeated string noticeIds = 2;
}

message AckNoticeDataResp {
  CommonResp commonResp = 1;
}

//GetUserNoticeConvIdsReq 获取用户所有的通知号
message GetUserNoticeConvIdsReq {
  CommonReq commonReq = 1;
  string userId = 2;
}

message GetUserNoticeConvIdsResp {
  CommonResp commonResp = 1;
  repeated string convIds = 2;
}

//GetNoticeConvAllSubscribersReq 获取通知号所有的订阅者
message GetNoticeConvAllSubscribersReq {
  CommonReq commonReq = 1;
  string convId = 2;
}

message GetNoticeConvAllSubscribersResp {
  CommonResp commonResp = 1;
  repeated string userIds = 2;
}

message SetUserSubscriptionsReq {
  CommonReq commonReq = 1;
  repeated string userIds = 2;
}

service noticeService {
  //AfterConnect conn hook
  rpc AfterConnect(AfterConnectReq) returns (CommonResp);
  //AfterDisconnect conn hook
  rpc AfterDisconnect(AfterDisconnectReq) returns (CommonResp);
  //SendNoticeData 发送通知数据
  rpc SendNoticeData(SendNoticeDataReq) returns (SendNoticeDataResp);
  //PushNoticeData 推送通知数据
  rpc PushNoticeData(PushNoticeDataReq) returns (PushNoticeDataResp);
  //GetUserNoticeData 获取用户通知数据
  rpc GetUserNoticeData(GetUserNoticeDataReq) returns (GetUserNoticeDataResp);
  //AckNoticeData 确认通知数据
  rpc AckNoticeData(AckNoticeDataReq) returns (AckNoticeDataResp);
  //GetUserNoticeConvIds 获取用户所有的通知号
  rpc GetUserNoticeConvIds(GetUserNoticeConvIdsReq) returns (GetUserNoticeConvIdsResp);
  //GetNoticeConvAllSubscribers 获取通知号所有的订阅者
  rpc GetNoticeConvAllSubscribers(GetNoticeConvAllSubscribersReq) returns (GetNoticeConvAllSubscribersResp);
  //SetUserSubscriptions 设置用户订阅
  rpc SetUserSubscriptions(SetUserSubscriptionsReq) returns (CommonResp);
}