syntax = "proto3";
package pb;
option go_package = "./pb";
import "common.proto";
import "im.proto";
import "user.proto";
enum GroupDisturbOpt {
  // 接收消息但不提醒
  DisturbReceive = 0;
  // 收进群助手且不提醒
  DisturbFold = 1;
  // 屏蔽消息
  DisturbBlock = 2;
}
enum GroupRole {
  // 普通成员
  MEMBER = 0;
  // 管理员
  MANAGER = 1;
  // 群主
  OWNER = 2;
}
//CreateGroupReq 创建群聊
message CreateGroupReq {
  CommonReq commonReq = 1;
  // 拉人进群
  repeated string members = 2;
  // 群名称(可选参数)
  optional string name = 3;
  // 群头像(可选参数)
  optional string avatar = 4;
}

//CreateGroupResp 创建群聊
message CreateGroupResp {
  CommonResp commonResp = 1;
  // 群ID
  optional string groupId = 2;
  optional GroupBaseInfo info = 3;
}

//GetGroupHomeReq 获取群聊首页
message GetGroupHomeReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
}

//GetGroupHomeResp 获取群聊首页
message GetGroupHomeResp {
  CommonResp commonResp = 1;
  // 群ID
  string groupId = 2;
  // 群名称
  string name = 3;
  // 群头像
  string avatar = 4;
  // 创建日期
  string createdAt = 5;
  // 成员人数
  int32 memberCount = 6;
  // 群介绍
  string introduction = 7;
  // 成员统计
  message MemberStatistics {
    // 统计标题
    string title = 1;
    // 人数
    int32 count = 2;
    // 占百分比
    int32 percentage = 3;
  }
  repeated MemberStatistics memberStatistics = 21;
}

//InviteFriendToGroupReq 邀请好友进群
message InviteFriendToGroupReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 好友ID
  repeated string friendIds = 3;
  optional string minSeq = 4; // 设置所有成员的最小seq
}

//InviteFriendToGroupResp 邀请好友进群
message InviteFriendToGroupResp {
  CommonResp commonResp = 1;
}

//CreateGroupNoticeReq 创建群公告
message CreateGroupNoticeReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 公告标题
  string title = 3;
  // 公告内容
  string content = 4;
}

//CreateGroupNoticeResp 创建群公告
message CreateGroupNoticeResp {
  CommonResp commonResp = 1;
}

//DeleteGroupNoticeReq 删除群公告
message DeleteGroupNoticeReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 公告ID
  string noticeId = 3;
}

//DeleteGroupNoticeResp 删除群公告
message DeleteGroupNoticeResp {
  CommonResp commonResp = 1;
}

//EditGroupNoticeReq 编辑群公告
message EditGroupNoticeReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 公告ID
  string noticeId = 3;
  // 公告标题
  string title = 4;
  // 公告内容
  string content = 5;
}

//EditGroupNoticeResp 编辑群公告
message EditGroupNoticeResp {
  CommonResp commonResp = 1;
}

//GetGroupNoticeListReq 获取群公告列表
message GetGroupNoticeListReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 分页参数
  optional Page page = 3;
}

message GroupNotice {
  // 公告ID
  string noticeId = 1;
  // 公告标题
  string title = 2;
  // 公告内容
  string content = 3;
  // 创建日期
  string createdAt = 4;
}

//GetGroupNoticeListResp 获取群公告列表
message GetGroupNoticeListResp {
  CommonResp commonResp = 1;
  // 公告列表
  repeated GroupNotice groupNotices = 2;
}

//SetGroupMemberInfoReq 设置群成员信息
message SetGroupMemberInfoReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 群成员ID
  string memberId = 3;
  // 群备注
  optional string remark = 11;
  // 群角色
  optional GroupRole role = 12;
  // 解除禁言时间
  optional int64 unbanTime = 13;
}

//SetGroupMemberInfoResp 设置群成员信息
message SetGroupMemberInfoResp {
  CommonResp commonResp = 1;
}

//GetGroupMemberInfoReq 获取群成员信息
message GetGroupMemberInfoReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 群成员ID
  string memberId = 3;
}

message GroupMemberInfo {
  // 群id
  string groupId = 1;
  // 群成员id
  string memberId = 2;
  // 群内显示的昵称
  string remark = 3;
  // 群角色
  GroupRole role = 4;
  // 解封时间
  int64 unbanTime = 5;
  // 用户基本信息
  optional UserBaseInfo userBaseInfo = 11;
}

//MapGroupMemberInfoByIdsReq 批量获取群成员信息
message MapGroupMemberInfoByIdsReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 群成员ID
  repeated string memberIds = 3;
  // Opt
  message Opt {
    // 是否获取用户基本信息
    bool userBaseInfo = 1;
  }
  Opt opt = 4;
}

//MapGroupMemberInfoByIdsResp 批量获取群成员信息
message MapGroupMemberInfoByIdsResp {
  CommonResp commonResp = 1;
  // 群成员信息
  map<string, GroupMemberInfo> groupMemberInfoMap = 2;
}

//GetGroupMemberInfoResp 获取群成员信息
message GetGroupMemberInfoResp {
  CommonResp commonResp = 1;
  // 群成员信息
  GroupMemberInfo groupMemberInfo = 2;
}

//EditGroupInfoReq 编辑群资料
message EditGroupInfoReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 群名称
  optional string name = 3;
  // 群头像
  optional string avatar = 4;
  // 群介绍
  optional string introduction = 5;
}

//EditGroupInfoResp 编辑群资料
message EditGroupInfoResp {
  CommonResp commonResp = 1;
}

//TransferGroupOwnerReq 转让群主
message TransferGroupOwnerReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 新群主ID
  string newOwner = 3;
}

//TransferGroupOwnerResp 转让群主
message TransferGroupOwnerResp {
  CommonResp commonResp = 1;
}

//KickGroupMemberReq 踢出群成员
message KickGroupMemberReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 群成员ID
  string memberId = 3;
}

//KickGroupMemberResp 踢出群成员
message KickGroupMemberResp {
  CommonResp commonResp = 1;
}

//GetGroupMemberListReq 获取群成员列表
message GetGroupMemberListReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 分页
  Page page = 3;
  // Filter
  message GetGroupMemberListFilter {
    // 是否接受离线推送
    optional bool noDisturb = 1;
    // 只包含群主
    optional bool onlyOwner = 2;
    // 只包含管理员
    optional bool onlyAdmin = 3;
    // 只包含成员
    optional bool onlyMember = 4;
  }
  GetGroupMemberListFilter filter = 4;
  message GetGroupMemberListOpt {
    // 是否只获取id
    optional bool onlyId = 1;
  }
  GetGroupMemberListOpt opt = 5;
}

//GetGroupMemberListResp 获取群成员列表
message GetGroupMemberListResp {
  CommonResp commonResp = 1;
  // 群成员列表
  repeated GroupMemberInfo groupMemberList = 2;
}

//GetMyGroupListReq 获取我的群聊列表
message GetMyGroupListReq {
  CommonReq commonReq = 1;
  // 分页
  Page page = 2;
  // 过滤
  message Filter {
    // 消息接收类型
    // 是否过滤掉群助手
    bool filterFold = 1;
    // 是否过滤已屏蔽的群
    bool filterShield = 2;
  }
  Filter filter = 3;
  enum Opt {
    // 默认
    DEFAULT = 0;
    // 只获取id
    ONLY_ID = 1;
  }
  // 获取选项
  Opt opt = 10;
}

message GroupBaseInfo {
  string id = 1;
  string name = 2;
  string avatar = 3;
}

//GetMyGroupListResp 获取我的群聊列表
message GetMyGroupListResp {
  CommonResp commonResp = 1;
  // 群聊列表
  map<string, GroupBaseInfo> groupMap = 2;
  // ids
  repeated string ids = 3;
}

//mapGroupByIds 获取群聊信息
message MapGroupByIdsReq {
  CommonReq commonReq = 1;
  repeated string ids = 2;
}

message MapGroupByIdsResp {
  CommonResp commonResp = 1;
  map<string, bytes> groupMap = 2;
}

//syncGroupMemberCount 同步群成员数量
message SyncGroupMemberCountReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
}

message SyncGroupMemberCountResp {
  CommonResp commonResp = 1;
}

//applyToBeGroupMember 申请加入群聊
message ApplyToBeGroupMemberReq {
  CommonReq commonReq = 1;
  // 群ID
  string groupId = 2;
  // 申请理由
  string reason = 3;
}

message ApplyToBeGroupMemberResp {
  CommonResp commonResp = 1;
}

enum GroupApplyHandleResult {
  // 未处理
  UNHANDLED = 0;
  // 同意
  AGREE = 1;
  // 拒绝
  REJECT = 2;
}

//handleGroupApply 处理群聊申请
message HandleGroupApplyReq {
  CommonReq commonReq = 1;
  // 申请ID
  string applyId = 2;
  // 处理结果
  GroupApplyHandleResult result = 3;
}

message HandleGroupApplyResp {
  CommonResp commonResp = 1;
}

//getGroupApplyList 获取群聊申请列表
message GetGroupApplyListReq {
  CommonReq commonReq = 1;
  // 分页
  Page page = 2;
  // 过滤
  message Filter {
    // 申请状态
    optional GroupApplyHandleResult result = 1;
  }
  Filter filter = 3;
}
message GroupApplyInfo {
  // 申请ID
  string applyId = 1;
  // 群ID
  string groupId = 2;
  // 申请人
  string userId = 3;
  // 申请状态
  GroupApplyHandleResult result = 4;
  // 申请理由
  string reason = 5;
  // 申请时间
  int64 applyTime = 6;
  string applyTimeStr = 7;
  // 处理时间
  int64 handleTime = 8;
  string handleTimeStr = 9;
  // 处理人
  string handleUserId = 10;

  // 申请人的baseInfo
  optional UserBaseInfo userBaseInfo = 11;
  // 处理人的baseInfo
  optional UserBaseInfo handleUserBaseInfo = 12;

  // 群的baseInfo
  optional GroupBaseInfo groupBaseInfo = 13;
}
message GetGroupApplyListResp {
  CommonResp commonResp = 1;
  // 申请列表
  repeated GroupApplyInfo groupApplyList = 2;
  // 总数
  int64 total = 3;
}

//分页获取某人的群列表
message GetGroupListByUserIdReq {
  CommonReq commonReq = 1;
  // 分页
  Page page = 2;
  map<string, string> filter = 3;
  string userId = 4;
}
message GetGroupListByUserIdItem {
  // 群id
  string groupId = 1;
  // 头像
  string avatar = 2;
  // 名称
  string name = 3;
  // 群人数
  int64 memberCount = 4;
  // 加入时间
  int64 joinTime = 5;
  string joinTimeStr = 6;
  // 群主id
  string owner = 7;
  // 创建时间
  int64 createTime = 8;
  string createTimeStr = 9;
}
message GetGroupListByUserIdResp {
  CommonResp commonResp = 1;
  repeated GetGroupListByUserIdItem groupList = 2;
  int64 total = 3;
}

/*
type (
	Group struct {
		// 群id 从10001开始 redis incr
		Id     string `bson:"_id" json:"id" gorm:"column:id;primary_key;type:char(32);not null"`
		Name   string `bson:"name" json:"name" gorm:"column:name;type:varchar(32);not null;index;default:''"`
		Avatar string `bson:"avatar" json:"avatar"` // 群头像
		// 群主
		Owner string `bson:"owner" json:"owner" gorm:"column:owner;type:char(32);not null;index"`
		// 所有管理员
		Managers xorm.SliceString `bson:"managers" json:"managers" gorm:"column:managers;type:json;"`
		// 创建时间
		CreateTime int64 `bson:"createTime" json:"createTime" gorm:"column:createTime;type:bigint;not null;index"`
		// 解散时间
		DismissTime int64 `bson:"dismissTime" json:"dismissTime" gorm:"column:dismissTime;type:bigint;not null;index"`
		// 群描述
		Description string `bson:"description" json:"description" gorm:"column:description;type:varchar(255);not null;default:''"`
		// 群成员人数
		MemberCount int `bson:"memberCount" json:"memberCount" gorm:"column:memberCount;type:int;not null;default:0;index"`

		// GroupSetting
		// 全体禁言开关
		AllMute bool `bson:"allMute" json:"allMute" gorm:"column:allMute;type:tinyint(1);not null;default:0;index"`
		// 发言频率限制
		SpeakLimit int32 `bson:"speakLimit,omitempty" json:"speakLimit" gorm:"column:speakLimit;type:int;not null;default:0;"`
		// 群成员人数上限
		MaxMember int32 `bson:"maxMember,omitempty" json:"maxMember" gorm:"column:maxMember;type:int;not null;default:0;"`
		// 成员权限选项
		// 群成员是否可以发起临时会话
		MemberCanStartTempChat bool `bson:"memberCanStartTempChat" json:"memberCanStartTempChat" gorm:"column:memberCanStartTempChat;type:tinyint(1);not null;default:0;"`
		// 群成员是否可以邀请好友加入群
		MemberCanInviteFriend bool `bson:"memberCanInviteFriend" json:"memberCanInviteFriend" gorm:"column:memberCanInviteFriend;type:tinyint(1);not null;default:0;"`
		// 新成员可见的历史消息条数
		NewMemberHistoryMsgCount int32 `bson:"newMemberHistoryMsgCount,omitempty" json:"newMemberHistoryMsgCount" gorm:"column:newMemberHistoryMsgCount;type:int;not null;default:0;"`
		// 是否开启匿名聊天
		AnonymousChat   bool            `bson:"anonymousChat" json:"anonymousChat" gorm:"column:anonymousChat;type:tinyint(1);not null;default:0;"`
		JoinGroupOption JoinGroupOption `bson:"joinGroupOption" json:"joinGroupOption" gorm:"column:joinGroupOption;type:json;"`
	}
	JoinGroupOption struct {
		Type int `bson:"type" json:"type"`
		// 验证信息
		// 问题
		Question string `bson:"question" json:"question"`
		// 答案
		Answer string `bson:"answer" json:"answer"`
	}
)
 */
enum AllMuterType {
  // 0:禁言所有人 1:只禁言普通用户
  ALL = 0;
  NORMAL = 1;
}
//GroupModel 群组
message GroupModel {
  message JoinGroupOption {
    // 0:不需要验证 1:需要验证 2:需要问题验证
    int32 type = 1;
    // 验证信息
    // 问题
    string question = 2;
    // 答案
    string answer = 3;
  }
  // 群id 从10001开始 redis incr
  string id = 1;
  // 群名称
  string name = 2;
  // 群头像
  string avatar = 3;
  // 群主
  string owner = 4;
  // 所有管理员
  repeated string managers = 5;
  // 创建时间
  int64 createTime = 6;
  string createTimeStr = 7;
  // 解散时间
  int64 dismissTime = 8;
  string dismissTimeStr = 9;
  // 群描述
  string description = 10;
  // 群成员人数
  int32 memberCount = 11;
  // 全体禁言开关
  bool allMute = 12;
  // 发言频率限制
  int32 speakLimit = 13;
  // 群成员人数上限
  int32 maxMember = 14;
  // 成员权限选项
  // 群成员是否可以发起临时会话
  bool memberCanStartTempChat = 15;
  // 群成员是否可以邀请好友加入群
  bool memberCanInviteFriend = 16;
  // 新成员可见的历史消息条数
  int32 newMemberHistoryMsgCount = 17;
  // 是否开启匿名聊天
  bool anonymousChat = 18;
  JoinGroupOption joinGroupOption = 19;

  string adminRemark = 20;

  AllMuterType allMuterType = 21;
}

//GetAllGroupModelReq 获取所有群组
message GetAllGroupModelReq {
  CommonReq commonReq = 1;
  Page page = 2;
  map<string, string> filter = 3;
}

//GetAllGroupModelResp 获取所有群组
message GetAllGroupModelResp {
  CommonResp commonResp = 1;
  repeated GroupModel groupModels = 2;
  int64 total = 3;
}

//GetGroupModelDetailReq 获取群组详情
message GetGroupModelDetailReq {
  CommonReq commonReq = 1;
  string id = 2;
}

//GetGroupModelDetailResp 获取群组详情
message GetGroupModelDetailResp {
  CommonResp commonResp = 1;
  GroupModel groupModel = 2;
}

//UpdateGroupModelReq 更新群组
message UpdateGroupModelReq {
  CommonReq commonReq = 1;
  GroupModel groupModel = 2;
}

//UpdateGroupModelResp 更新群组
message UpdateGroupModelResp {
  CommonResp commonResp = 1;
}

//DismissGroupModelReq 解散群组
message DismissGroupModelReq {
  CommonReq commonReq = 1;
  repeated string ids = 2;
}

//DismissGroupModelResp 解散群组
message DismissGroupModelResp {
  CommonResp commonResp = 1;
}

//SearchGroupsByKeywordReq 搜索群组
message SearchGroupsByKeywordReq {
  CommonReq commonReq = 1;
  string keyword = 2;
}

message SearchGroupsByKeywordResp {
  CommonResp commonResp = 1;
  repeated GroupBaseInfo groups = 2;
}

//AddGroupMemberReq 添加群成员
message AddGroupMemberReq {
  CommonReq commonReq = 1;
  string groupId = 2;
  string userId = 3;
}

//AddGroupMemberResp 添加群成员
message AddGroupMemberResp {
  CommonResp commonResp = 1;
}

// 举报群
// ReportGroupReq
message ReportGroupReq {
  CommonReq commonReq = 1;
  string groupId = 2;
  string reason = 3;
}

// ReportGroupResp 举报群
message ReportGroupResp {
  CommonResp commonResp = 1;
}

service groupService {
  //CreateGroup 创建群聊
  rpc CreateGroup(CreateGroupReq) returns (CreateGroupResp) {}
  //GetGroupHome 获取群聊首页
  rpc GetGroupHome(GetGroupHomeReq) returns (GetGroupHomeResp) {}
  //InviteFriendToGroup 邀请好友加入群聊
  rpc InviteFriendToGroup(InviteFriendToGroupReq) returns (InviteFriendToGroupResp) {}
  //CreateGroupNotice 创建群公告
  rpc CreateGroupNotice(CreateGroupNoticeReq) returns (CreateGroupNoticeResp) {}
  //DeleteGroupNotice 删除群公告
  rpc DeleteGroupNotice(DeleteGroupNoticeReq) returns (DeleteGroupNoticeResp) {}
  //GetGroupNoticeList 获取群公告列表
  rpc GetGroupNoticeList(GetGroupNoticeListReq) returns (GetGroupNoticeListResp) {}
  //SetGroupMemberInfo 设置群成员信息
  rpc SetGroupMemberInfo(SetGroupMemberInfoReq) returns (SetGroupMemberInfoResp) {}
  //GetGroupMemberInfo 获取群成员信息
  rpc GetGroupMemberInfo(GetGroupMemberInfoReq) returns (GetGroupMemberInfoResp) {}
  // MapGroupMemberInfoByIds 批量获取群成员信息
  rpc MapGroupMemberInfoByIds(MapGroupMemberInfoByIdsReq) returns (MapGroupMemberInfoByIdsResp) {}
  //EditGroupInfo 编辑群信息
  rpc EditGroupInfo(EditGroupInfoReq) returns (EditGroupInfoResp) {}
  //TransferGroupOwner 转让群主
  rpc TransferGroupOwner(TransferGroupOwnerReq) returns (TransferGroupOwnerResp) {}
  //KickGroupMember 踢出群成员
  rpc KickGroupMember(KickGroupMemberReq) returns (KickGroupMemberResp) {}
  //GetGroupMemberList 获取群成员列表
  rpc GetGroupMemberList(GetGroupMemberListReq) returns (GetGroupMemberListResp) {}
  //GetMyGroupList 获取我的群聊列表
  rpc GetMyGroupList(GetMyGroupListReq) returns (GetMyGroupListResp) {}
  //MapGroupByIds 获取群聊信息
  rpc MapGroupByIds(MapGroupByIdsReq) returns (MapGroupByIdsResp) {}
  //SyncGroupMemberCount 同步群成员数量
  rpc SyncGroupMemberCount(SyncGroupMemberCountReq) returns (SyncGroupMemberCountResp) {}
  //ApplyToBeGroupMember 申请加入群聊
  rpc ApplyToBeGroupMember(ApplyToBeGroupMemberReq) returns (ApplyToBeGroupMemberResp) {}
  //HandleGroupApply 处理群聊申请
  rpc HandleGroupApply(HandleGroupApplyReq) returns (HandleGroupApplyResp) {}
  //GetGroupApplyList 获取群聊申请列表
  rpc GetGroupApplyList(GetGroupApplyListReq) returns (GetGroupApplyListResp) {}

  //GetGroupListByUserId 分页获取某人的群列表
  rpc GetGroupListByUserId(GetGroupListByUserIdReq) returns (GetGroupListByUserIdResp) {}

  //GetAllGroupModel 获取所有群组
  rpc GetAllGroupModel(GetAllGroupModelReq) returns (GetAllGroupModelResp) {}
  //GetGroupModelDetail 获取群组详情
  rpc GetGroupModelDetail(GetGroupModelDetailReq) returns (GetGroupModelDetailResp) {}
  //UpdateGroupModel 更新群组
  rpc UpdateGroupModel(UpdateGroupModelReq) returns (UpdateGroupModelResp) {}
  //DismissGroupModel 解散群组
  rpc DismissGroupModel(DismissGroupModelReq) returns (DismissGroupModelResp) {}

  //SearchGroupsByKeyword 搜索群组
  rpc SearchGroupsByKeyword(SearchGroupsByKeywordReq) returns (SearchGroupsByKeywordResp) {}

  //AddGroupMember 添加群成员
  rpc AddGroupMember(AddGroupMemberReq) returns (AddGroupMemberResp) {}

  // ReportGroup
  rpc ReportGroup(ReportGroupReq) returns (ReportGroupResp) {}
}