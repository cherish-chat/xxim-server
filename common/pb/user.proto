syntax = "proto3";
package pb;
option go_package = "./pb";
import "common.proto";
import "conn.proto";

// userModels
enum XB {
  UnknownXB = 0;
  Male = 1;
  Female = 2;
}

// 星座
enum Constellation {
  UnknownConstellation = 0;
  Aries = 1;
  Taurus = 2;
  Gemini = 3;
  Cancer = 4;
  Leo = 5;
  Virgo = 6;
  Libra = 7;
  Scorpio = 8;
  Sagittarius = 9;
  Capricorn = 10;
  Aquarius = 11;
  Pisces = 12;
}

message BirthdayInfo {
  int32 year = 1;
  int32 month = 2;
  int32 day = 3;
  int32 age = 4;
  Constellation constellation = 5;
}

message LevelInfo {
  int32 level = 1;
  int32 exp = 2;
  // 下一级所需经验
  int32 nextLevelExp = 3;
}

message UserBaseInfo {
  string id = 1;
  string nickname = 2;
  string avatar = 3;
  XB xb = 4;
  // 生日信息
  BirthdayInfo birthday = 5;
  // 最后一次连接 ip所在地
  IpRegion ipRegion = 6;
}

// 登录 如果没有注册过，会暂存到临时表，等待用户确认后注册成功
message LoginReq {
  CommonReq commonReq = 1;
  string id = 2; // 用户id 只能是英文和数字_，长度为6-20
  string password = 3; // 密码 // md5 数据库中会存入该值加盐后的值
}

message LoginResp {
  CommonResp commonResp = 1;
  // 是否是新用户
  bool isNewUser = 2;
  // token
  string token = 3; // 如果是新用户，token为空
  string userId = 4;
}

// 确认注册
message ConfirmRegisterReq {
  CommonReq commonReq = 1;
  string id = 2; // 用户id 只能是英文和数字_，长度为6-20
  string password = 3; // 密码 // md5 数据库中会存入该值加盐后的值
}

message ConfirmRegisterResp {
  CommonResp commonResp = 1;
  string token = 2;
  string userId = 3;
}

//mapUserByIds 获取用户信息
message MapUserByIdsReq {
  CommonReq commonReq = 1;
  repeated string ids = 2;
}

message MapUserByIdsResp {
  CommonResp commonResp = 1;
  map<string, bytes> users = 2;
}

//batchGetUserBaseInfo 批量获取用户基本信息
message BatchGetUserBaseInfoReq {
  CommonReq commonReq = 1;
  repeated string ids = 2;
}

message BatchGetUserBaseInfoResp {
  CommonResp commonResp = 1;
  repeated UserBaseInfo userBaseInfos = 2;
}

message SearchUsersByKeywordReq {
  CommonReq commonReq = 1;
  string keyword = 2;
}

message SearchUsersByKeywordResp {
  CommonResp commonResp = 1;
  repeated UserBaseInfo users = 2;
}

//GetUserHomeReq 获取用户主页信息
message GetUserHomeReq {
  CommonReq commonReq = 1;
  string id = 2;
}

message GetUserHomeResp {
  CommonResp commonResp = 1;
  string id = 2;
  string nickname = 3;
  string avatar = 4;
  XB xb = 5;
  BirthdayInfo birthday = 6;
  IpRegion ipRegion = 7;
  // 个性签名
  string signature = 8;
  // 等级信息
  LevelInfo levelInfo = 9;
}

// ************ userSettings ************ //

enum UserSettingKey {
  HowToAddFriend = 0; // 如何添加好友
  HowToAddFriend_NeedAnswerQuestionCorrectly_Question = 1; // 如何添加好友 需要回答的问题
  HowToAddFriend_NeedAnswerQuestionCorrectly_Answer = 2; // 如何添加好友 需要回答的问题的答案

  // 好友通知列表 点击清空按钮 设置的createTime
  FriendEventList_ClearTime = 21;
}

//获取用户settings
message GetUserSettingsReq {
  CommonReq commonReq = 1;
  repeated UserSettingKey keys = 2;
}

message UserSetting {
  string userId = 1;
  UserSettingKey key = 2;
  string value = 3;
}

message GetUserSettingsResp {
  CommonResp commonResp = 1;
  map<int32, UserSetting> settings = 2;
}

// 设置用户settings
message SetUserSettingsReq {
  CommonReq commonReq = 1;
  repeated UserSetting settings = 2;
}

message SetUserSettingsResp {
  CommonResp commonResp = 1;
}

// ************ userSettings ************ //

//BatchGetUserAllDevicesReq 批量查询用户的所有设备
message BatchGetUserAllDevicesReq {
  CommonReq commonReq = 1;
  repeated string userIds = 2;
}

//BatchGetUserAllDevicesResp 批量查询用户的所有设备
message BatchGetUserAllDevicesResp {
  CommonResp commonResp = 1;
  message AllDevices {
    string userId = 1;
    repeated string deviceIds = 2;
  }
  repeated AllDevices allDevices = 2;
}

//UpdateUserInfoReq 更新用户信息
message UpdateUserInfoReq {
  CommonReq commonReq = 1;
  optional string nickname = 2;
  optional string avatar = 3;
  optional string signature = 4;
}

message UpdateUserInfoResp {
  CommonResp commonResp = 1;
}

service userService {
  rpc Login(LoginReq) returns (LoginResp) {}
  rpc ConfirmRegister(ConfirmRegisterReq) returns (ConfirmRegisterResp) {}
  rpc MapUserByIds(MapUserByIdsReq) returns (MapUserByIdsResp) {}
  rpc BatchGetUserBaseInfo(BatchGetUserBaseInfoReq) returns (BatchGetUserBaseInfoResp) {}
  rpc SearchUsersByKeyword(SearchUsersByKeywordReq) returns (SearchUsersByKeywordResp) {}
  rpc GetUserHome(GetUserHomeReq) returns (GetUserHomeResp) {}
  rpc GetUserSettings(GetUserSettingsReq) returns (GetUserSettingsResp) {}
  rpc SetUserSettings(SetUserSettingsReq) returns (SetUserSettingsResp) {}
  //AfterConnect conn hook
  rpc AfterConnect(AfterConnectReq) returns (CommonResp);
  //AfterDisconnect conn hook
  rpc AfterDisconnect(AfterDisconnectReq) returns (CommonResp);
  rpc BatchGetUserAllDevices(BatchGetUserAllDevicesReq) returns (BatchGetUserAllDevicesResp) {}
  rpc UpdateUserInfo(UpdateUserInfoReq) returns (UpdateUserInfoResp) {}
}