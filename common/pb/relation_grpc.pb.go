// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: relation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	AreFriends(ctx context.Context, in *AreFriendsReq, opts ...grpc.CallOption) (*AreFriendsResp, error)
	AreBlackList(ctx context.Context, in *AreBlackListReq, opts ...grpc.CallOption) (*AreBlackListResp, error)
	RequestAddFriend(ctx context.Context, in *RequestAddFriendReq, opts ...grpc.CallOption) (*RequestAddFriendResp, error)
	AcceptAddFriend(ctx context.Context, in *AcceptAddFriendReq, opts ...grpc.CallOption) (*AcceptAddFriendResp, error)
	RejectAddFriend(ctx context.Context, in *RejectAddFriendReq, opts ...grpc.CallOption) (*RejectAddFriendResp, error)
	GetFriendCount(ctx context.Context, in *GetFriendCountReq, opts ...grpc.CallOption) (*GetFriendCountResp, error)
	BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
	DeleteBlockUser(ctx context.Context, in *DeleteBlockUserReq, opts ...grpc.CallOption) (*DeleteBlockUserResp, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
	GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error)
	GetMyFriendEventList(ctx context.Context, in *GetMyFriendEventListReq, opts ...grpc.CallOption) (*GetMyFriendEventListResp, error)
	GetFriendListByUserId(ctx context.Context, in *GetFriendListByUserIdReq, opts ...grpc.CallOption) (*GetFriendListByUserIdResp, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) AreFriends(ctx context.Context, in *AreFriendsReq, opts ...grpc.CallOption) (*AreFriendsResp, error) {
	out := new(AreFriendsResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/AreFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) AreBlackList(ctx context.Context, in *AreBlackListReq, opts ...grpc.CallOption) (*AreBlackListResp, error) {
	out := new(AreBlackListResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/AreBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) RequestAddFriend(ctx context.Context, in *RequestAddFriendReq, opts ...grpc.CallOption) (*RequestAddFriendResp, error) {
	out := new(RequestAddFriendResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/RequestAddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) AcceptAddFriend(ctx context.Context, in *AcceptAddFriendReq, opts ...grpc.CallOption) (*AcceptAddFriendResp, error) {
	out := new(AcceptAddFriendResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/AcceptAddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) RejectAddFriend(ctx context.Context, in *RejectAddFriendReq, opts ...grpc.CallOption) (*RejectAddFriendResp, error) {
	out := new(RejectAddFriendResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/RejectAddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFriendCount(ctx context.Context, in *GetFriendCountReq, opts ...grpc.CallOption) (*GetFriendCountResp, error) {
	out := new(GetFriendCountResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/GetFriendCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	out := new(BlockUserResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) DeleteBlockUser(ctx context.Context, in *DeleteBlockUserReq, opts ...grpc.CallOption) (*DeleteBlockUserResp, error) {
	out := new(DeleteBlockUserResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/DeleteBlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	out := new(DeleteFriendResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error) {
	out := new(GetFriendListResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/GetFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetMyFriendEventList(ctx context.Context, in *GetMyFriendEventListReq, opts ...grpc.CallOption) (*GetMyFriendEventListResp, error) {
	out := new(GetMyFriendEventListResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/GetMyFriendEventList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFriendListByUserId(ctx context.Context, in *GetFriendListByUserIdReq, opts ...grpc.CallOption) (*GetFriendListByUserIdResp, error) {
	out := new(GetFriendListByUserIdResp)
	err := c.cc.Invoke(ctx, "/pb.relationService/GetFriendListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility
type RelationServiceServer interface {
	AreFriends(context.Context, *AreFriendsReq) (*AreFriendsResp, error)
	AreBlackList(context.Context, *AreBlackListReq) (*AreBlackListResp, error)
	RequestAddFriend(context.Context, *RequestAddFriendReq) (*RequestAddFriendResp, error)
	AcceptAddFriend(context.Context, *AcceptAddFriendReq) (*AcceptAddFriendResp, error)
	RejectAddFriend(context.Context, *RejectAddFriendReq) (*RejectAddFriendResp, error)
	GetFriendCount(context.Context, *GetFriendCountReq) (*GetFriendCountResp, error)
	BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error)
	DeleteBlockUser(context.Context, *DeleteBlockUserReq) (*DeleteBlockUserResp, error)
	DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error)
	GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error)
	GetMyFriendEventList(context.Context, *GetMyFriendEventListReq) (*GetMyFriendEventListResp, error)
	GetFriendListByUserId(context.Context, *GetFriendListByUserIdReq) (*GetFriendListByUserIdResp, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServiceServer struct {
}

func (UnimplementedRelationServiceServer) AreFriends(context.Context, *AreFriendsReq) (*AreFriendsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreFriends not implemented")
}
func (UnimplementedRelationServiceServer) AreBlackList(context.Context, *AreBlackListReq) (*AreBlackListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreBlackList not implemented")
}
func (UnimplementedRelationServiceServer) RequestAddFriend(context.Context, *RequestAddFriendReq) (*RequestAddFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAddFriend not implemented")
}
func (UnimplementedRelationServiceServer) AcceptAddFriend(context.Context, *AcceptAddFriendReq) (*AcceptAddFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptAddFriend not implemented")
}
func (UnimplementedRelationServiceServer) RejectAddFriend(context.Context, *RejectAddFriendReq) (*RejectAddFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectAddFriend not implemented")
}
func (UnimplementedRelationServiceServer) GetFriendCount(context.Context, *GetFriendCountReq) (*GetFriendCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendCount not implemented")
}
func (UnimplementedRelationServiceServer) BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedRelationServiceServer) DeleteBlockUser(context.Context, *DeleteBlockUserReq) (*DeleteBlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlockUser not implemented")
}
func (UnimplementedRelationServiceServer) DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedRelationServiceServer) GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedRelationServiceServer) GetMyFriendEventList(context.Context, *GetMyFriendEventListReq) (*GetMyFriendEventListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyFriendEventList not implemented")
}
func (UnimplementedRelationServiceServer) GetFriendListByUserId(context.Context, *GetFriendListByUserIdReq) (*GetFriendListByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendListByUserId not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_AreFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreFriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).AreFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/AreFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).AreFriends(ctx, req.(*AreFriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_AreBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).AreBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/AreBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).AreBlackList(ctx, req.(*AreBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_RequestAddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).RequestAddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/RequestAddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).RequestAddFriend(ctx, req.(*RequestAddFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_AcceptAddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptAddFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).AcceptAddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/AcceptAddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).AcceptAddFriend(ctx, req.(*AcceptAddFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_RejectAddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectAddFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).RejectAddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/RejectAddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).RejectAddFriend(ctx, req.(*RejectAddFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFriendCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFriendCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/GetFriendCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFriendCount(ctx, req.(*GetFriendCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).BlockUser(ctx, req.(*BlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_DeleteBlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).DeleteBlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/DeleteBlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).DeleteBlockUser(ctx, req.(*DeleteBlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).DeleteFriend(ctx, req.(*DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/GetFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFriendList(ctx, req.(*GetFriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetMyFriendEventList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyFriendEventListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetMyFriendEventList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/GetMyFriendEventList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetMyFriendEventList(ctx, req.(*GetMyFriendEventListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFriendListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFriendListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.relationService/GetFriendListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFriendListByUserId(ctx, req.(*GetFriendListByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.relationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreFriends",
			Handler:    _RelationService_AreFriends_Handler,
		},
		{
			MethodName: "AreBlackList",
			Handler:    _RelationService_AreBlackList_Handler,
		},
		{
			MethodName: "RequestAddFriend",
			Handler:    _RelationService_RequestAddFriend_Handler,
		},
		{
			MethodName: "AcceptAddFriend",
			Handler:    _RelationService_AcceptAddFriend_Handler,
		},
		{
			MethodName: "RejectAddFriend",
			Handler:    _RelationService_RejectAddFriend_Handler,
		},
		{
			MethodName: "GetFriendCount",
			Handler:    _RelationService_GetFriendCount_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _RelationService_BlockUser_Handler,
		},
		{
			MethodName: "DeleteBlockUser",
			Handler:    _RelationService_DeleteBlockUser_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _RelationService_DeleteFriend_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _RelationService_GetFriendList_Handler,
		},
		{
			MethodName: "GetMyFriendEventList",
			Handler:    _RelationService_GetMyFriendEventList_Handler,
		},
		{
			MethodName: "GetFriendListByUserId",
			Handler:    _RelationService_GetFriendListByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
