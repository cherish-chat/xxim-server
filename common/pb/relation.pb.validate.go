// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: relation.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AreFriendsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AreFriendsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AreFriendsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AreFriendsReqMultiError, or
// nil if none found.
func (m *AreFriendsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AreFriendsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AreFriendsReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AreFriendsReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AreFriendsReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for A

	if len(errors) > 0 {
		return AreFriendsReqMultiError(errors)
	}

	return nil
}

// AreFriendsReqMultiError is an error wrapping multiple validation errors
// returned by AreFriendsReq.ValidateAll() if the designated constraints
// aren't met.
type AreFriendsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AreFriendsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AreFriendsReqMultiError) AllErrors() []error { return m }

// AreFriendsReqValidationError is the validation error returned by
// AreFriendsReq.Validate if the designated constraints aren't met.
type AreFriendsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AreFriendsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AreFriendsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AreFriendsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AreFriendsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AreFriendsReqValidationError) ErrorName() string { return "AreFriendsReqValidationError" }

// Error satisfies the builtin error interface
func (e AreFriendsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAreFriendsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AreFriendsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AreFriendsReqValidationError{}

// Validate checks the field values on AreFriendsResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AreFriendsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AreFriendsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AreFriendsRespMultiError,
// or nil if none found.
func (m *AreFriendsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AreFriendsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AreFriendsRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AreFriendsRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AreFriendsRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FriendList

	if len(errors) > 0 {
		return AreFriendsRespMultiError(errors)
	}

	return nil
}

// AreFriendsRespMultiError is an error wrapping multiple validation errors
// returned by AreFriendsResp.ValidateAll() if the designated constraints
// aren't met.
type AreFriendsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AreFriendsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AreFriendsRespMultiError) AllErrors() []error { return m }

// AreFriendsRespValidationError is the validation error returned by
// AreFriendsResp.Validate if the designated constraints aren't met.
type AreFriendsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AreFriendsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AreFriendsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AreFriendsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AreFriendsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AreFriendsRespValidationError) ErrorName() string { return "AreFriendsRespValidationError" }

// Error satisfies the builtin error interface
func (e AreFriendsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAreFriendsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AreFriendsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AreFriendsRespValidationError{}

// Validate checks the field values on AreBlackListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AreBlackListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AreBlackListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AreBlackListReqMultiError, or nil if none found.
func (m *AreBlackListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AreBlackListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AreBlackListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AreBlackListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AreBlackListReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for A

	if len(errors) > 0 {
		return AreBlackListReqMultiError(errors)
	}

	return nil
}

// AreBlackListReqMultiError is an error wrapping multiple validation errors
// returned by AreBlackListReq.ValidateAll() if the designated constraints
// aren't met.
type AreBlackListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AreBlackListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AreBlackListReqMultiError) AllErrors() []error { return m }

// AreBlackListReqValidationError is the validation error returned by
// AreBlackListReq.Validate if the designated constraints aren't met.
type AreBlackListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AreBlackListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AreBlackListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AreBlackListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AreBlackListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AreBlackListReqValidationError) ErrorName() string { return "AreBlackListReqValidationError" }

// Error satisfies the builtin error interface
func (e AreBlackListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAreBlackListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AreBlackListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AreBlackListReqValidationError{}

// Validate checks the field values on AreBlackListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AreBlackListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AreBlackListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AreBlackListRespMultiError, or nil if none found.
func (m *AreBlackListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AreBlackListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AreBlackListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AreBlackListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AreBlackListRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BlackList

	if len(errors) > 0 {
		return AreBlackListRespMultiError(errors)
	}

	return nil
}

// AreBlackListRespMultiError is an error wrapping multiple validation errors
// returned by AreBlackListResp.ValidateAll() if the designated constraints
// aren't met.
type AreBlackListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AreBlackListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AreBlackListRespMultiError) AllErrors() []error { return m }

// AreBlackListRespValidationError is the validation error returned by
// AreBlackListResp.Validate if the designated constraints aren't met.
type AreBlackListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AreBlackListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AreBlackListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AreBlackListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AreBlackListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AreBlackListRespValidationError) ErrorName() string { return "AreBlackListRespValidationError" }

// Error satisfies the builtin error interface
func (e AreBlackListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAreBlackListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AreBlackListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AreBlackListRespValidationError{}

// Validate checks the field values on RequestAddFriendExtra with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestAddFriendExtra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestAddFriendExtra with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestAddFriendExtraMultiError, or nil if none found.
func (m *RequestAddFriendExtra) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestAddFriendExtra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Content

	if len(errors) > 0 {
		return RequestAddFriendExtraMultiError(errors)
	}

	return nil
}

// RequestAddFriendExtraMultiError is an error wrapping multiple validation
// errors returned by RequestAddFriendExtra.ValidateAll() if the designated
// constraints aren't met.
type RequestAddFriendExtraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestAddFriendExtraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestAddFriendExtraMultiError) AllErrors() []error { return m }

// RequestAddFriendExtraValidationError is the validation error returned by
// RequestAddFriendExtra.Validate if the designated constraints aren't met.
type RequestAddFriendExtraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestAddFriendExtraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestAddFriendExtraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestAddFriendExtraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestAddFriendExtraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestAddFriendExtraValidationError) ErrorName() string {
	return "RequestAddFriendExtraValidationError"
}

// Error satisfies the builtin error interface
func (e RequestAddFriendExtraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestAddFriendExtra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestAddFriendExtraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestAddFriendExtraValidationError{}

// Validate checks the field values on RequestAddFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestAddFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestAddFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestAddFriendReqMultiError, or nil if none found.
func (m *RequestAddFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestAddFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestAddFriendReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestAddFriendReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestAddFriendReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for To

	// no validation rules for Message

	if len(errors) > 0 {
		return RequestAddFriendReqMultiError(errors)
	}

	return nil
}

// RequestAddFriendReqMultiError is an error wrapping multiple validation
// errors returned by RequestAddFriendReq.ValidateAll() if the designated
// constraints aren't met.
type RequestAddFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestAddFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestAddFriendReqMultiError) AllErrors() []error { return m }

// RequestAddFriendReqValidationError is the validation error returned by
// RequestAddFriendReq.Validate if the designated constraints aren't met.
type RequestAddFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestAddFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestAddFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestAddFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestAddFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestAddFriendReqValidationError) ErrorName() string {
	return "RequestAddFriendReqValidationError"
}

// Error satisfies the builtin error interface
func (e RequestAddFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestAddFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestAddFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestAddFriendReqValidationError{}

// Validate checks the field values on RequestAddFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestAddFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestAddFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestAddFriendRespMultiError, or nil if none found.
func (m *RequestAddFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestAddFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestAddFriendRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestAddFriendRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestAddFriendRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestAddFriendRespMultiError(errors)
	}

	return nil
}

// RequestAddFriendRespMultiError is an error wrapping multiple validation
// errors returned by RequestAddFriendResp.ValidateAll() if the designated
// constraints aren't met.
type RequestAddFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestAddFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestAddFriendRespMultiError) AllErrors() []error { return m }

// RequestAddFriendRespValidationError is the validation error returned by
// RequestAddFriendResp.Validate if the designated constraints aren't met.
type RequestAddFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestAddFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestAddFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestAddFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestAddFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestAddFriendRespValidationError) ErrorName() string {
	return "RequestAddFriendRespValidationError"
}

// Error satisfies the builtin error interface
func (e RequestAddFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestAddFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestAddFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestAddFriendRespValidationError{}

// Validate checks the field values on AcceptAddFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptAddFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptAddFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptAddFriendReqMultiError, or nil if none found.
func (m *AcceptAddFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptAddFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptAddFriendReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptAddFriendReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptAddFriendReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ApplyUserId

	if m.RequestId != nil {
		// no validation rules for RequestId
	}

	if len(errors) > 0 {
		return AcceptAddFriendReqMultiError(errors)
	}

	return nil
}

// AcceptAddFriendReqMultiError is an error wrapping multiple validation errors
// returned by AcceptAddFriendReq.ValidateAll() if the designated constraints
// aren't met.
type AcceptAddFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptAddFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptAddFriendReqMultiError) AllErrors() []error { return m }

// AcceptAddFriendReqValidationError is the validation error returned by
// AcceptAddFriendReq.Validate if the designated constraints aren't met.
type AcceptAddFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptAddFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptAddFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptAddFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptAddFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptAddFriendReqValidationError) ErrorName() string {
	return "AcceptAddFriendReqValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptAddFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptAddFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptAddFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptAddFriendReqValidationError{}

// Validate checks the field values on AcceptAddFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptAddFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptAddFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptAddFriendRespMultiError, or nil if none found.
func (m *AcceptAddFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptAddFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptAddFriendRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptAddFriendRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptAddFriendRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AcceptAddFriendRespMultiError(errors)
	}

	return nil
}

// AcceptAddFriendRespMultiError is an error wrapping multiple validation
// errors returned by AcceptAddFriendResp.ValidateAll() if the designated
// constraints aren't met.
type AcceptAddFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptAddFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptAddFriendRespMultiError) AllErrors() []error { return m }

// AcceptAddFriendRespValidationError is the validation error returned by
// AcceptAddFriendResp.Validate if the designated constraints aren't met.
type AcceptAddFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptAddFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptAddFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptAddFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptAddFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptAddFriendRespValidationError) ErrorName() string {
	return "AcceptAddFriendRespValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptAddFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptAddFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptAddFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptAddFriendRespValidationError{}

// Validate checks the field values on RejectAddFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectAddFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectAddFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectAddFriendReqMultiError, or nil if none found.
func (m *RejectAddFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectAddFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RejectAddFriendReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RejectAddFriendReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RejectAddFriendReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ApplyUserId

	// no validation rules for RequestId

	// no validation rules for Block

	if len(errors) > 0 {
		return RejectAddFriendReqMultiError(errors)
	}

	return nil
}

// RejectAddFriendReqMultiError is an error wrapping multiple validation errors
// returned by RejectAddFriendReq.ValidateAll() if the designated constraints
// aren't met.
type RejectAddFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectAddFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectAddFriendReqMultiError) AllErrors() []error { return m }

// RejectAddFriendReqValidationError is the validation error returned by
// RejectAddFriendReq.Validate if the designated constraints aren't met.
type RejectAddFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectAddFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectAddFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectAddFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectAddFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectAddFriendReqValidationError) ErrorName() string {
	return "RejectAddFriendReqValidationError"
}

// Error satisfies the builtin error interface
func (e RejectAddFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectAddFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectAddFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectAddFriendReqValidationError{}

// Validate checks the field values on RejectAddFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectAddFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectAddFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectAddFriendRespMultiError, or nil if none found.
func (m *RejectAddFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectAddFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RejectAddFriendRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RejectAddFriendRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RejectAddFriendRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RejectAddFriendRespMultiError(errors)
	}

	return nil
}

// RejectAddFriendRespMultiError is an error wrapping multiple validation
// errors returned by RejectAddFriendResp.ValidateAll() if the designated
// constraints aren't met.
type RejectAddFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectAddFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectAddFriendRespMultiError) AllErrors() []error { return m }

// RejectAddFriendRespValidationError is the validation error returned by
// RejectAddFriendResp.Validate if the designated constraints aren't met.
type RejectAddFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectAddFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectAddFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectAddFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectAddFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectAddFriendRespValidationError) ErrorName() string {
	return "RejectAddFriendRespValidationError"
}

// Error satisfies the builtin error interface
func (e RejectAddFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectAddFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectAddFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectAddFriendRespValidationError{}

// Validate checks the field values on GetFriendCountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendCountReqMultiError, or nil if none found.
func (m *GetFriendCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendCountReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendCountReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendCountReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFriendCountReqMultiError(errors)
	}

	return nil
}

// GetFriendCountReqMultiError is an error wrapping multiple validation errors
// returned by GetFriendCountReq.ValidateAll() if the designated constraints
// aren't met.
type GetFriendCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendCountReqMultiError) AllErrors() []error { return m }

// GetFriendCountReqValidationError is the validation error returned by
// GetFriendCountReq.Validate if the designated constraints aren't met.
type GetFriendCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendCountReqValidationError) ErrorName() string {
	return "GetFriendCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendCountReqValidationError{}

// Validate checks the field values on GetFriendCountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendCountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendCountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendCountRespMultiError, or nil if none found.
func (m *GetFriendCountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendCountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendCountRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendCountRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendCountRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return GetFriendCountRespMultiError(errors)
	}

	return nil
}

// GetFriendCountRespMultiError is an error wrapping multiple validation errors
// returned by GetFriendCountResp.ValidateAll() if the designated constraints
// aren't met.
type GetFriendCountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendCountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendCountRespMultiError) AllErrors() []error { return m }

// GetFriendCountRespValidationError is the validation error returned by
// GetFriendCountResp.Validate if the designated constraints aren't met.
type GetFriendCountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendCountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendCountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendCountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendCountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendCountRespValidationError) ErrorName() string {
	return "GetFriendCountRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendCountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendCountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendCountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendCountRespValidationError{}

// Validate checks the field values on BlockUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockUserReqMultiError, or
// nil if none found.
func (m *BlockUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlockUserReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlockUserReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlockUserReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return BlockUserReqMultiError(errors)
	}

	return nil
}

// BlockUserReqMultiError is an error wrapping multiple validation errors
// returned by BlockUserReq.ValidateAll() if the designated constraints aren't met.
type BlockUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockUserReqMultiError) AllErrors() []error { return m }

// BlockUserReqValidationError is the validation error returned by
// BlockUserReq.Validate if the designated constraints aren't met.
type BlockUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockUserReqValidationError) ErrorName() string { return "BlockUserReqValidationError" }

// Error satisfies the builtin error interface
func (e BlockUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockUserReqValidationError{}

// Validate checks the field values on BlockUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockUserRespMultiError, or
// nil if none found.
func (m *BlockUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlockUserRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlockUserRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlockUserRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BlockUserRespMultiError(errors)
	}

	return nil
}

// BlockUserRespMultiError is an error wrapping multiple validation errors
// returned by BlockUserResp.ValidateAll() if the designated constraints
// aren't met.
type BlockUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockUserRespMultiError) AllErrors() []error { return m }

// BlockUserRespValidationError is the validation error returned by
// BlockUserResp.Validate if the designated constraints aren't met.
type BlockUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockUserRespValidationError) ErrorName() string { return "BlockUserRespValidationError" }

// Error satisfies the builtin error interface
func (e BlockUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockUserRespValidationError{}

// Validate checks the field values on DeleteBlockUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBlockUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBlockUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBlockUserReqMultiError, or nil if none found.
func (m *DeleteBlockUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBlockUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBlockUserReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBlockUserReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBlockUserReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteBlockUserReqMultiError(errors)
	}

	return nil
}

// DeleteBlockUserReqMultiError is an error wrapping multiple validation errors
// returned by DeleteBlockUserReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteBlockUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBlockUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBlockUserReqMultiError) AllErrors() []error { return m }

// DeleteBlockUserReqValidationError is the validation error returned by
// DeleteBlockUserReq.Validate if the designated constraints aren't met.
type DeleteBlockUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBlockUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBlockUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBlockUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBlockUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBlockUserReqValidationError) ErrorName() string {
	return "DeleteBlockUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBlockUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBlockUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBlockUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBlockUserReqValidationError{}

// Validate checks the field values on DeleteBlockUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBlockUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBlockUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBlockUserRespMultiError, or nil if none found.
func (m *DeleteBlockUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBlockUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBlockUserRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBlockUserRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBlockUserRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBlockUserRespMultiError(errors)
	}

	return nil
}

// DeleteBlockUserRespMultiError is an error wrapping multiple validation
// errors returned by DeleteBlockUserResp.ValidateAll() if the designated
// constraints aren't met.
type DeleteBlockUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBlockUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBlockUserRespMultiError) AllErrors() []error { return m }

// DeleteBlockUserRespValidationError is the validation error returned by
// DeleteBlockUserResp.Validate if the designated constraints aren't met.
type DeleteBlockUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBlockUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBlockUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBlockUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBlockUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBlockUserRespValidationError) ErrorName() string {
	return "DeleteBlockUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBlockUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBlockUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBlockUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBlockUserRespValidationError{}

// Validate checks the field values on DeleteFriendReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendReqMultiError, or nil if none found.
func (m *DeleteFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteFriendReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteFriendReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteFriendReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for Block

	if len(errors) > 0 {
		return DeleteFriendReqMultiError(errors)
	}

	return nil
}

// DeleteFriendReqMultiError is an error wrapping multiple validation errors
// returned by DeleteFriendReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendReqMultiError) AllErrors() []error { return m }

// DeleteFriendReqValidationError is the validation error returned by
// DeleteFriendReq.Validate if the designated constraints aren't met.
type DeleteFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendReqValidationError) ErrorName() string { return "DeleteFriendReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendReqValidationError{}

// Validate checks the field values on DeleteFriendResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendRespMultiError, or nil if none found.
func (m *DeleteFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteFriendRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteFriendRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteFriendRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteFriendRespMultiError(errors)
	}

	return nil
}

// DeleteFriendRespMultiError is an error wrapping multiple validation errors
// returned by DeleteFriendResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendRespMultiError) AllErrors() []error { return m }

// DeleteFriendRespValidationError is the validation error returned by
// DeleteFriendResp.Validate if the designated constraints aren't met.
type DeleteFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendRespValidationError) ErrorName() string { return "DeleteFriendRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendRespValidationError{}

// Validate checks the field values on SingleConvSetting with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SingleConvSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleConvSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleConvSettingMultiError, or nil if none found.
func (m *SingleConvSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleConvSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConvId

	// no validation rules for UserId

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.IsDisturb != nil {
		// no validation rules for IsDisturb
	}

	if m.NotifyPreview != nil {
		// no validation rules for NotifyPreview
	}

	if m.NotifySound != nil {
		// no validation rules for NotifySound
	}

	if m.NotifyCustomSound != nil {
		// no validation rules for NotifyCustomSound
	}

	if m.NotifyVibrate != nil {
		// no validation rules for NotifyVibrate
	}

	if m.IsShield != nil {
		// no validation rules for IsShield
	}

	if m.ChatBg != nil {
		// no validation rules for ChatBg
	}

	if len(errors) > 0 {
		return SingleConvSettingMultiError(errors)
	}

	return nil
}

// SingleConvSettingMultiError is an error wrapping multiple validation errors
// returned by SingleConvSetting.ValidateAll() if the designated constraints
// aren't met.
type SingleConvSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleConvSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleConvSettingMultiError) AllErrors() []error { return m }

// SingleConvSettingValidationError is the validation error returned by
// SingleConvSetting.Validate if the designated constraints aren't met.
type SingleConvSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleConvSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleConvSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleConvSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleConvSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleConvSettingValidationError) ErrorName() string {
	return "SingleConvSettingValidationError"
}

// Error satisfies the builtin error interface
func (e SingleConvSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleConvSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleConvSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleConvSettingValidationError{}

// Validate checks the field values on SetSingleConvSettingReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSingleConvSettingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSingleConvSettingReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSingleConvSettingReqMultiError, or nil if none found.
func (m *SetSingleConvSettingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSingleConvSettingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetSingleConvSettingReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetSingleConvSettingReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetSingleConvSettingReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetSingleConvSettingReqValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetSingleConvSettingReqValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetSingleConvSettingReqValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetSingleConvSettingReqMultiError(errors)
	}

	return nil
}

// SetSingleConvSettingReqMultiError is an error wrapping multiple validation
// errors returned by SetSingleConvSettingReq.ValidateAll() if the designated
// constraints aren't met.
type SetSingleConvSettingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSingleConvSettingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSingleConvSettingReqMultiError) AllErrors() []error { return m }

// SetSingleConvSettingReqValidationError is the validation error returned by
// SetSingleConvSettingReq.Validate if the designated constraints aren't met.
type SetSingleConvSettingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSingleConvSettingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSingleConvSettingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSingleConvSettingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSingleConvSettingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSingleConvSettingReqValidationError) ErrorName() string {
	return "SetSingleConvSettingReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetSingleConvSettingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSingleConvSettingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSingleConvSettingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSingleConvSettingReqValidationError{}

// Validate checks the field values on SetSingleConvSettingResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSingleConvSettingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSingleConvSettingResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSingleConvSettingRespMultiError, or nil if none found.
func (m *SetSingleConvSettingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSingleConvSettingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetSingleConvSettingRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetSingleConvSettingRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetSingleConvSettingRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetSingleConvSettingRespMultiError(errors)
	}

	return nil
}

// SetSingleConvSettingRespMultiError is an error wrapping multiple validation
// errors returned by SetSingleConvSettingResp.ValidateAll() if the designated
// constraints aren't met.
type SetSingleConvSettingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSingleConvSettingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSingleConvSettingRespMultiError) AllErrors() []error { return m }

// SetSingleConvSettingRespValidationError is the validation error returned by
// SetSingleConvSettingResp.Validate if the designated constraints aren't met.
type SetSingleConvSettingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSingleConvSettingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSingleConvSettingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSingleConvSettingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSingleConvSettingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSingleConvSettingRespValidationError) ErrorName() string {
	return "SetSingleConvSettingRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetSingleConvSettingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSingleConvSettingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSingleConvSettingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSingleConvSettingRespValidationError{}

// Validate checks the field values on GetSingleConvSettingReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSingleConvSettingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingleConvSettingReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSingleConvSettingReqMultiError, or nil if none found.
func (m *GetSingleConvSettingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingleConvSettingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSingleConvSettingReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSingleConvSettingReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSingleConvSettingReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConvId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetSingleConvSettingReqMultiError(errors)
	}

	return nil
}

// GetSingleConvSettingReqMultiError is an error wrapping multiple validation
// errors returned by GetSingleConvSettingReq.ValidateAll() if the designated
// constraints aren't met.
type GetSingleConvSettingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingleConvSettingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingleConvSettingReqMultiError) AllErrors() []error { return m }

// GetSingleConvSettingReqValidationError is the validation error returned by
// GetSingleConvSettingReq.Validate if the designated constraints aren't met.
type GetSingleConvSettingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingleConvSettingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingleConvSettingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingleConvSettingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingleConvSettingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingleConvSettingReqValidationError) ErrorName() string {
	return "GetSingleConvSettingReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSingleConvSettingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingleConvSettingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingleConvSettingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingleConvSettingReqValidationError{}

// Validate checks the field values on GetSingleConvSettingResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSingleConvSettingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingleConvSettingResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSingleConvSettingRespMultiError, or nil if none found.
func (m *GetSingleConvSettingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingleConvSettingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSingleConvSettingRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSingleConvSettingRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSingleConvSettingRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSingleConvSettingRespValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSingleConvSettingRespValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSingleConvSettingRespValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSingleConvSettingRespMultiError(errors)
	}

	return nil
}

// GetSingleConvSettingRespMultiError is an error wrapping multiple validation
// errors returned by GetSingleConvSettingResp.ValidateAll() if the designated
// constraints aren't met.
type GetSingleConvSettingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingleConvSettingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingleConvSettingRespMultiError) AllErrors() []error { return m }

// GetSingleConvSettingRespValidationError is the validation error returned by
// GetSingleConvSettingResp.Validate if the designated constraints aren't met.
type GetSingleConvSettingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingleConvSettingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingleConvSettingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingleConvSettingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingleConvSettingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingleConvSettingRespValidationError) ErrorName() string {
	return "GetSingleConvSettingRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetSingleConvSettingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingleConvSettingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingleConvSettingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingleConvSettingRespValidationError{}

// Validate checks the field values on GetFriendListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListReqMultiError, or nil if none found.
func (m *GetFriendListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendListReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendListReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Opt

	if len(errors) > 0 {
		return GetFriendListReqMultiError(errors)
	}

	return nil
}

// GetFriendListReqMultiError is an error wrapping multiple validation errors
// returned by GetFriendListReq.ValidateAll() if the designated constraints
// aren't met.
type GetFriendListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListReqMultiError) AllErrors() []error { return m }

// GetFriendListReqValidationError is the validation error returned by
// GetFriendListReq.Validate if the designated constraints aren't met.
type GetFriendListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListReqValidationError) ErrorName() string { return "GetFriendListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFriendListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListReqValidationError{}

// Validate checks the field values on GetFriendListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListRespMultiError, or nil if none found.
func (m *GetFriendListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendListRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetUserMap()))
		i := 0
		for key := range m.GetUserMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetUserMap()[key]
			_ = val

			// no validation rules for UserMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetFriendListRespValidationError{
							field:  fmt.Sprintf("UserMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetFriendListRespValidationError{
							field:  fmt.Sprintf("UserMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetFriendListRespValidationError{
						field:  fmt.Sprintf("UserMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetFriendListRespMultiError(errors)
	}

	return nil
}

// GetFriendListRespMultiError is an error wrapping multiple validation errors
// returned by GetFriendListResp.ValidateAll() if the designated constraints
// aren't met.
type GetFriendListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListRespMultiError) AllErrors() []error { return m }

// GetFriendListRespValidationError is the validation error returned by
// GetFriendListResp.Validate if the designated constraints aren't met.
type GetFriendListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListRespValidationError) ErrorName() string {
	return "GetFriendListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListRespValidationError{}

// Validate checks the field values on GetMyFriendEventListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyFriendEventListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyFriendEventListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyFriendEventListReqMultiError, or nil if none found.
func (m *GetMyFriendEventListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyFriendEventListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyFriendEventListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyFriendEventListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyFriendEventListReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageIndex

	if len(errors) > 0 {
		return GetMyFriendEventListReqMultiError(errors)
	}

	return nil
}

// GetMyFriendEventListReqMultiError is an error wrapping multiple validation
// errors returned by GetMyFriendEventListReq.ValidateAll() if the designated
// constraints aren't met.
type GetMyFriendEventListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyFriendEventListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyFriendEventListReqMultiError) AllErrors() []error { return m }

// GetMyFriendEventListReqValidationError is the validation error returned by
// GetMyFriendEventListReq.Validate if the designated constraints aren't met.
type GetMyFriendEventListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyFriendEventListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyFriendEventListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyFriendEventListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyFriendEventListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyFriendEventListReqValidationError) ErrorName() string {
	return "GetMyFriendEventListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyFriendEventListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyFriendEventListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyFriendEventListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyFriendEventListReqValidationError{}

// Validate checks the field values on FriendEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendEventMultiError, or
// nil if none found.
func (m *FriendEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromUserId

	// no validation rules for ToUserId

	if all {
		switch v := interface{}(m.GetOtherUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FriendEventValidationError{
					field:  "OtherUserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FriendEventValidationError{
					field:  "OtherUserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOtherUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FriendEventValidationError{
				field:  "OtherUserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FriendEventValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FriendEventValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FriendEventValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FriendEventMultiError(errors)
	}

	return nil
}

// FriendEventMultiError is an error wrapping multiple validation errors
// returned by FriendEvent.ValidateAll() if the designated constraints aren't met.
type FriendEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendEventMultiError) AllErrors() []error { return m }

// FriendEventValidationError is the validation error returned by
// FriendEvent.Validate if the designated constraints aren't met.
type FriendEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendEventValidationError) ErrorName() string { return "FriendEventValidationError" }

// Error satisfies the builtin error interface
func (e FriendEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendEventValidationError{}

// Validate checks the field values on GetMyFriendEventListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyFriendEventListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyFriendEventListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyFriendEventListRespMultiError, or nil if none found.
func (m *GetMyFriendEventListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyFriendEventListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyFriendEventListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyFriendEventListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyFriendEventListRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFriendNotifyList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyFriendEventListRespValidationError{
						field:  fmt.Sprintf("FriendNotifyList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyFriendEventListRespValidationError{
						field:  fmt.Sprintf("FriendNotifyList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyFriendEventListRespValidationError{
					field:  fmt.Sprintf("FriendNotifyList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageIndex

	if len(errors) > 0 {
		return GetMyFriendEventListRespMultiError(errors)
	}

	return nil
}

// GetMyFriendEventListRespMultiError is an error wrapping multiple validation
// errors returned by GetMyFriendEventListResp.ValidateAll() if the designated
// constraints aren't met.
type GetMyFriendEventListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyFriendEventListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyFriendEventListRespMultiError) AllErrors() []error { return m }

// GetMyFriendEventListRespValidationError is the validation error returned by
// GetMyFriendEventListResp.Validate if the designated constraints aren't met.
type GetMyFriendEventListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyFriendEventListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyFriendEventListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyFriendEventListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyFriendEventListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyFriendEventListRespValidationError) ErrorName() string {
	return "GetMyFriendEventListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyFriendEventListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyFriendEventListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyFriendEventListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyFriendEventListRespValidationError{}
