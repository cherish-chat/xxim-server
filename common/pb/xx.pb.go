// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.5
// source: xx.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ******************************************* -- model -- *******************************************
type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`                     // 用户id 只能是 英文/数字/下划线
	Nickname     string                 `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`         // 昵称
	Avatar       string                 `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar"`             // 头像
	Xb           string                 `protobuf:"bytes,4,opt,name=xb,proto3" json:"xb"`                     // 性别 空字符:未知 1:男 2:女
	Birthday     string                 `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday"`         // 生日 2006-01-02
	Signature    string                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature"`       // 个性签名
	Tags         []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags"`                 // 个性标签
	Password     string                 `protobuf:"bytes,8,opt,name=password,proto3" json:"password"`         // 密码
	RegisterInfo *UserData_RegisterInfo `protobuf:"bytes,9,opt,name=registerInfo,proto3" json:"registerInfo"` // 注册时间 2006-01-02 15:04:05
	IsRobot      bool                   `protobuf:"varint,10,opt,name=isRobot,proto3" json:"isRobot"`         // 是否机器人
	IsGuest      bool                   `protobuf:"varint,11,opt,name=isGuest,proto3" json:"isGuest"`         // 是否游客 通过deviceId生成的用户
	IsAdmin      bool                   `protobuf:"varint,12,opt,name=isAdmin,proto3" json:"isAdmin"`         // 是否管理员
	IsOfficial   bool                   `protobuf:"varint,13,opt,name=isOfficial,proto3" json:"isOfficial"`   // 是否官方账号
	UnbanTime    string                 `protobuf:"bytes,14,opt,name=unbanTime,proto3" json:"unbanTime"`      // 解禁时间 2006-01-02 15:04:05
	AdminRemark  string                 `protobuf:"bytes,15,opt,name=adminRemark,proto3" json:"adminRemark"`  // 管理员在后台设置的备注
	Ex           []byte                 `protobuf:"bytes,101,opt,name=ex,proto3" json:"ex"`                   // 扩展字段
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{0}
}

func (x *UserData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserData) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserData) GetXb() string {
	if x != nil {
		return x.Xb
	}
	return ""
}

func (x *UserData) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *UserData) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *UserData) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UserData) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserData) GetRegisterInfo() *UserData_RegisterInfo {
	if x != nil {
		return x.RegisterInfo
	}
	return nil
}

func (x *UserData) GetIsRobot() bool {
	if x != nil {
		return x.IsRobot
	}
	return false
}

func (x *UserData) GetIsGuest() bool {
	if x != nil {
		return x.IsGuest
	}
	return false
}

func (x *UserData) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *UserData) GetIsOfficial() bool {
	if x != nil {
		return x.IsOfficial
	}
	return false
}

func (x *UserData) GetUnbanTime() string {
	if x != nil {
		return x.UnbanTime
	}
	return ""
}

func (x *UserData) GetAdminRemark() string {
	if x != nil {
		return x.AdminRemark
	}
	return ""
}

func (x *UserData) GetEx() []byte {
	if x != nil {
		return x.Ex
	}
	return nil
}

type ConvMemberData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`               // 用户id
	Nickname  string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname"`   // 用户群昵称
	Avatar    string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar"`       // 用户群头像
	JoinTime  string `protobuf:"bytes,5,opt,name=joinTime,proto3" json:"joinTime"`   // 加入时间 2006-01-02 15:04:05
	UnbanTime string `protobuf:"bytes,6,opt,name=unbanTime,proto3" json:"unbanTime"` // 解禁言时间 2006-01-02 15:04:05
	Role      string `protobuf:"bytes,7,opt,name=role,proto3" json:"role"`           // 角色 空字符串:普通成员 1:群主 2:管理员 3:游客
	// 只给这个用户显示的会话信息
	ConvId     string `protobuf:"bytes,11,opt,name=convId,proto3" json:"convId"`         // 会话id
	ConvRemark string `protobuf:"bytes,12,opt,name=convRemark,proto3" json:"convRemark"` // 该用户设置的会话备注
	ConvAvatar string `protobuf:"bytes,13,opt,name=convAvatar,proto3" json:"convAvatar"` // 该用户设置的会话头像
	IsFold     bool   `protobuf:"varint,14,opt,name=isFold,proto3" json:"isFold"`        // 该用户是否折叠会话 收入群助手
	RecvOpt    string `protobuf:"bytes,15,opt,name=recvOpt,proto3" json:"recvOpt"`       // 该用户的消息接收选项 空字符串:接收并通知 1:接收不通知 2:屏蔽
	IsPinned   bool   `protobuf:"varint,16,opt,name=isPinned,proto3" json:"isPinned"`    // 该用户是否置顶会话
	ConvEx     []byte `protobuf:"bytes,17,opt,name=convEx,proto3" json:"convEx"`         // 该用户设置的会话扩展字段
	MinSeq     uint32 `protobuf:"varint,21,opt,name=minSeq,proto3" json:"minSeq"`        // 该用户的最小消息序号
	MaxSeq     uint32 `protobuf:"varint,22,opt,name=maxSeq,proto3" json:"maxSeq"`        // 该用户的最大消息序号
	// 扩展字段
	Ex []byte `protobuf:"bytes,101,opt,name=ex,proto3" json:"ex"` // 其他扩展字段
}

func (x *ConvMemberData) Reset() {
	*x = ConvMemberData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvMemberData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvMemberData) ProtoMessage() {}

func (x *ConvMemberData) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvMemberData.ProtoReflect.Descriptor instead.
func (*ConvMemberData) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{1}
}

func (x *ConvMemberData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConvMemberData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ConvMemberData) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ConvMemberData) GetJoinTime() string {
	if x != nil {
		return x.JoinTime
	}
	return ""
}

func (x *ConvMemberData) GetUnbanTime() string {
	if x != nil {
		return x.UnbanTime
	}
	return ""
}

func (x *ConvMemberData) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ConvMemberData) GetConvId() string {
	if x != nil {
		return x.ConvId
	}
	return ""
}

func (x *ConvMemberData) GetConvRemark() string {
	if x != nil {
		return x.ConvRemark
	}
	return ""
}

func (x *ConvMemberData) GetConvAvatar() string {
	if x != nil {
		return x.ConvAvatar
	}
	return ""
}

func (x *ConvMemberData) GetIsFold() bool {
	if x != nil {
		return x.IsFold
	}
	return false
}

func (x *ConvMemberData) GetRecvOpt() string {
	if x != nil {
		return x.RecvOpt
	}
	return ""
}

func (x *ConvMemberData) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

func (x *ConvMemberData) GetConvEx() []byte {
	if x != nil {
		return x.ConvEx
	}
	return nil
}

func (x *ConvMemberData) GetMinSeq() uint32 {
	if x != nil {
		return x.MinSeq
	}
	return 0
}

func (x *ConvMemberData) GetMaxSeq() uint32 {
	if x != nil {
		return x.MaxSeq
	}
	return 0
}

func (x *ConvMemberData) GetEx() []byte {
	if x != nil {
		return x.Ex
	}
	return nil
}

type GroupData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`                    // 群id 只能是 英文/数字/下划线
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`                // 群名称
	Avatar      string            `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar"`            // 群头像
	Desc        string            `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc"`                // 群描述
	Owner       string            `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner"`              // 群主id
	Members     []*ConvMemberData `protobuf:"bytes,6,rep,name=members,proto3" json:"members"`          // 会话成员列表
	CreateTime  string            `protobuf:"bytes,7,opt,name=createTime,proto3" json:"createTime"`    // 创建时间 2006-01-02 15:04:05
	GroupType   string            `protobuf:"bytes,8,opt,name=groupType,proto3" json:"groupType"`      // 群类型 空字符串:用户默认内置群(用户向好友公布自己的状态) 1:用户自建群
	AdminRemark string            `protobuf:"bytes,11,opt,name=adminRemark,proto3" json:"adminRemark"` // 管理员在后台设置的备注
	AllMuted    bool              `protobuf:"varint,12,opt,name=allMuted,proto3" json:"allMuted"`      // 是否全员禁言
	MsgDataList []*MsgData        `protobuf:"bytes,13,rep,name=msgDataList,proto3" json:"msgDataList"` // 群公告
	MinSeq      uint32            `protobuf:"varint,21,opt,name=minSeq,proto3" json:"minSeq"`          // 该群的最小消息序号
	MaxSeq      uint32            `protobuf:"varint,22,opt,name=maxSeq,proto3" json:"maxSeq"`          // 该群的最大消息序号
	Ex          []byte            `protobuf:"bytes,101,opt,name=ex,proto3" json:"ex"`                  // 扩展字段
}

func (x *GroupData) Reset() {
	*x = GroupData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupData) ProtoMessage() {}

func (x *GroupData) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupData.ProtoReflect.Descriptor instead.
func (*GroupData) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{2}
}

func (x *GroupData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GroupData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupData) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GroupData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GroupData) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GroupData) GetMembers() []*ConvMemberData {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GroupData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *GroupData) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

func (x *GroupData) GetAdminRemark() string {
	if x != nil {
		return x.AdminRemark
	}
	return ""
}

func (x *GroupData) GetAllMuted() bool {
	if x != nil {
		return x.AllMuted
	}
	return false
}

func (x *GroupData) GetMsgDataList() []*MsgData {
	if x != nil {
		return x.MsgDataList
	}
	return nil
}

func (x *GroupData) GetMinSeq() uint32 {
	if x != nil {
		return x.MinSeq
	}
	return 0
}

func (x *GroupData) GetMaxSeq() uint32 {
	if x != nil {
		return x.MaxSeq
	}
	return 0
}

func (x *GroupData) GetEx() []byte {
	if x != nil {
		return x.Ex
	}
	return nil
}

type FriendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`                 // 用户1id-用户2id 两个用户id用-连接 string排序
	Creator    *ConvMemberData `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator"`       // 创建者
	Other      *ConvMemberData `protobuf:"bytes,3,opt,name=other,proto3" json:"other"`           // 好友
	CreateTime string          `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime"` // 创建时间 2006-01-02 15:04:05
	MinSeq     uint32          `protobuf:"varint,21,opt,name=minSeq,proto3" json:"minSeq"`       // 该好友的最小消息序号
	MaxSeq     uint32          `protobuf:"varint,22,opt,name=maxSeq,proto3" json:"maxSeq"`       // 该好友的最大消息序号
	Ex         []byte          `protobuf:"bytes,101,opt,name=ex,proto3" json:"ex"`               // 扩展字段
}

func (x *FriendData) Reset() {
	*x = FriendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendData) ProtoMessage() {}

func (x *FriendData) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendData.ProtoReflect.Descriptor instead.
func (*FriendData) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{3}
}

func (x *FriendData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FriendData) GetCreator() *ConvMemberData {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *FriendData) GetOther() *ConvMemberData {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *FriendData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *FriendData) GetMinSeq() uint32 {
	if x != nil {
		return x.MinSeq
	}
	return 0
}

func (x *FriendData) GetMaxSeq() uint32 {
	if x != nil {
		return x.MaxSeq
	}
	return 0
}

func (x *FriendData) GetEx() []byte {
	if x != nil {
		return x.Ex
	}
	return nil
}

// RegisterReq 注册请求
type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *BaseReq  `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`           // 基础请求
	UserData *UserData `protobuf:"bytes,101,opt,name=userData,proto3" json:"userData"` // 用户信息
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *RegisterReq) GetUserData() *UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// RegisterResp 注册响应
type RegisterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string    `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
	UserData     *UserData `protobuf:"bytes,2,opt,name=userData,proto3" json:"userData"`         // 用户信息
}

func (x *RegisterResp) Reset() {
	*x = RegisterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResp) ProtoMessage() {}

func (x *RegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResp.ProtoReflect.Descriptor instead.
func (*RegisterResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *RegisterResp) GetUserData() *UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// GetUserReq 获取用户信息请求
type GetUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`               // 基础请求
	UserIdList []string `protobuf:"bytes,101,rep,name=userIdList,proto3" json:"userIdList"` // 用户id列表
}

func (x *GetUserReq) Reset() {
	*x = GetUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReq) ProtoMessage() {}

func (x *GetUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReq.ProtoReflect.Descriptor instead.
func (*GetUserReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetUserReq) GetUserIdList() []string {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

// GetUserResp 获取用户信息响应
type GetUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDataList []*UserData `protobuf:"bytes,1,rep,name=userDataList,proto3" json:"userDataList"` // 用户信息列表
	FailedReason string      `protobuf:"bytes,2,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
}

func (x *GetUserResp) Reset() {
	*x = GetUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResp) ProtoMessage() {}

func (x *GetUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResp.ProtoReflect.Descriptor instead.
func (*GetUserResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserResp) GetUserDataList() []*UserData {
	if x != nil {
		return x.UserDataList
	}
	return nil
}

func (x *GetUserResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

// LoginReq 登录请求
type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`           // 基础请求
	UserId   string   `protobuf:"bytes,101,opt,name=userId,proto3" json:"userId"`     // 用户id
	Password string   `protobuf:"bytes,102,opt,name=password,proto3" json:"password"` // 密码
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{8}
}

func (x *LoginReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *LoginReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// LoginResp 登录响应
type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string    `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
	UserData     *UserData `protobuf:"bytes,2,opt,name=userData,proto3" json:"userData"`         // 用户信息
	Token        string    `protobuf:"bytes,3,opt,name=token,proto3" json:"token"`               // token
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{9}
}

func (x *LoginResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *LoginResp) GetUserData() *UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *LoginResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// UpdateUserReq 更新用户信息请求
type UpdateUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *BaseReq  `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`           // 基础请求
	UserData *UserData `protobuf:"bytes,101,opt,name=userData,proto3" json:"userData"` // 用户信息
}

func (x *UpdateUserReq) Reset() {
	*x = UpdateUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserReq) ProtoMessage() {}

func (x *UpdateUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserReq.ProtoReflect.Descriptor instead.
func (*UpdateUserReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateUserReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UpdateUserReq) GetUserData() *UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// UpdateUserResp 更新用户信息响应
type UpdateUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string    `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
	UserData     *UserData `protobuf:"bytes,2,opt,name=userData,proto3" json:"userData"`         // 用户信息
}

func (x *UpdateUserResp) Reset() {
	*x = UpdateUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResp) ProtoMessage() {}

func (x *UpdateUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResp.ProtoReflect.Descriptor instead.
func (*UpdateUserResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateUserResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *UpdateUserResp) GetUserData() *UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// SearchUserReq 搜索用户请求
type SearchUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`            // 基础请求
	Keyword  string   `protobuf:"bytes,101,opt,name=keyword,proto3" json:"keyword"`    // 关键字
	Page     int32    `protobuf:"varint,102,opt,name=page,proto3" json:"page"`         // 页码
	PageSize int32    `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize"` // 每页数量
}

func (x *SearchUserReq) Reset() {
	*x = SearchUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserReq) ProtoMessage() {}

func (x *SearchUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserReq.ProtoReflect.Descriptor instead.
func (*SearchUserReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{12}
}

func (x *SearchUserReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SearchUserReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchUserReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchUserReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// SearchUserResp 搜索用户响应
type SearchUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string      `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
	UserDataList []*UserData `protobuf:"bytes,2,rep,name=userDataList,proto3" json:"userDataList"` // 用户信息列表
	Total        int32       `protobuf:"varint,3,opt,name=total,proto3" json:"total"`              // 总数
}

func (x *SearchUserResp) Reset() {
	*x = SearchUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserResp) ProtoMessage() {}

func (x *SearchUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserResp.ProtoReflect.Descriptor instead.
func (*SearchUserResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{13}
}

func (x *SearchUserResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *SearchUserResp) GetUserDataList() []*UserData {
	if x != nil {
		return x.UserDataList
	}
	return nil
}

func (x *SearchUserResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// GetFriendReq 获取好友请求
type GetFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`       // 基础请求
	UserId string   `protobuf:"bytes,101,opt,name=userId,proto3" json:"userId"` // 用户id
}

func (x *GetFriendReq) Reset() {
	*x = GetFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendReq) ProtoMessage() {}

func (x *GetFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendReq.ProtoReflect.Descriptor instead.
func (*GetFriendReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{14}
}

func (x *GetFriendReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetFriendReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// GetFriendResp 获取好友响应
type GetFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string      `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
	UserDataList []*UserData `protobuf:"bytes,2,rep,name=userDataList,proto3" json:"userDataList"` // 用户信息列表
}

func (x *GetFriendResp) Reset() {
	*x = GetFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendResp) ProtoMessage() {}

func (x *GetFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendResp.ProtoReflect.Descriptor instead.
func (*GetFriendResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{15}
}

func (x *GetFriendResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *GetFriendResp) GetUserDataList() []*UserData {
	if x != nil {
		return x.UserDataList
	}
	return nil
}

// CreateFriendReq 创建好友请求
type CreateFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseReq    `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`               // 基础请求
	FriendData *FriendData `protobuf:"bytes,101,opt,name=friendData,proto3" json:"friendData"` // 好友信息
}

func (x *CreateFriendReq) Reset() {
	*x = CreateFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFriendReq) ProtoMessage() {}

func (x *CreateFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFriendReq.ProtoReflect.Descriptor instead.
func (*CreateFriendReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{16}
}

func (x *CreateFriendReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CreateFriendReq) GetFriendData() *FriendData {
	if x != nil {
		return x.FriendData
	}
	return nil
}

// CreateFriendResp 创建好友响应
type CreateFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
}

func (x *CreateFriendResp) Reset() {
	*x = CreateFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFriendResp) ProtoMessage() {}

func (x *CreateFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFriendResp.ProtoReflect.Descriptor instead.
func (*CreateFriendResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{17}
}

func (x *CreateFriendResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

// UpdateFriendReq 更新好友请求
type UpdateFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseReq    `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`               // 基础请求
	FriendData *FriendData `protobuf:"bytes,101,opt,name=friendData,proto3" json:"friendData"` // 好友信息
}

func (x *UpdateFriendReq) Reset() {
	*x = UpdateFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFriendReq) ProtoMessage() {}

func (x *UpdateFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFriendReq.ProtoReflect.Descriptor instead.
func (*UpdateFriendReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateFriendReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UpdateFriendReq) GetFriendData() *FriendData {
	if x != nil {
		return x.FriendData
	}
	return nil
}

// UpdateFriendResp 更新好友响应
type UpdateFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
}

func (x *UpdateFriendResp) Reset() {
	*x = UpdateFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFriendResp) ProtoMessage() {}

func (x *UpdateFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFriendResp.ProtoReflect.Descriptor instead.
func (*UpdateFriendResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateFriendResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

// DeleteFriendReq 删除好友请求
type DeleteFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseReq    `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`               // 基础请求
	FriendData *FriendData `protobuf:"bytes,101,opt,name=friendData,proto3" json:"friendData"` // 好友信息
}

func (x *DeleteFriendReq) Reset() {
	*x = DeleteFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendReq) ProtoMessage() {}

func (x *DeleteFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendReq.ProtoReflect.Descriptor instead.
func (*DeleteFriendReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteFriendReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *DeleteFriendReq) GetFriendData() *FriendData {
	if x != nil {
		return x.FriendData
	}
	return nil
}

// DeleteFriendResp 删除好友响应
type DeleteFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
}

func (x *DeleteFriendResp) Reset() {
	*x = DeleteFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendResp) ProtoMessage() {}

func (x *DeleteFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendResp.ProtoReflect.Descriptor instead.
func (*DeleteFriendResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteFriendResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

// CreateGroupReq 创建群组请求
type CreateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseReq   `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`               // 基础请求
	GroupData  *GroupData `protobuf:"bytes,101,opt,name=groupData,proto3" json:"groupData"`   // 群信息
	UserIdList []string   `protobuf:"bytes,102,rep,name=userIdList,proto3" json:"userIdList"` // 创建时添加的用户id列表
}

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{22}
}

func (x *CreateGroupReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CreateGroupReq) GetGroupData() *GroupData {
	if x != nil {
		return x.GroupData
	}
	return nil
}

func (x *CreateGroupReq) GetUserIdList() []string {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

// CreateGroupResp 创建群组响应
type CreateGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string     `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
	GroupData    *GroupData `protobuf:"bytes,2,opt,name=groupData,proto3" json:"groupData"`       // 群信息
}

func (x *CreateGroupResp) Reset() {
	*x = CreateGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResp) ProtoMessage() {}

func (x *CreateGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResp.ProtoReflect.Descriptor instead.
func (*CreateGroupResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{23}
}

func (x *CreateGroupResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *CreateGroupResp) GetGroupData() *GroupData {
	if x != nil {
		return x.GroupData
	}
	return nil
}

// GetGroupReq 获取群组请求
type GetGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base        *BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`                 // 基础请求
	GroupIdList []string `protobuf:"bytes,101,rep,name=groupIdList,proto3" json:"groupIdList"` // 群id列表
}

func (x *GetGroupReq) Reset() {
	*x = GetGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupReq) ProtoMessage() {}

func (x *GetGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupReq.ProtoReflect.Descriptor instead.
func (*GetGroupReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{24}
}

func (x *GetGroupReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetGroupReq) GetGroupIdList() []string {
	if x != nil {
		return x.GroupIdList
	}
	return nil
}

// GetGroupResp 获取群组响应
type GetGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason  string       `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"`   // 失败原因
	GroupDataList []*GroupData `protobuf:"bytes,2,rep,name=groupDataList,proto3" json:"groupDataList"` // 群信息列表
}

func (x *GetGroupResp) Reset() {
	*x = GetGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupResp) ProtoMessage() {}

func (x *GetGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupResp.ProtoReflect.Descriptor instead.
func (*GetGroupResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{25}
}

func (x *GetGroupResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *GetGroupResp) GetGroupDataList() []*GroupData {
	if x != nil {
		return x.GroupDataList
	}
	return nil
}

// InviteGroupReq 邀请加入群组请求
type InviteGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`               // 基础请求
	GroupId    string   `protobuf:"bytes,101,opt,name=groupId,proto3" json:"groupId"`       // 群id
	UserIdList []string `protobuf:"bytes,102,rep,name=userIdList,proto3" json:"userIdList"` // 用户id列表
}

func (x *InviteGroupReq) Reset() {
	*x = InviteGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteGroupReq) ProtoMessage() {}

func (x *InviteGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteGroupReq.ProtoReflect.Descriptor instead.
func (*InviteGroupReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{26}
}

func (x *InviteGroupReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *InviteGroupReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *InviteGroupReq) GetUserIdList() []string {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

// InviteGroupResp 邀请加入群组响应
type InviteGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
}

func (x *InviteGroupResp) Reset() {
	*x = InviteGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteGroupResp) ProtoMessage() {}

func (x *InviteGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteGroupResp.ProtoReflect.Descriptor instead.
func (*InviteGroupResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{27}
}

func (x *InviteGroupResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

// UpdateGroupReq 更新群组请求
type UpdateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseReq   `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`             // 基础请求
	GroupData *GroupData `protobuf:"bytes,101,opt,name=groupData,proto3" json:"groupData"` // 群信息
}

func (x *UpdateGroupReq) Reset() {
	*x = UpdateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupReq) ProtoMessage() {}

func (x *UpdateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateGroupReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UpdateGroupReq) GetGroupData() *GroupData {
	if x != nil {
		return x.GroupData
	}
	return nil
}

// UpdateGroupResp 更新群组响应
type UpdateGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
}

func (x *UpdateGroupResp) Reset() {
	*x = UpdateGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupResp) ProtoMessage() {}

func (x *UpdateGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupResp.ProtoReflect.Descriptor instead.
func (*UpdateGroupResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateGroupResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

// QuitGroupMemberReq 退出群组请求
type QuitGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`         // 基础请求
	GroupId string   `protobuf:"bytes,101,opt,name=groupId,proto3" json:"groupId"` // 群id
}

func (x *QuitGroupMemberReq) Reset() {
	*x = QuitGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitGroupMemberReq) ProtoMessage() {}

func (x *QuitGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitGroupMemberReq.ProtoReflect.Descriptor instead.
func (*QuitGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{30}
}

func (x *QuitGroupMemberReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QuitGroupMemberReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// QuitGroupMemberResp 退出群组响应
type QuitGroupMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
}

func (x *QuitGroupMemberResp) Reset() {
	*x = QuitGroupMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitGroupMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitGroupMemberResp) ProtoMessage() {}

func (x *QuitGroupMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitGroupMemberResp.ProtoReflect.Descriptor instead.
func (*QuitGroupMemberResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{31}
}

func (x *QuitGroupMemberResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

// KickGroupMemberReq 踢出群组请求
type KickGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`               // 基础请求
	GroupId    string   `protobuf:"bytes,101,opt,name=groupId,proto3" json:"groupId"`       // 群id
	UserIdList []string `protobuf:"bytes,102,rep,name=userIdList,proto3" json:"userIdList"` // 用户id列表
}

func (x *KickGroupMemberReq) Reset() {
	*x = KickGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickGroupMemberReq) ProtoMessage() {}

func (x *KickGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickGroupMemberReq.ProtoReflect.Descriptor instead.
func (*KickGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{32}
}

func (x *KickGroupMemberReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *KickGroupMemberReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *KickGroupMemberReq) GetUserIdList() []string {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

// KickGroupMemberResp 踢出群组响应
type KickGroupMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
}

func (x *KickGroupMemberResp) Reset() {
	*x = KickGroupMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickGroupMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickGroupMemberResp) ProtoMessage() {}

func (x *KickGroupMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickGroupMemberResp.ProtoReflect.Descriptor instead.
func (*KickGroupMemberResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{33}
}

func (x *KickGroupMemberResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

// ClearGroupMemberReq 清空群组成员请求
type ClearGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *BaseReq `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`         // 基础请求
	GroupId string   `protobuf:"bytes,101,opt,name=groupId,proto3" json:"groupId"` // 群id
}

func (x *ClearGroupMemberReq) Reset() {
	*x = ClearGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearGroupMemberReq) ProtoMessage() {}

func (x *ClearGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearGroupMemberReq.ProtoReflect.Descriptor instead.
func (*ClearGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{34}
}

func (x *ClearGroupMemberReq) GetBase() *BaseReq {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ClearGroupMemberReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// ClearGroupMemberResp 清空群组成员响应
type ClearGroupMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedReason string `protobuf:"bytes,1,opt,name=failedReason,proto3" json:"failedReason"` // 失败原因
}

func (x *ClearGroupMemberResp) Reset() {
	*x = ClearGroupMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearGroupMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearGroupMemberResp) ProtoMessage() {}

func (x *ClearGroupMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearGroupMemberResp.ProtoReflect.Descriptor instead.
func (*ClearGroupMemberResp) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{35}
}

func (x *ClearGroupMemberResp) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

type UserData_RegisterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform       string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform"`             // 平台
	Time           string `protobuf:"bytes,2,opt,name=time,proto3" json:"time"`                     // 注册时间 2006-01-02 15:04:05
	Ip             string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip"`                         // 注册ip
	Device         string `protobuf:"bytes,4,opt,name=device,proto3" json:"device"`                 // 注册设备
	DeviceId       string `protobuf:"bytes,5,opt,name=deviceId,proto3" json:"deviceId"`             // 注册设备
	RegisterSource string `protobuf:"bytes,6,opt,name=registerSource,proto3" json:"registerSource"` // 注册来源
	Salt           string `protobuf:"bytes,7,opt,name=salt,proto3" json:"salt"`                     // 密码盐
	// 国家+省+市+区
	IpCountry  string `protobuf:"bytes,11,opt,name=ipCountry,proto3" json:"ipCountry"`   // ip国家
	IpProvince string `protobuf:"bytes,12,opt,name=ipProvince,proto3" json:"ipProvince"` // ip省
	IpCity     string `protobuf:"bytes,13,opt,name=ipCity,proto3" json:"ipCity"`         // ip市
	IpDistrict string `protobuf:"bytes,14,opt,name=ipDistrict,proto3" json:"ipDistrict"` // ip区
}

func (x *UserData_RegisterInfo) Reset() {
	*x = UserData_RegisterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xx_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData_RegisterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData_RegisterInfo) ProtoMessage() {}

func (x *UserData_RegisterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_xx_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData_RegisterInfo.ProtoReflect.Descriptor instead.
func (*UserData_RegisterInfo) Descriptor() ([]byte, []int) {
	return file_xx_proto_rawDescGZIP(), []int{0, 0}
}

func (x *UserData_RegisterInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserData_RegisterInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *UserData_RegisterInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserData_RegisterInfo) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *UserData_RegisterInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *UserData_RegisterInfo) GetRegisterSource() string {
	if x != nil {
		return x.RegisterSource
	}
	return ""
}

func (x *UserData_RegisterInfo) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *UserData_RegisterInfo) GetIpCountry() string {
	if x != nil {
		return x.IpCountry
	}
	return ""
}

func (x *UserData_RegisterInfo) GetIpProvince() string {
	if x != nil {
		return x.IpProvince
	}
	return ""
}

func (x *UserData_RegisterInfo) GetIpCity() string {
	if x != nil {
		return x.IpCity
	}
	return ""
}

func (x *UserData_RegisterInfo) GetIpDistrict() string {
	if x != nil {
		return x.IpDistrict
	}
	return ""
}

var File_xx_proto protoreflect.FileDescriptor

var file_xx_proto_rawDesc = []byte{
	0x0a, 0x08, 0x78, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x08,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x05, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x62, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x78, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x65, 0x78,
	0x1a, 0xb4, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x70, 0x43, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x70, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x70, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22, 0xa0, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x76,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e,
	0x62, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x6e, 0x62, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x76, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x76, 0x4f, 0x70, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x76, 0x4f, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x45, 0x78, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x45, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x71, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x53,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x65, 0x78, 0x22, 0x8a, 0x03, 0x0a, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6c, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x6c, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x71, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x65, 0x78, 0x22, 0xd4, 0x01, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x65, 0x78, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x65, 0x78, 0x22, 0x58,
	0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x6f, 0x0a, 0x09, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5a, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x7c, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x47, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x62, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x62,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x36, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x36,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x66, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x66, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x35, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x4f, 0x0a, 0x12, 0x51, 0x75, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x39, 0x0a, 0x13, 0x51, 0x75, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x12,
	0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x66, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x0a,
	0x13, 0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x14, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32, 0x9f, 0x07, 0x0a, 0x09, 0x78, 0x78, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2f,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x51, 0x75, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x69, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x4b, 0x69, 0x63,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xx_proto_rawDescOnce sync.Once
	file_xx_proto_rawDescData = file_xx_proto_rawDesc
)

func file_xx_proto_rawDescGZIP() []byte {
	file_xx_proto_rawDescOnce.Do(func() {
		file_xx_proto_rawDescData = protoimpl.X.CompressGZIP(file_xx_proto_rawDescData)
	})
	return file_xx_proto_rawDescData
}

var file_xx_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_xx_proto_goTypes = []interface{}{
	(*UserData)(nil),              // 0: pb.UserData
	(*ConvMemberData)(nil),        // 1: pb.ConvMemberData
	(*GroupData)(nil),             // 2: pb.GroupData
	(*FriendData)(nil),            // 3: pb.FriendData
	(*RegisterReq)(nil),           // 4: pb.RegisterReq
	(*RegisterResp)(nil),          // 5: pb.RegisterResp
	(*GetUserReq)(nil),            // 6: pb.GetUserReq
	(*GetUserResp)(nil),           // 7: pb.GetUserResp
	(*LoginReq)(nil),              // 8: pb.LoginReq
	(*LoginResp)(nil),             // 9: pb.LoginResp
	(*UpdateUserReq)(nil),         // 10: pb.UpdateUserReq
	(*UpdateUserResp)(nil),        // 11: pb.UpdateUserResp
	(*SearchUserReq)(nil),         // 12: pb.SearchUserReq
	(*SearchUserResp)(nil),        // 13: pb.SearchUserResp
	(*GetFriendReq)(nil),          // 14: pb.GetFriendReq
	(*GetFriendResp)(nil),         // 15: pb.GetFriendResp
	(*CreateFriendReq)(nil),       // 16: pb.CreateFriendReq
	(*CreateFriendResp)(nil),      // 17: pb.CreateFriendResp
	(*UpdateFriendReq)(nil),       // 18: pb.UpdateFriendReq
	(*UpdateFriendResp)(nil),      // 19: pb.UpdateFriendResp
	(*DeleteFriendReq)(nil),       // 20: pb.DeleteFriendReq
	(*DeleteFriendResp)(nil),      // 21: pb.DeleteFriendResp
	(*CreateGroupReq)(nil),        // 22: pb.CreateGroupReq
	(*CreateGroupResp)(nil),       // 23: pb.CreateGroupResp
	(*GetGroupReq)(nil),           // 24: pb.GetGroupReq
	(*GetGroupResp)(nil),          // 25: pb.GetGroupResp
	(*InviteGroupReq)(nil),        // 26: pb.InviteGroupReq
	(*InviteGroupResp)(nil),       // 27: pb.InviteGroupResp
	(*UpdateGroupReq)(nil),        // 28: pb.UpdateGroupReq
	(*UpdateGroupResp)(nil),       // 29: pb.UpdateGroupResp
	(*QuitGroupMemberReq)(nil),    // 30: pb.QuitGroupMemberReq
	(*QuitGroupMemberResp)(nil),   // 31: pb.QuitGroupMemberResp
	(*KickGroupMemberReq)(nil),    // 32: pb.KickGroupMemberReq
	(*KickGroupMemberResp)(nil),   // 33: pb.KickGroupMemberResp
	(*ClearGroupMemberReq)(nil),   // 34: pb.ClearGroupMemberReq
	(*ClearGroupMemberResp)(nil),  // 35: pb.ClearGroupMemberResp
	(*UserData_RegisterInfo)(nil), // 36: pb.UserData.RegisterInfo
	(*MsgData)(nil),               // 37: pb.MsgData
	(*BaseReq)(nil),               // 38: pb.BaseReq
}
var file_xx_proto_depIdxs = []int32{
	36, // 0: pb.UserData.registerInfo:type_name -> pb.UserData.RegisterInfo
	1,  // 1: pb.GroupData.members:type_name -> pb.ConvMemberData
	37, // 2: pb.GroupData.msgDataList:type_name -> pb.MsgData
	1,  // 3: pb.FriendData.creator:type_name -> pb.ConvMemberData
	1,  // 4: pb.FriendData.other:type_name -> pb.ConvMemberData
	38, // 5: pb.RegisterReq.base:type_name -> pb.BaseReq
	0,  // 6: pb.RegisterReq.userData:type_name -> pb.UserData
	0,  // 7: pb.RegisterResp.userData:type_name -> pb.UserData
	38, // 8: pb.GetUserReq.base:type_name -> pb.BaseReq
	0,  // 9: pb.GetUserResp.userDataList:type_name -> pb.UserData
	38, // 10: pb.LoginReq.base:type_name -> pb.BaseReq
	0,  // 11: pb.LoginResp.userData:type_name -> pb.UserData
	38, // 12: pb.UpdateUserReq.base:type_name -> pb.BaseReq
	0,  // 13: pb.UpdateUserReq.userData:type_name -> pb.UserData
	0,  // 14: pb.UpdateUserResp.userData:type_name -> pb.UserData
	38, // 15: pb.SearchUserReq.base:type_name -> pb.BaseReq
	0,  // 16: pb.SearchUserResp.userDataList:type_name -> pb.UserData
	38, // 17: pb.GetFriendReq.base:type_name -> pb.BaseReq
	0,  // 18: pb.GetFriendResp.userDataList:type_name -> pb.UserData
	38, // 19: pb.CreateFriendReq.base:type_name -> pb.BaseReq
	3,  // 20: pb.CreateFriendReq.friendData:type_name -> pb.FriendData
	38, // 21: pb.UpdateFriendReq.base:type_name -> pb.BaseReq
	3,  // 22: pb.UpdateFriendReq.friendData:type_name -> pb.FriendData
	38, // 23: pb.DeleteFriendReq.base:type_name -> pb.BaseReq
	3,  // 24: pb.DeleteFriendReq.friendData:type_name -> pb.FriendData
	38, // 25: pb.CreateGroupReq.base:type_name -> pb.BaseReq
	2,  // 26: pb.CreateGroupReq.groupData:type_name -> pb.GroupData
	2,  // 27: pb.CreateGroupResp.groupData:type_name -> pb.GroupData
	38, // 28: pb.GetGroupReq.base:type_name -> pb.BaseReq
	2,  // 29: pb.GetGroupResp.groupDataList:type_name -> pb.GroupData
	38, // 30: pb.InviteGroupReq.base:type_name -> pb.BaseReq
	38, // 31: pb.UpdateGroupReq.base:type_name -> pb.BaseReq
	2,  // 32: pb.UpdateGroupReq.groupData:type_name -> pb.GroupData
	38, // 33: pb.QuitGroupMemberReq.base:type_name -> pb.BaseReq
	38, // 34: pb.KickGroupMemberReq.base:type_name -> pb.BaseReq
	38, // 35: pb.ClearGroupMemberReq.base:type_name -> pb.BaseReq
	4,  // 36: pb.xxService.Register:input_type -> pb.RegisterReq
	6,  // 37: pb.xxService.GetUser:input_type -> pb.GetUserReq
	8,  // 38: pb.xxService.Login:input_type -> pb.LoginReq
	10, // 39: pb.xxService.UpdateUser:input_type -> pb.UpdateUserReq
	12, // 40: pb.xxService.SearchUser:input_type -> pb.SearchUserReq
	14, // 41: pb.xxService.GetFriend:input_type -> pb.GetFriendReq
	16, // 42: pb.xxService.CreateFriend:input_type -> pb.CreateFriendReq
	18, // 43: pb.xxService.UpdateFriend:input_type -> pb.UpdateFriendReq
	20, // 44: pb.xxService.DeleteFriend:input_type -> pb.DeleteFriendReq
	22, // 45: pb.xxService.CreateGroup:input_type -> pb.CreateGroupReq
	24, // 46: pb.xxService.GetGroup:input_type -> pb.GetGroupReq
	26, // 47: pb.xxService.InviteGroup:input_type -> pb.InviteGroupReq
	28, // 48: pb.xxService.UpdateGroup:input_type -> pb.UpdateGroupReq
	30, // 49: pb.xxService.QuitGroupMember:input_type -> pb.QuitGroupMemberReq
	32, // 50: pb.xxService.KickGroupMember:input_type -> pb.KickGroupMemberReq
	34, // 51: pb.xxService.ClearGroupMember:input_type -> pb.ClearGroupMemberReq
	5,  // 52: pb.xxService.Register:output_type -> pb.RegisterResp
	7,  // 53: pb.xxService.GetUser:output_type -> pb.GetUserResp
	9,  // 54: pb.xxService.Login:output_type -> pb.LoginResp
	11, // 55: pb.xxService.UpdateUser:output_type -> pb.UpdateUserResp
	13, // 56: pb.xxService.SearchUser:output_type -> pb.SearchUserResp
	15, // 57: pb.xxService.GetFriend:output_type -> pb.GetFriendResp
	17, // 58: pb.xxService.CreateFriend:output_type -> pb.CreateFriendResp
	19, // 59: pb.xxService.UpdateFriend:output_type -> pb.UpdateFriendResp
	21, // 60: pb.xxService.DeleteFriend:output_type -> pb.DeleteFriendResp
	23, // 61: pb.xxService.CreateGroup:output_type -> pb.CreateGroupResp
	25, // 62: pb.xxService.GetGroup:output_type -> pb.GetGroupResp
	27, // 63: pb.xxService.InviteGroup:output_type -> pb.InviteGroupResp
	29, // 64: pb.xxService.UpdateGroup:output_type -> pb.UpdateGroupResp
	31, // 65: pb.xxService.QuitGroupMember:output_type -> pb.QuitGroupMemberResp
	33, // 66: pb.xxService.KickGroupMember:output_type -> pb.KickGroupMemberResp
	35, // 67: pb.xxService.ClearGroupMember:output_type -> pb.ClearGroupMemberResp
	52, // [52:68] is the sub-list for method output_type
	36, // [36:52] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_xx_proto_init() }
func file_xx_proto_init() {
	if File_xx_proto != nil {
		return
	}
	file_im_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_xx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvMemberData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitGroupMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickGroupMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearGroupMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xx_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData_RegisterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xx_proto_goTypes,
		DependencyIndexes: file_xx_proto_depIdxs,
		MessageInfos:      file_xx_proto_msgTypes,
	}.Build()
	File_xx_proto = out.File
	file_xx_proto_rawDesc = nil
	file_xx_proto_goTypes = nil
	file_xx_proto_depIdxs = nil
}
