// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: im.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ImMQBody with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImMQBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImMQBody with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImMQBodyMultiError, or nil
// if none found.
func (m *ImMQBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ImMQBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Event

	// no validation rules for Data

	if len(errors) > 0 {
		return ImMQBodyMultiError(errors)
	}

	return nil
}

// ImMQBodyMultiError is an error wrapping multiple validation errors returned
// by ImMQBody.ValidateAll() if the designated constraints aren't met.
type ImMQBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImMQBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImMQBodyMultiError) AllErrors() []error { return m }

// ImMQBodyValidationError is the validation error returned by
// ImMQBody.Validate if the designated constraints aren't met.
type ImMQBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImMQBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImMQBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImMQBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImMQBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImMQBodyValidationError) ErrorName() string { return "ImMQBodyValidationError" }

// Error satisfies the builtin error interface
func (e ImMQBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImMQBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImMQBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImMQBodyValidationError{}

// Validate checks the field values on BeforeConnectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BeforeConnectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeforeConnectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeforeConnectReqMultiError, or nil if none found.
func (m *BeforeConnectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BeforeConnectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConnParam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BeforeConnectReqValidationError{
					field:  "ConnParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BeforeConnectReqValidationError{
					field:  "ConnParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnParam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BeforeConnectReqValidationError{
				field:  "ConnParam",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BeforeConnectReqMultiError(errors)
	}

	return nil
}

// BeforeConnectReqMultiError is an error wrapping multiple validation errors
// returned by BeforeConnectReq.ValidateAll() if the designated constraints
// aren't met.
type BeforeConnectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeforeConnectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeforeConnectReqMultiError) AllErrors() []error { return m }

// BeforeConnectReqValidationError is the validation error returned by
// BeforeConnectReq.Validate if the designated constraints aren't met.
type BeforeConnectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeforeConnectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeforeConnectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeforeConnectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeforeConnectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeforeConnectReqValidationError) ErrorName() string { return "BeforeConnectReqValidationError" }

// Error satisfies the builtin error interface
func (e BeforeConnectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeforeConnectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeforeConnectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeforeConnectReqValidationError{}

// Validate checks the field values on BeforeConnectResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BeforeConnectResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeforeConnectResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeforeConnectRespMultiError, or nil if none found.
func (m *BeforeConnectResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BeforeConnectResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return BeforeConnectRespMultiError(errors)
	}

	return nil
}

// BeforeConnectRespMultiError is an error wrapping multiple validation errors
// returned by BeforeConnectResp.ValidateAll() if the designated constraints
// aren't met.
type BeforeConnectRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeforeConnectRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeforeConnectRespMultiError) AllErrors() []error { return m }

// BeforeConnectRespValidationError is the validation error returned by
// BeforeConnectResp.Validate if the designated constraints aren't met.
type BeforeConnectRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeforeConnectRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeforeConnectRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeforeConnectRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeforeConnectRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeforeConnectRespValidationError) ErrorName() string {
	return "BeforeConnectRespValidationError"
}

// Error satisfies the builtin error interface
func (e BeforeConnectRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeforeConnectResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeforeConnectRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeforeConnectRespValidationError{}

// Validate checks the field values on GetUserLatestConnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserLatestConnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserLatestConnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserLatestConnReqMultiError, or nil if none found.
func (m *GetUserLatestConnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserLatestConnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserLatestConnReqMultiError(errors)
	}

	return nil
}

// GetUserLatestConnReqMultiError is an error wrapping multiple validation
// errors returned by GetUserLatestConnReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserLatestConnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserLatestConnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserLatestConnReqMultiError) AllErrors() []error { return m }

// GetUserLatestConnReqValidationError is the validation error returned by
// GetUserLatestConnReq.Validate if the designated constraints aren't met.
type GetUserLatestConnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserLatestConnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserLatestConnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserLatestConnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserLatestConnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserLatestConnReqValidationError) ErrorName() string {
	return "GetUserLatestConnReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserLatestConnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserLatestConnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserLatestConnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserLatestConnReqValidationError{}

// Validate checks the field values on GetUserLatestConnResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserLatestConnResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserLatestConnResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserLatestConnRespMultiError, or nil if none found.
func (m *GetUserLatestConnResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserLatestConnResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Ip

	if all {
		switch v := interface{}(m.GetIpRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserLatestConnRespValidationError{
					field:  "IpRegion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserLatestConnRespValidationError{
					field:  "IpRegion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIpRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserLatestConnRespValidationError{
				field:  "IpRegion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConnectedAt

	// no validation rules for DisconnectedAt

	// no validation rules for Platform

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return GetUserLatestConnRespMultiError(errors)
	}

	return nil
}

// GetUserLatestConnRespMultiError is an error wrapping multiple validation
// errors returned by GetUserLatestConnResp.ValidateAll() if the designated
// constraints aren't met.
type GetUserLatestConnRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserLatestConnRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserLatestConnRespMultiError) AllErrors() []error { return m }

// GetUserLatestConnRespValidationError is the validation error returned by
// GetUserLatestConnResp.Validate if the designated constraints aren't met.
type GetUserLatestConnRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserLatestConnRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserLatestConnRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserLatestConnRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserLatestConnRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserLatestConnRespValidationError) ErrorName() string {
	return "GetUserLatestConnRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserLatestConnRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserLatestConnResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserLatestConnRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserLatestConnRespValidationError{}

// Validate checks the field values on BatchGetUserLatestConnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGetUserLatestConnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetUserLatestConnReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGetUserLatestConnReqMultiError, or nil if none found.
func (m *BatchGetUserLatestConnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetUserLatestConnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchGetUserLatestConnReqMultiError(errors)
	}

	return nil
}

// BatchGetUserLatestConnReqMultiError is an error wrapping multiple validation
// errors returned by BatchGetUserLatestConnReq.ValidateAll() if the
// designated constraints aren't met.
type BatchGetUserLatestConnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetUserLatestConnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetUserLatestConnReqMultiError) AllErrors() []error { return m }

// BatchGetUserLatestConnReqValidationError is the validation error returned by
// BatchGetUserLatestConnReq.Validate if the designated constraints aren't met.
type BatchGetUserLatestConnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetUserLatestConnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetUserLatestConnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetUserLatestConnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetUserLatestConnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetUserLatestConnReqValidationError) ErrorName() string {
	return "BatchGetUserLatestConnReqValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetUserLatestConnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetUserLatestConnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetUserLatestConnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetUserLatestConnReqValidationError{}

// Validate checks the field values on BatchGetUserLatestConnResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGetUserLatestConnResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetUserLatestConnResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGetUserLatestConnRespMultiError, or nil if none found.
func (m *BatchGetUserLatestConnResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetUserLatestConnResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchGetUserLatestConnRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchGetUserLatestConnRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchGetUserLatestConnRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUserLatestConns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchGetUserLatestConnRespValidationError{
						field:  fmt.Sprintf("UserLatestConns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchGetUserLatestConnRespValidationError{
						field:  fmt.Sprintf("UserLatestConns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchGetUserLatestConnRespValidationError{
					field:  fmt.Sprintf("UserLatestConns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchGetUserLatestConnRespMultiError(errors)
	}

	return nil
}

// BatchGetUserLatestConnRespMultiError is an error wrapping multiple
// validation errors returned by BatchGetUserLatestConnResp.ValidateAll() if
// the designated constraints aren't met.
type BatchGetUserLatestConnRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetUserLatestConnRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetUserLatestConnRespMultiError) AllErrors() []error { return m }

// BatchGetUserLatestConnRespValidationError is the validation error returned
// by BatchGetUserLatestConnResp.Validate if the designated constraints aren't met.
type BatchGetUserLatestConnRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetUserLatestConnRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetUserLatestConnRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetUserLatestConnRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetUserLatestConnRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetUserLatestConnRespValidationError) ErrorName() string {
	return "BatchGetUserLatestConnRespValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetUserLatestConnRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetUserLatestConnResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetUserLatestConnRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetUserLatestConnRespValidationError{}

// Validate checks the field values on MsgNotifyOpt with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgNotifyOpt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgNotifyOpt with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgNotifyOptMultiError, or
// nil if none found.
func (m *MsgNotifyOpt) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgNotifyOpt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NoDisturb

	// no validation rules for Preview

	// no validation rules for Sound

	// no validation rules for SoundName

	// no validation rules for Vibrate

	if len(errors) > 0 {
		return MsgNotifyOptMultiError(errors)
	}

	return nil
}

// MsgNotifyOptMultiError is an error wrapping multiple validation errors
// returned by MsgNotifyOpt.ValidateAll() if the designated constraints aren't met.
type MsgNotifyOptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgNotifyOptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgNotifyOptMultiError) AllErrors() []error { return m }

// MsgNotifyOptValidationError is the validation error returned by
// MsgNotifyOpt.Validate if the designated constraints aren't met.
type MsgNotifyOptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgNotifyOptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgNotifyOptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgNotifyOptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgNotifyOptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgNotifyOptValidationError) ErrorName() string { return "MsgNotifyOptValidationError" }

// Error satisfies the builtin error interface
func (e MsgNotifyOptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgNotifyOpt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgNotifyOptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgNotifyOptValidationError{}

// Validate checks the field values on GetAppSystemConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppSystemConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppSystemConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppSystemConfigReqMultiError, or nil if none found.
func (m *GetAppSystemConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppSystemConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppSystemConfigReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppSystemConfigReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppSystemConfigReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAppSystemConfigReqMultiError(errors)
	}

	return nil
}

// GetAppSystemConfigReqMultiError is an error wrapping multiple validation
// errors returned by GetAppSystemConfigReq.ValidateAll() if the designated
// constraints aren't met.
type GetAppSystemConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppSystemConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppSystemConfigReqMultiError) AllErrors() []error { return m }

// GetAppSystemConfigReqValidationError is the validation error returned by
// GetAppSystemConfigReq.Validate if the designated constraints aren't met.
type GetAppSystemConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppSystemConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppSystemConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppSystemConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppSystemConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppSystemConfigReqValidationError) ErrorName() string {
	return "GetAppSystemConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppSystemConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppSystemConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppSystemConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppSystemConfigReqValidationError{}

// Validate checks the field values on GetAppSystemConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppSystemConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppSystemConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppSystemConfigRespMultiError, or nil if none found.
func (m *GetAppSystemConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppSystemConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppSystemConfigRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppSystemConfigRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppSystemConfigRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Configs

	if len(errors) > 0 {
		return GetAppSystemConfigRespMultiError(errors)
	}

	return nil
}

// GetAppSystemConfigRespMultiError is an error wrapping multiple validation
// errors returned by GetAppSystemConfigResp.ValidateAll() if the designated
// constraints aren't met.
type GetAppSystemConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppSystemConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppSystemConfigRespMultiError) AllErrors() []error { return m }

// GetAppSystemConfigRespValidationError is the validation error returned by
// GetAppSystemConfigResp.Validate if the designated constraints aren't met.
type GetAppSystemConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppSystemConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppSystemConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppSystemConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppSystemConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppSystemConfigRespValidationError) ErrorName() string {
	return "GetAppSystemConfigRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppSystemConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppSystemConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppSystemConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppSystemConfigRespValidationError{}
