// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: group.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateGroupReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateGroupReqMultiError,
// or nil if none found.
func (m *CreateGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Name != nil {

		if !_CreateGroupReq_Name_Pattern.MatchString(m.GetName()) {
			err := CreateGroupReqValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^[\\\\s\\\\S]{1,16}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if len(errors) > 0 {
		return CreateGroupReqMultiError(errors)
	}

	return nil
}

// CreateGroupReqMultiError is an error wrapping multiple validation errors
// returned by CreateGroupReq.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupReqMultiError) AllErrors() []error { return m }

// CreateGroupReqValidationError is the validation error returned by
// CreateGroupReq.Validate if the designated constraints aren't met.
type CreateGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupReqValidationError) ErrorName() string { return "CreateGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupReqValidationError{}

var _CreateGroupReq_Name_Pattern = regexp.MustCompile("^[\\s\\S]{1,16}$")

// Validate checks the field values on CreateGroupResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupRespMultiError, or nil if none found.
func (m *CreateGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GroupId != nil {
		// no validation rules for GroupId
	}

	if len(errors) > 0 {
		return CreateGroupRespMultiError(errors)
	}

	return nil
}

// CreateGroupRespMultiError is an error wrapping multiple validation errors
// returned by CreateGroupResp.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupRespMultiError) AllErrors() []error { return m }

// CreateGroupRespValidationError is the validation error returned by
// CreateGroupResp.Validate if the designated constraints aren't met.
type CreateGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRespValidationError) ErrorName() string { return "CreateGroupRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRespValidationError{}

// Validate checks the field values on GetGroupHomeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupHomeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupHomeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupHomeReqMultiError, or nil if none found.
func (m *GetGroupHomeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupHomeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupHomeReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupHomeReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupHomeReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetGroupId()) < 1 {
		err := GetGroupHomeReqValidationError{
			field:  "GroupId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGroupHomeReqMultiError(errors)
	}

	return nil
}

// GetGroupHomeReqMultiError is an error wrapping multiple validation errors
// returned by GetGroupHomeReq.ValidateAll() if the designated constraints
// aren't met.
type GetGroupHomeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupHomeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupHomeReqMultiError) AllErrors() []error { return m }

// GetGroupHomeReqValidationError is the validation error returned by
// GetGroupHomeReq.Validate if the designated constraints aren't met.
type GetGroupHomeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupHomeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupHomeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupHomeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupHomeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupHomeReqValidationError) ErrorName() string { return "GetGroupHomeReqValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupHomeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupHomeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupHomeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupHomeReqValidationError{}

// Validate checks the field values on GetGroupHomeResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupHomeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupHomeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupHomeRespMultiError, or nil if none found.
func (m *GetGroupHomeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupHomeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupHomeRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupHomeRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupHomeRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for CreatedAt

	// no validation rules for MemberCount

	// no validation rules for Introduction

	for idx, item := range m.GetMemberStatistics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupHomeRespValidationError{
						field:  fmt.Sprintf("MemberStatistics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupHomeRespValidationError{
						field:  fmt.Sprintf("MemberStatistics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupHomeRespValidationError{
					field:  fmt.Sprintf("MemberStatistics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupHomeRespMultiError(errors)
	}

	return nil
}

// GetGroupHomeRespMultiError is an error wrapping multiple validation errors
// returned by GetGroupHomeResp.ValidateAll() if the designated constraints
// aren't met.
type GetGroupHomeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupHomeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupHomeRespMultiError) AllErrors() []error { return m }

// GetGroupHomeRespValidationError is the validation error returned by
// GetGroupHomeResp.Validate if the designated constraints aren't met.
type GetGroupHomeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupHomeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupHomeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupHomeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupHomeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupHomeRespValidationError) ErrorName() string { return "GetGroupHomeRespValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupHomeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupHomeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupHomeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupHomeRespValidationError{}

// Validate checks the field values on InviteFriendToGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteFriendToGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteFriendToGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteFriendToGroupReqMultiError, or nil if none found.
func (m *InviteFriendToGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteFriendToGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InviteFriendToGroupReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InviteFriendToGroupReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteFriendToGroupReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	if m.MinSeq != nil {
		// no validation rules for MinSeq
	}

	if len(errors) > 0 {
		return InviteFriendToGroupReqMultiError(errors)
	}

	return nil
}

// InviteFriendToGroupReqMultiError is an error wrapping multiple validation
// errors returned by InviteFriendToGroupReq.ValidateAll() if the designated
// constraints aren't met.
type InviteFriendToGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteFriendToGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteFriendToGroupReqMultiError) AllErrors() []error { return m }

// InviteFriendToGroupReqValidationError is the validation error returned by
// InviteFriendToGroupReq.Validate if the designated constraints aren't met.
type InviteFriendToGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteFriendToGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteFriendToGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteFriendToGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteFriendToGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteFriendToGroupReqValidationError) ErrorName() string {
	return "InviteFriendToGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e InviteFriendToGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteFriendToGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteFriendToGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteFriendToGroupReqValidationError{}

// Validate checks the field values on InviteFriendToGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteFriendToGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteFriendToGroupResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteFriendToGroupRespMultiError, or nil if none found.
func (m *InviteFriendToGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteFriendToGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InviteFriendToGroupRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InviteFriendToGroupRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteFriendToGroupRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InviteFriendToGroupRespMultiError(errors)
	}

	return nil
}

// InviteFriendToGroupRespMultiError is an error wrapping multiple validation
// errors returned by InviteFriendToGroupResp.ValidateAll() if the designated
// constraints aren't met.
type InviteFriendToGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteFriendToGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteFriendToGroupRespMultiError) AllErrors() []error { return m }

// InviteFriendToGroupRespValidationError is the validation error returned by
// InviteFriendToGroupResp.Validate if the designated constraints aren't met.
type InviteFriendToGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteFriendToGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteFriendToGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteFriendToGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteFriendToGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteFriendToGroupRespValidationError) ErrorName() string {
	return "InviteFriendToGroupRespValidationError"
}

// Error satisfies the builtin error interface
func (e InviteFriendToGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteFriendToGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteFriendToGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteFriendToGroupRespValidationError{}

// Validate checks the field values on CreateGroupNoticeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupNoticeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupNoticeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupNoticeReqMultiError, or nil if none found.
func (m *CreateGroupNoticeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupNoticeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupNoticeReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupNoticeReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupNoticeReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	// no validation rules for Title

	// no validation rules for Content

	if len(errors) > 0 {
		return CreateGroupNoticeReqMultiError(errors)
	}

	return nil
}

// CreateGroupNoticeReqMultiError is an error wrapping multiple validation
// errors returned by CreateGroupNoticeReq.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupNoticeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupNoticeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupNoticeReqMultiError) AllErrors() []error { return m }

// CreateGroupNoticeReqValidationError is the validation error returned by
// CreateGroupNoticeReq.Validate if the designated constraints aren't met.
type CreateGroupNoticeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupNoticeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupNoticeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupNoticeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupNoticeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupNoticeReqValidationError) ErrorName() string {
	return "CreateGroupNoticeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupNoticeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupNoticeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupNoticeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupNoticeReqValidationError{}

// Validate checks the field values on CreateGroupNoticeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupNoticeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupNoticeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupNoticeRespMultiError, or nil if none found.
func (m *CreateGroupNoticeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupNoticeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupNoticeRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupNoticeRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupNoticeRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGroupNoticeRespMultiError(errors)
	}

	return nil
}

// CreateGroupNoticeRespMultiError is an error wrapping multiple validation
// errors returned by CreateGroupNoticeResp.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupNoticeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupNoticeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupNoticeRespMultiError) AllErrors() []error { return m }

// CreateGroupNoticeRespValidationError is the validation error returned by
// CreateGroupNoticeResp.Validate if the designated constraints aren't met.
type CreateGroupNoticeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupNoticeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupNoticeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupNoticeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupNoticeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupNoticeRespValidationError) ErrorName() string {
	return "CreateGroupNoticeRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupNoticeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupNoticeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupNoticeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupNoticeRespValidationError{}

// Validate checks the field values on DeleteGroupNoticeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupNoticeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupNoticeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupNoticeReqMultiError, or nil if none found.
func (m *DeleteGroupNoticeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupNoticeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteGroupNoticeReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteGroupNoticeReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteGroupNoticeReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	// no validation rules for NoticeId

	if len(errors) > 0 {
		return DeleteGroupNoticeReqMultiError(errors)
	}

	return nil
}

// DeleteGroupNoticeReqMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupNoticeReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteGroupNoticeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupNoticeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupNoticeReqMultiError) AllErrors() []error { return m }

// DeleteGroupNoticeReqValidationError is the validation error returned by
// DeleteGroupNoticeReq.Validate if the designated constraints aren't met.
type DeleteGroupNoticeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupNoticeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupNoticeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupNoticeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupNoticeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupNoticeReqValidationError) ErrorName() string {
	return "DeleteGroupNoticeReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupNoticeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupNoticeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupNoticeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupNoticeReqValidationError{}

// Validate checks the field values on DeleteGroupNoticeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupNoticeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupNoticeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupNoticeRespMultiError, or nil if none found.
func (m *DeleteGroupNoticeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupNoticeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteGroupNoticeRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteGroupNoticeRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteGroupNoticeRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteGroupNoticeRespMultiError(errors)
	}

	return nil
}

// DeleteGroupNoticeRespMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupNoticeResp.ValidateAll() if the designated
// constraints aren't met.
type DeleteGroupNoticeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupNoticeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupNoticeRespMultiError) AllErrors() []error { return m }

// DeleteGroupNoticeRespValidationError is the validation error returned by
// DeleteGroupNoticeResp.Validate if the designated constraints aren't met.
type DeleteGroupNoticeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupNoticeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupNoticeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupNoticeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupNoticeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupNoticeRespValidationError) ErrorName() string {
	return "DeleteGroupNoticeRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupNoticeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupNoticeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupNoticeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupNoticeRespValidationError{}

// Validate checks the field values on EditGroupNoticeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditGroupNoticeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditGroupNoticeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditGroupNoticeReqMultiError, or nil if none found.
func (m *EditGroupNoticeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditGroupNoticeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditGroupNoticeReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditGroupNoticeReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditGroupNoticeReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	// no validation rules for NoticeId

	// no validation rules for Title

	// no validation rules for Content

	if len(errors) > 0 {
		return EditGroupNoticeReqMultiError(errors)
	}

	return nil
}

// EditGroupNoticeReqMultiError is an error wrapping multiple validation errors
// returned by EditGroupNoticeReq.ValidateAll() if the designated constraints
// aren't met.
type EditGroupNoticeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditGroupNoticeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditGroupNoticeReqMultiError) AllErrors() []error { return m }

// EditGroupNoticeReqValidationError is the validation error returned by
// EditGroupNoticeReq.Validate if the designated constraints aren't met.
type EditGroupNoticeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditGroupNoticeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditGroupNoticeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditGroupNoticeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditGroupNoticeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditGroupNoticeReqValidationError) ErrorName() string {
	return "EditGroupNoticeReqValidationError"
}

// Error satisfies the builtin error interface
func (e EditGroupNoticeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditGroupNoticeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditGroupNoticeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditGroupNoticeReqValidationError{}

// Validate checks the field values on EditGroupNoticeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditGroupNoticeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditGroupNoticeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditGroupNoticeRespMultiError, or nil if none found.
func (m *EditGroupNoticeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *EditGroupNoticeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditGroupNoticeRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditGroupNoticeRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditGroupNoticeRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditGroupNoticeRespMultiError(errors)
	}

	return nil
}

// EditGroupNoticeRespMultiError is an error wrapping multiple validation
// errors returned by EditGroupNoticeResp.ValidateAll() if the designated
// constraints aren't met.
type EditGroupNoticeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditGroupNoticeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditGroupNoticeRespMultiError) AllErrors() []error { return m }

// EditGroupNoticeRespValidationError is the validation error returned by
// EditGroupNoticeResp.Validate if the designated constraints aren't met.
type EditGroupNoticeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditGroupNoticeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditGroupNoticeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditGroupNoticeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditGroupNoticeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditGroupNoticeRespValidationError) ErrorName() string {
	return "EditGroupNoticeRespValidationError"
}

// Error satisfies the builtin error interface
func (e EditGroupNoticeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditGroupNoticeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditGroupNoticeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditGroupNoticeRespValidationError{}

// Validate checks the field values on GetGroupNoticeListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupNoticeListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupNoticeListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupNoticeListReqMultiError, or nil if none found.
func (m *GetGroupNoticeListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupNoticeListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupNoticeListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupNoticeListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupNoticeListReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	if m.Page != nil {

		if all {
			switch v := interface{}(m.GetPage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupNoticeListReqValidationError{
						field:  "Page",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupNoticeListReqValidationError{
						field:  "Page",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupNoticeListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupNoticeListReqMultiError(errors)
	}

	return nil
}

// GetGroupNoticeListReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupNoticeListReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupNoticeListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupNoticeListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupNoticeListReqMultiError) AllErrors() []error { return m }

// GetGroupNoticeListReqValidationError is the validation error returned by
// GetGroupNoticeListReq.Validate if the designated constraints aren't met.
type GetGroupNoticeListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupNoticeListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupNoticeListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupNoticeListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupNoticeListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupNoticeListReqValidationError) ErrorName() string {
	return "GetGroupNoticeListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupNoticeListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupNoticeListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupNoticeListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupNoticeListReqValidationError{}

// Validate checks the field values on GroupNotice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupNotice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupNotice with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupNoticeMultiError, or
// nil if none found.
func (m *GroupNotice) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupNotice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NoticeId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GroupNoticeMultiError(errors)
	}

	return nil
}

// GroupNoticeMultiError is an error wrapping multiple validation errors
// returned by GroupNotice.ValidateAll() if the designated constraints aren't met.
type GroupNoticeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupNoticeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupNoticeMultiError) AllErrors() []error { return m }

// GroupNoticeValidationError is the validation error returned by
// GroupNotice.Validate if the designated constraints aren't met.
type GroupNoticeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupNoticeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupNoticeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupNoticeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupNoticeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupNoticeValidationError) ErrorName() string { return "GroupNoticeValidationError" }

// Error satisfies the builtin error interface
func (e GroupNoticeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupNotice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupNoticeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupNoticeValidationError{}

// Validate checks the field values on GetGroupNoticeListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupNoticeListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupNoticeListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupNoticeListRespMultiError, or nil if none found.
func (m *GetGroupNoticeListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupNoticeListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupNoticeListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupNoticeListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupNoticeListRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetGroupNotices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupNoticeListRespValidationError{
						field:  fmt.Sprintf("GroupNotices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupNoticeListRespValidationError{
						field:  fmt.Sprintf("GroupNotices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupNoticeListRespValidationError{
					field:  fmt.Sprintf("GroupNotices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupNoticeListRespMultiError(errors)
	}

	return nil
}

// GetGroupNoticeListRespMultiError is an error wrapping multiple validation
// errors returned by GetGroupNoticeListResp.ValidateAll() if the designated
// constraints aren't met.
type GetGroupNoticeListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupNoticeListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupNoticeListRespMultiError) AllErrors() []error { return m }

// GetGroupNoticeListRespValidationError is the validation error returned by
// GetGroupNoticeListResp.Validate if the designated constraints aren't met.
type GetGroupNoticeListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupNoticeListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupNoticeListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupNoticeListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupNoticeListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupNoticeListRespValidationError) ErrorName() string {
	return "GetGroupNoticeListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupNoticeListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupNoticeListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupNoticeListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupNoticeListRespValidationError{}

// Validate checks the field values on SetGroupMemberInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetGroupMemberInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGroupMemberInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGroupMemberInfoReqMultiError, or nil if none found.
func (m *SetGroupMemberInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGroupMemberInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupMemberInfoReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupMemberInfoReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupMemberInfoReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	// no validation rules for MemberId

	// no validation rules for Notice

	if m.Remark != nil {
		// no validation rules for Remark
	}

	if m.Role != nil {
		// no validation rules for Role
	}

	if m.UnbanTime != nil {
		// no validation rules for UnbanTime
	}

	if m.GroupRemark != nil {
		// no validation rules for GroupRemark
	}

	if len(errors) > 0 {
		return SetGroupMemberInfoReqMultiError(errors)
	}

	return nil
}

// SetGroupMemberInfoReqMultiError is an error wrapping multiple validation
// errors returned by SetGroupMemberInfoReq.ValidateAll() if the designated
// constraints aren't met.
type SetGroupMemberInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGroupMemberInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGroupMemberInfoReqMultiError) AllErrors() []error { return m }

// SetGroupMemberInfoReqValidationError is the validation error returned by
// SetGroupMemberInfoReq.Validate if the designated constraints aren't met.
type SetGroupMemberInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGroupMemberInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGroupMemberInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGroupMemberInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGroupMemberInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGroupMemberInfoReqValidationError) ErrorName() string {
	return "SetGroupMemberInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetGroupMemberInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGroupMemberInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGroupMemberInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGroupMemberInfoReqValidationError{}

// Validate checks the field values on SetGroupMemberInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetGroupMemberInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGroupMemberInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGroupMemberInfoRespMultiError, or nil if none found.
func (m *SetGroupMemberInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGroupMemberInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupMemberInfoRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupMemberInfoRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupMemberInfoRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetGroupMemberInfoRespMultiError(errors)
	}

	return nil
}

// SetGroupMemberInfoRespMultiError is an error wrapping multiple validation
// errors returned by SetGroupMemberInfoResp.ValidateAll() if the designated
// constraints aren't met.
type SetGroupMemberInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGroupMemberInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGroupMemberInfoRespMultiError) AllErrors() []error { return m }

// SetGroupMemberInfoRespValidationError is the validation error returned by
// SetGroupMemberInfoResp.Validate if the designated constraints aren't met.
type SetGroupMemberInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGroupMemberInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGroupMemberInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGroupMemberInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGroupMemberInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGroupMemberInfoRespValidationError) ErrorName() string {
	return "SetGroupMemberInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetGroupMemberInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGroupMemberInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGroupMemberInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGroupMemberInfoRespValidationError{}

// Validate checks the field values on GetGroupMemberInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberInfoReqMultiError, or nil if none found.
func (m *GetGroupMemberInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberInfoReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberInfoReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberInfoReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	// no validation rules for MemberId

	if len(errors) > 0 {
		return GetGroupMemberInfoReqMultiError(errors)
	}

	return nil
}

// GetGroupMemberInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberInfoReqMultiError) AllErrors() []error { return m }

// GetGroupMemberInfoReqValidationError is the validation error returned by
// GetGroupMemberInfoReq.Validate if the designated constraints aren't met.
type GetGroupMemberInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberInfoReqValidationError) ErrorName() string {
	return "GetGroupMemberInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberInfoReqValidationError{}

// Validate checks the field values on GroupMemberInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberInfoMultiError, or nil if none found.
func (m *GroupMemberInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for MemberId

	// no validation rules for Nickname

	// no validation rules for Remark

	// no validation rules for Top

	// no validation rules for Disturb

	// no validation rules for DisturbMore

	// no validation rules for ChatBg

	// no validation rules for Role

	if len(errors) > 0 {
		return GroupMemberInfoMultiError(errors)
	}

	return nil
}

// GroupMemberInfoMultiError is an error wrapping multiple validation errors
// returned by GroupMemberInfo.ValidateAll() if the designated constraints
// aren't met.
type GroupMemberInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberInfoMultiError) AllErrors() []error { return m }

// GroupMemberInfoValidationError is the validation error returned by
// GroupMemberInfo.Validate if the designated constraints aren't met.
type GroupMemberInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberInfoValidationError) ErrorName() string { return "GroupMemberInfoValidationError" }

// Error satisfies the builtin error interface
func (e GroupMemberInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberInfoValidationError{}

// Validate checks the field values on GetGroupMemberInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberInfoRespMultiError, or nil if none found.
func (m *GetGroupMemberInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberInfoRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberInfoRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberInfoRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGroupMemberInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberInfoRespValidationError{
					field:  "GroupMemberInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberInfoRespValidationError{
					field:  "GroupMemberInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupMemberInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberInfoRespValidationError{
				field:  "GroupMemberInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupMemberInfoRespMultiError(errors)
	}

	return nil
}

// GetGroupMemberInfoRespMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberInfoResp.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberInfoRespMultiError) AllErrors() []error { return m }

// GetGroupMemberInfoRespValidationError is the validation error returned by
// GetGroupMemberInfoResp.Validate if the designated constraints aren't met.
type GetGroupMemberInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberInfoRespValidationError) ErrorName() string {
	return "GetGroupMemberInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberInfoRespValidationError{}

// Validate checks the field values on EditGroupInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditGroupInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditGroupInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditGroupInfoReqMultiError, or nil if none found.
func (m *EditGroupInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditGroupInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditGroupInfoReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditGroupInfoReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditGroupInfoReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.Introduction != nil {
		// no validation rules for Introduction
	}

	if len(errors) > 0 {
		return EditGroupInfoReqMultiError(errors)
	}

	return nil
}

// EditGroupInfoReqMultiError is an error wrapping multiple validation errors
// returned by EditGroupInfoReq.ValidateAll() if the designated constraints
// aren't met.
type EditGroupInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditGroupInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditGroupInfoReqMultiError) AllErrors() []error { return m }

// EditGroupInfoReqValidationError is the validation error returned by
// EditGroupInfoReq.Validate if the designated constraints aren't met.
type EditGroupInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditGroupInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditGroupInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditGroupInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditGroupInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditGroupInfoReqValidationError) ErrorName() string { return "EditGroupInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e EditGroupInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditGroupInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditGroupInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditGroupInfoReqValidationError{}

// Validate checks the field values on EditGroupInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditGroupInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditGroupInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditGroupInfoRespMultiError, or nil if none found.
func (m *EditGroupInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *EditGroupInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditGroupInfoRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditGroupInfoRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditGroupInfoRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditGroupInfoRespMultiError(errors)
	}

	return nil
}

// EditGroupInfoRespMultiError is an error wrapping multiple validation errors
// returned by EditGroupInfoResp.ValidateAll() if the designated constraints
// aren't met.
type EditGroupInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditGroupInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditGroupInfoRespMultiError) AllErrors() []error { return m }

// EditGroupInfoRespValidationError is the validation error returned by
// EditGroupInfoResp.Validate if the designated constraints aren't met.
type EditGroupInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditGroupInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditGroupInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditGroupInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditGroupInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditGroupInfoRespValidationError) ErrorName() string {
	return "EditGroupInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e EditGroupInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditGroupInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditGroupInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditGroupInfoRespValidationError{}

// Validate checks the field values on TransferGroupOwnerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferGroupOwnerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferGroupOwnerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferGroupOwnerReqMultiError, or nil if none found.
func (m *TransferGroupOwnerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferGroupOwnerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransferGroupOwnerReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransferGroupOwnerReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferGroupOwnerReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	// no validation rules for NewOwner

	if len(errors) > 0 {
		return TransferGroupOwnerReqMultiError(errors)
	}

	return nil
}

// TransferGroupOwnerReqMultiError is an error wrapping multiple validation
// errors returned by TransferGroupOwnerReq.ValidateAll() if the designated
// constraints aren't met.
type TransferGroupOwnerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferGroupOwnerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferGroupOwnerReqMultiError) AllErrors() []error { return m }

// TransferGroupOwnerReqValidationError is the validation error returned by
// TransferGroupOwnerReq.Validate if the designated constraints aren't met.
type TransferGroupOwnerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferGroupOwnerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferGroupOwnerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferGroupOwnerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferGroupOwnerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferGroupOwnerReqValidationError) ErrorName() string {
	return "TransferGroupOwnerReqValidationError"
}

// Error satisfies the builtin error interface
func (e TransferGroupOwnerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferGroupOwnerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferGroupOwnerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferGroupOwnerReqValidationError{}

// Validate checks the field values on TransferGroupOwnerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferGroupOwnerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferGroupOwnerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferGroupOwnerRespMultiError, or nil if none found.
func (m *TransferGroupOwnerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferGroupOwnerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransferGroupOwnerRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransferGroupOwnerRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferGroupOwnerRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransferGroupOwnerRespMultiError(errors)
	}

	return nil
}

// TransferGroupOwnerRespMultiError is an error wrapping multiple validation
// errors returned by TransferGroupOwnerResp.ValidateAll() if the designated
// constraints aren't met.
type TransferGroupOwnerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferGroupOwnerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferGroupOwnerRespMultiError) AllErrors() []error { return m }

// TransferGroupOwnerRespValidationError is the validation error returned by
// TransferGroupOwnerResp.Validate if the designated constraints aren't met.
type TransferGroupOwnerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferGroupOwnerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferGroupOwnerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferGroupOwnerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferGroupOwnerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferGroupOwnerRespValidationError) ErrorName() string {
	return "TransferGroupOwnerRespValidationError"
}

// Error satisfies the builtin error interface
func (e TransferGroupOwnerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferGroupOwnerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferGroupOwnerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferGroupOwnerRespValidationError{}

// Validate checks the field values on KickGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KickGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KickGroupMemberReqMultiError, or nil if none found.
func (m *KickGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *KickGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KickGroupMemberReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KickGroupMemberReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KickGroupMemberReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	// no validation rules for MemberId

	if len(errors) > 0 {
		return KickGroupMemberReqMultiError(errors)
	}

	return nil
}

// KickGroupMemberReqMultiError is an error wrapping multiple validation errors
// returned by KickGroupMemberReq.ValidateAll() if the designated constraints
// aren't met.
type KickGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickGroupMemberReqMultiError) AllErrors() []error { return m }

// KickGroupMemberReqValidationError is the validation error returned by
// KickGroupMemberReq.Validate if the designated constraints aren't met.
type KickGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickGroupMemberReqValidationError) ErrorName() string {
	return "KickGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e KickGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickGroupMemberReqValidationError{}

// Validate checks the field values on KickGroupMemberResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KickGroupMemberResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickGroupMemberResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KickGroupMemberRespMultiError, or nil if none found.
func (m *KickGroupMemberResp) ValidateAll() error {
	return m.validate(true)
}

func (m *KickGroupMemberResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KickGroupMemberRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KickGroupMemberRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KickGroupMemberRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return KickGroupMemberRespMultiError(errors)
	}

	return nil
}

// KickGroupMemberRespMultiError is an error wrapping multiple validation
// errors returned by KickGroupMemberResp.ValidateAll() if the designated
// constraints aren't met.
type KickGroupMemberRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickGroupMemberRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickGroupMemberRespMultiError) AllErrors() []error { return m }

// KickGroupMemberRespValidationError is the validation error returned by
// KickGroupMemberResp.Validate if the designated constraints aren't met.
type KickGroupMemberRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickGroupMemberRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickGroupMemberRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickGroupMemberRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickGroupMemberRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickGroupMemberRespValidationError) ErrorName() string {
	return "KickGroupMemberRespValidationError"
}

// Error satisfies the builtin error interface
func (e KickGroupMemberRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickGroupMemberResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickGroupMemberRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickGroupMemberRespValidationError{}

// Validate checks the field values on GetGroupMemberListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberListReqMultiError, or nil if none found.
func (m *GetGroupMemberListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberListReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberListReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberListReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberListReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberListReqValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberListReqValidationError{
					field:  "Opt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberListReqValidationError{
					field:  "Opt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberListReqValidationError{
				field:  "Opt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupMemberListReqMultiError(errors)
	}

	return nil
}

// GetGroupMemberListReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberListReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberListReqMultiError) AllErrors() []error { return m }

// GetGroupMemberListReqValidationError is the validation error returned by
// GetGroupMemberListReq.Validate if the designated constraints aren't met.
type GetGroupMemberListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberListReqValidationError) ErrorName() string {
	return "GetGroupMemberListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberListReqValidationError{}

// Validate checks the field values on GetGroupMemberListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberListRespMultiError, or nil if none found.
func (m *GetGroupMemberListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberListRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetGroupMemberList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupMemberListRespValidationError{
						field:  fmt.Sprintf("GroupMemberList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupMemberListRespValidationError{
						field:  fmt.Sprintf("GroupMemberList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupMemberListRespValidationError{
					field:  fmt.Sprintf("GroupMemberList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupMemberListRespMultiError(errors)
	}

	return nil
}

// GetGroupMemberListRespMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberListResp.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberListRespMultiError) AllErrors() []error { return m }

// GetGroupMemberListRespValidationError is the validation error returned by
// GetGroupMemberListResp.Validate if the designated constraints aren't met.
type GetGroupMemberListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberListRespValidationError) ErrorName() string {
	return "GetGroupMemberListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberListRespValidationError{}

// Validate checks the field values on GetMyGroupListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMyGroupListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyGroupListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyGroupListReqMultiError, or nil if none found.
func (m *GetMyGroupListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyGroupListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyGroupListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyGroupListReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyGroupListReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyGroupListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyGroupListReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyGroupListReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyGroupListReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyGroupListReqValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyGroupListReqValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Opt

	if len(errors) > 0 {
		return GetMyGroupListReqMultiError(errors)
	}

	return nil
}

// GetMyGroupListReqMultiError is an error wrapping multiple validation errors
// returned by GetMyGroupListReq.ValidateAll() if the designated constraints
// aren't met.
type GetMyGroupListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyGroupListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyGroupListReqMultiError) AllErrors() []error { return m }

// GetMyGroupListReqValidationError is the validation error returned by
// GetMyGroupListReq.Validate if the designated constraints aren't met.
type GetMyGroupListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyGroupListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyGroupListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyGroupListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyGroupListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyGroupListReqValidationError) ErrorName() string {
	return "GetMyGroupListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyGroupListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyGroupListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyGroupListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyGroupListReqValidationError{}

// Validate checks the field values on GroupBaseInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupBaseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupBaseInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupBaseInfoMultiError, or
// nil if none found.
func (m *GroupBaseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupBaseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Avatar

	if len(errors) > 0 {
		return GroupBaseInfoMultiError(errors)
	}

	return nil
}

// GroupBaseInfoMultiError is an error wrapping multiple validation errors
// returned by GroupBaseInfo.ValidateAll() if the designated constraints
// aren't met.
type GroupBaseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupBaseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupBaseInfoMultiError) AllErrors() []error { return m }

// GroupBaseInfoValidationError is the validation error returned by
// GroupBaseInfo.Validate if the designated constraints aren't met.
type GroupBaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupBaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupBaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupBaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupBaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupBaseInfoValidationError) ErrorName() string { return "GroupBaseInfoValidationError" }

// Error satisfies the builtin error interface
func (e GroupBaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupBaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupBaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupBaseInfoValidationError{}

// Validate checks the field values on GetMyGroupListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyGroupListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyGroupListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyGroupListRespMultiError, or nil if none found.
func (m *GetMyGroupListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyGroupListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyGroupListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyGroupListRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyGroupListRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetGroupMap()))
		i := 0
		for key := range m.GetGroupMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetGroupMap()[key]
			_ = val

			// no validation rules for GroupMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetMyGroupListRespValidationError{
							field:  fmt.Sprintf("GroupMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetMyGroupListRespValidationError{
							field:  fmt.Sprintf("GroupMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetMyGroupListRespValidationError{
						field:  fmt.Sprintf("GroupMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetMyGroupListRespMultiError(errors)
	}

	return nil
}

// GetMyGroupListRespMultiError is an error wrapping multiple validation errors
// returned by GetMyGroupListResp.ValidateAll() if the designated constraints
// aren't met.
type GetMyGroupListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyGroupListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyGroupListRespMultiError) AllErrors() []error { return m }

// GetMyGroupListRespValidationError is the validation error returned by
// GetMyGroupListResp.Validate if the designated constraints aren't met.
type GetMyGroupListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyGroupListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyGroupListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyGroupListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyGroupListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyGroupListRespValidationError) ErrorName() string {
	return "GetMyGroupListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyGroupListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyGroupListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyGroupListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyGroupListRespValidationError{}

// Validate checks the field values on MapGroupByIdsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MapGroupByIdsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapGroupByIdsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MapGroupByIdsReqMultiError, or nil if none found.
func (m *MapGroupByIdsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MapGroupByIdsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MapGroupByIdsReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MapGroupByIdsReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MapGroupByIdsReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MapGroupByIdsReqMultiError(errors)
	}

	return nil
}

// MapGroupByIdsReqMultiError is an error wrapping multiple validation errors
// returned by MapGroupByIdsReq.ValidateAll() if the designated constraints
// aren't met.
type MapGroupByIdsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MapGroupByIdsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MapGroupByIdsReqMultiError) AllErrors() []error { return m }

// MapGroupByIdsReqValidationError is the validation error returned by
// MapGroupByIdsReq.Validate if the designated constraints aren't met.
type MapGroupByIdsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapGroupByIdsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapGroupByIdsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapGroupByIdsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapGroupByIdsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapGroupByIdsReqValidationError) ErrorName() string { return "MapGroupByIdsReqValidationError" }

// Error satisfies the builtin error interface
func (e MapGroupByIdsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapGroupByIdsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapGroupByIdsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapGroupByIdsReqValidationError{}

// Validate checks the field values on MapGroupByIdsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MapGroupByIdsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapGroupByIdsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MapGroupByIdsRespMultiError, or nil if none found.
func (m *MapGroupByIdsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *MapGroupByIdsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MapGroupByIdsRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MapGroupByIdsRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MapGroupByIdsRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupMap

	if len(errors) > 0 {
		return MapGroupByIdsRespMultiError(errors)
	}

	return nil
}

// MapGroupByIdsRespMultiError is an error wrapping multiple validation errors
// returned by MapGroupByIdsResp.ValidateAll() if the designated constraints
// aren't met.
type MapGroupByIdsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MapGroupByIdsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MapGroupByIdsRespMultiError) AllErrors() []error { return m }

// MapGroupByIdsRespValidationError is the validation error returned by
// MapGroupByIdsResp.Validate if the designated constraints aren't met.
type MapGroupByIdsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapGroupByIdsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapGroupByIdsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapGroupByIdsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapGroupByIdsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapGroupByIdsRespValidationError) ErrorName() string {
	return "MapGroupByIdsRespValidationError"
}

// Error satisfies the builtin error interface
func (e MapGroupByIdsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapGroupByIdsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapGroupByIdsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapGroupByIdsRespValidationError{}

// Validate checks the field values on SyncGroupMemberCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncGroupMemberCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncGroupMemberCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncGroupMemberCountReqMultiError, or nil if none found.
func (m *SyncGroupMemberCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncGroupMemberCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonReq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncGroupMemberCountReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncGroupMemberCountReqValidationError{
					field:  "CommonReq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonReq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncGroupMemberCountReqValidationError{
				field:  "CommonReq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupId

	if len(errors) > 0 {
		return SyncGroupMemberCountReqMultiError(errors)
	}

	return nil
}

// SyncGroupMemberCountReqMultiError is an error wrapping multiple validation
// errors returned by SyncGroupMemberCountReq.ValidateAll() if the designated
// constraints aren't met.
type SyncGroupMemberCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncGroupMemberCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncGroupMemberCountReqMultiError) AllErrors() []error { return m }

// SyncGroupMemberCountReqValidationError is the validation error returned by
// SyncGroupMemberCountReq.Validate if the designated constraints aren't met.
type SyncGroupMemberCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncGroupMemberCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncGroupMemberCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncGroupMemberCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncGroupMemberCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncGroupMemberCountReqValidationError) ErrorName() string {
	return "SyncGroupMemberCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e SyncGroupMemberCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncGroupMemberCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncGroupMemberCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncGroupMemberCountReqValidationError{}

// Validate checks the field values on SyncGroupMemberCountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncGroupMemberCountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncGroupMemberCountResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncGroupMemberCountRespMultiError, or nil if none found.
func (m *SyncGroupMemberCountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncGroupMemberCountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonResp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncGroupMemberCountRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncGroupMemberCountRespValidationError{
					field:  "CommonResp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonResp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncGroupMemberCountRespValidationError{
				field:  "CommonResp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SyncGroupMemberCountRespMultiError(errors)
	}

	return nil
}

// SyncGroupMemberCountRespMultiError is an error wrapping multiple validation
// errors returned by SyncGroupMemberCountResp.ValidateAll() if the designated
// constraints aren't met.
type SyncGroupMemberCountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncGroupMemberCountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncGroupMemberCountRespMultiError) AllErrors() []error { return m }

// SyncGroupMemberCountRespValidationError is the validation error returned by
// SyncGroupMemberCountResp.Validate if the designated constraints aren't met.
type SyncGroupMemberCountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncGroupMemberCountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncGroupMemberCountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncGroupMemberCountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncGroupMemberCountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncGroupMemberCountRespValidationError) ErrorName() string {
	return "SyncGroupMemberCountRespValidationError"
}

// Error satisfies the builtin error interface
func (e SyncGroupMemberCountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncGroupMemberCountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncGroupMemberCountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncGroupMemberCountRespValidationError{}

// Validate checks the field values on GetGroupHomeResp_MemberStatistics with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetGroupHomeResp_MemberStatistics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupHomeResp_MemberStatistics
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetGroupHomeResp_MemberStatisticsMultiError, or nil if none found.
func (m *GetGroupHomeResp_MemberStatistics) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupHomeResp_MemberStatistics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Count

	// no validation rules for Percentage

	if len(errors) > 0 {
		return GetGroupHomeResp_MemberStatisticsMultiError(errors)
	}

	return nil
}

// GetGroupHomeResp_MemberStatisticsMultiError is an error wrapping multiple
// validation errors returned by
// GetGroupHomeResp_MemberStatistics.ValidateAll() if the designated
// constraints aren't met.
type GetGroupHomeResp_MemberStatisticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupHomeResp_MemberStatisticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupHomeResp_MemberStatisticsMultiError) AllErrors() []error { return m }

// GetGroupHomeResp_MemberStatisticsValidationError is the validation error
// returned by GetGroupHomeResp_MemberStatistics.Validate if the designated
// constraints aren't met.
type GetGroupHomeResp_MemberStatisticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupHomeResp_MemberStatisticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupHomeResp_MemberStatisticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupHomeResp_MemberStatisticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupHomeResp_MemberStatisticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupHomeResp_MemberStatisticsValidationError) ErrorName() string {
	return "GetGroupHomeResp_MemberStatisticsValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupHomeResp_MemberStatisticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupHomeResp_MemberStatistics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupHomeResp_MemberStatisticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupHomeResp_MemberStatisticsValidationError{}

// Validate checks the field values on
// GetGroupMemberListReq_GetGroupMemberListFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberListReq_GetGroupMemberListFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetGroupMemberListReq_GetGroupMemberListFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetGroupMemberListReq_GetGroupMemberListFilterMultiError, or nil if none found.
func (m *GetGroupMemberListReq_GetGroupMemberListFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberListReq_GetGroupMemberListFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.NoDisturb != nil {
		// no validation rules for NoDisturb
	}

	if len(errors) > 0 {
		return GetGroupMemberListReq_GetGroupMemberListFilterMultiError(errors)
	}

	return nil
}

// GetGroupMemberListReq_GetGroupMemberListFilterMultiError is an error
// wrapping multiple validation errors returned by
// GetGroupMemberListReq_GetGroupMemberListFilter.ValidateAll() if the
// designated constraints aren't met.
type GetGroupMemberListReq_GetGroupMemberListFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberListReq_GetGroupMemberListFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberListReq_GetGroupMemberListFilterMultiError) AllErrors() []error { return m }

// GetGroupMemberListReq_GetGroupMemberListFilterValidationError is the
// validation error returned by
// GetGroupMemberListReq_GetGroupMemberListFilter.Validate if the designated
// constraints aren't met.
type GetGroupMemberListReq_GetGroupMemberListFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberListReq_GetGroupMemberListFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberListReq_GetGroupMemberListFilterValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetGroupMemberListReq_GetGroupMemberListFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberListReq_GetGroupMemberListFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberListReq_GetGroupMemberListFilterValidationError) ErrorName() string {
	return "GetGroupMemberListReq_GetGroupMemberListFilterValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberListReq_GetGroupMemberListFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberListReq_GetGroupMemberListFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberListReq_GetGroupMemberListFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberListReq_GetGroupMemberListFilterValidationError{}

// Validate checks the field values on
// GetGroupMemberListReq_GetGroupMemberListOpt with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberListReq_GetGroupMemberListOpt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetGroupMemberListReq_GetGroupMemberListOpt with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetGroupMemberListReq_GetGroupMemberListOptMultiError, or nil if none found.
func (m *GetGroupMemberListReq_GetGroupMemberListOpt) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberListReq_GetGroupMemberListOpt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.OnlyId != nil {
		// no validation rules for OnlyId
	}

	if m.GetNotifyOpt != nil {
		// no validation rules for GetNotifyOpt
	}

	if len(errors) > 0 {
		return GetGroupMemberListReq_GetGroupMemberListOptMultiError(errors)
	}

	return nil
}

// GetGroupMemberListReq_GetGroupMemberListOptMultiError is an error wrapping
// multiple validation errors returned by
// GetGroupMemberListReq_GetGroupMemberListOpt.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberListReq_GetGroupMemberListOptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberListReq_GetGroupMemberListOptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberListReq_GetGroupMemberListOptMultiError) AllErrors() []error { return m }

// GetGroupMemberListReq_GetGroupMemberListOptValidationError is the validation
// error returned by GetGroupMemberListReq_GetGroupMemberListOpt.Validate if
// the designated constraints aren't met.
type GetGroupMemberListReq_GetGroupMemberListOptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberListReq_GetGroupMemberListOptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberListReq_GetGroupMemberListOptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberListReq_GetGroupMemberListOptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberListReq_GetGroupMemberListOptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberListReq_GetGroupMemberListOptValidationError) ErrorName() string {
	return "GetGroupMemberListReq_GetGroupMemberListOptValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberListReq_GetGroupMemberListOptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberListReq_GetGroupMemberListOpt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberListReq_GetGroupMemberListOptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberListReq_GetGroupMemberListOptValidationError{}

// Validate checks the field values on GetGroupMemberListResp_GroupMember with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetGroupMemberListResp_GroupMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberListResp_GroupMember
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetGroupMemberListResp_GroupMemberMultiError, or nil if none found.
func (m *GetGroupMemberListResp_GroupMember) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberListResp_GroupMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetNotifyOpt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberListResp_GroupMemberValidationError{
					field:  "NotifyOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberListResp_GroupMemberValidationError{
					field:  "NotifyOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyOpt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberListResp_GroupMemberValidationError{
				field:  "NotifyOpt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupMemberListResp_GroupMemberMultiError(errors)
	}

	return nil
}

// GetGroupMemberListResp_GroupMemberMultiError is an error wrapping multiple
// validation errors returned by
// GetGroupMemberListResp_GroupMember.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberListResp_GroupMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberListResp_GroupMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberListResp_GroupMemberMultiError) AllErrors() []error { return m }

// GetGroupMemberListResp_GroupMemberValidationError is the validation error
// returned by GetGroupMemberListResp_GroupMember.Validate if the designated
// constraints aren't met.
type GetGroupMemberListResp_GroupMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberListResp_GroupMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberListResp_GroupMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberListResp_GroupMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberListResp_GroupMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberListResp_GroupMemberValidationError) ErrorName() string {
	return "GetGroupMemberListResp_GroupMemberValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberListResp_GroupMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberListResp_GroupMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberListResp_GroupMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberListResp_GroupMemberValidationError{}

// Validate checks the field values on GetMyGroupListReq_Filter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyGroupListReq_Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyGroupListReq_Filter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyGroupListReq_FilterMultiError, or nil if none found.
func (m *GetMyGroupListReq_Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyGroupListReq_Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilterFold

	// no validation rules for FilterShield

	if len(errors) > 0 {
		return GetMyGroupListReq_FilterMultiError(errors)
	}

	return nil
}

// GetMyGroupListReq_FilterMultiError is an error wrapping multiple validation
// errors returned by GetMyGroupListReq_Filter.ValidateAll() if the designated
// constraints aren't met.
type GetMyGroupListReq_FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyGroupListReq_FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyGroupListReq_FilterMultiError) AllErrors() []error { return m }

// GetMyGroupListReq_FilterValidationError is the validation error returned by
// GetMyGroupListReq_Filter.Validate if the designated constraints aren't met.
type GetMyGroupListReq_FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyGroupListReq_FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyGroupListReq_FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyGroupListReq_FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyGroupListReq_FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyGroupListReq_FilterValidationError) ErrorName() string {
	return "GetMyGroupListReq_FilterValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyGroupListReq_FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyGroupListReq_Filter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyGroupListReq_FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyGroupListReq_FilterValidationError{}
