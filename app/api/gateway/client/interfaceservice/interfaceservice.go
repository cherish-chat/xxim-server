// Code generated by goctl. DO NOT EDIT.
// Source: gateway.peer.proto

package interfaceservice

import (
	"context"

	"github.com/cherish-chat/xxim-proto/peerpb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthConnectionReq                   = peerpb.AuthConnectionReq
	AuthConnectionResp                  = peerpb.AuthConnectionResp
	GatewayKeepAliveReq                 = peerpb.GatewayKeepAliveReq
	GatewayKeepAliveResp                = peerpb.GatewayKeepAliveResp
	GatewayKickLongConnectionReq        = peerpb.GatewayKickLongConnectionReq
	GatewayKickLongConnectionReq_Filter = peerpb.GatewayKickLongConnectionReq_Filter
	GatewayKickLongConnectionResp       = peerpb.GatewayKickLongConnectionResp
	GatewayWriteDataReq                 = peerpb.GatewayWriteDataReq
	GatewayWriteDataReq_Filter          = peerpb.GatewayWriteDataReq_Filter
	GatewayWriteDataResp                = peerpb.GatewayWriteDataResp
	ListLongConnectionReq               = peerpb.ListLongConnectionReq
	ListLongConnectionReq_Filter        = peerpb.ListLongConnectionReq_Filter
	ListLongConnectionResp              = peerpb.ListLongConnectionResp
	VerifyConnectionReq                 = peerpb.VerifyConnectionReq
	VerifyConnectionResp                = peerpb.VerifyConnectionResp

	InterfaceService interface {
		// GatewayKeepAlive 保持连接
		GatewayKeepAlive(ctx context.Context, in *GatewayKeepAliveReq, opts ...grpc.CallOption) (*GatewayKeepAliveResp, error)
		// VerifyConnection 验证连接
		VerifyConnection(ctx context.Context, in *VerifyConnectionReq, opts ...grpc.CallOption) (*VerifyConnectionResp, error)
		// AuthConnection 验证连接用户id和token
		AuthConnection(ctx context.Context, in *AuthConnectionReq, opts ...grpc.CallOption) (*AuthConnectionResp, error)
	}

	defaultInterfaceService struct {
		cli zrpc.Client
	}
)

func NewInterfaceService(cli zrpc.Client) InterfaceService {
	return &defaultInterfaceService{
		cli: cli,
	}
}

// GatewayKeepAlive 保持连接
func (m *defaultInterfaceService) GatewayKeepAlive(ctx context.Context, in *GatewayKeepAliveReq, opts ...grpc.CallOption) (*GatewayKeepAliveResp, error) {
	client := peerpb.NewInterfaceServiceClient(m.cli.Conn())
	return client.GatewayKeepAlive(ctx, in, opts...)
}

// VerifyConnection 验证连接
func (m *defaultInterfaceService) VerifyConnection(ctx context.Context, in *VerifyConnectionReq, opts ...grpc.CallOption) (*VerifyConnectionResp, error) {
	client := peerpb.NewInterfaceServiceClient(m.cli.Conn())
	return client.VerifyConnection(ctx, in, opts...)
}

// AuthConnection 验证连接用户id和token
func (m *defaultInterfaceService) AuthConnection(ctx context.Context, in *AuthConnectionReq, opts ...grpc.CallOption) (*AuthConnectionResp, error) {
	client := peerpb.NewInterfaceServiceClient(m.cli.Conn())
	return client.AuthConnection(ctx, in, opts...)
}
