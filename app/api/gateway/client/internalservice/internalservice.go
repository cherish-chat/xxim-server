// Code generated by goctl. DO NOT EDIT.
// Source: gateway.peer.proto

package internalservice

import (
	"context"

	"github.com/cherish-chat/xxim-proto/peerpb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthConnectionReq                   = peerpb.AuthConnectionReq
	AuthConnectionResp                  = peerpb.AuthConnectionResp
	GatewayKeepAliveReq                 = peerpb.GatewayKeepAliveReq
	GatewayKeepAliveResp                = peerpb.GatewayKeepAliveResp
	GatewayKickLongConnectionReq        = peerpb.GatewayKickLongConnectionReq
	GatewayKickLongConnectionReq_Filter = peerpb.GatewayKickLongConnectionReq_Filter
	GatewayKickLongConnectionResp       = peerpb.GatewayKickLongConnectionResp
	GatewayWriteDataReq                 = peerpb.GatewayWriteDataReq
	GatewayWriteDataReq_Filter          = peerpb.GatewayWriteDataReq_Filter
	GatewayWriteDataResp                = peerpb.GatewayWriteDataResp
	ListLongConnectionReq               = peerpb.ListLongConnectionReq
	ListLongConnectionReq_Filter        = peerpb.ListLongConnectionReq_Filter
	ListLongConnectionResp              = peerpb.ListLongConnectionResp
	VerifyConnectionReq                 = peerpb.VerifyConnectionReq
	VerifyConnectionResp                = peerpb.VerifyConnectionResp

	InternalService interface {
		// GatewayWriteData 向用户推送数据
		GatewayWriteData(ctx context.Context, in *GatewayWriteDataReq, opts ...grpc.CallOption) (*GatewayWriteDataResp, error)
	}

	defaultInternalService struct {
		cli zrpc.Client
	}
)

func NewInternalService(cli zrpc.Client) InternalService {
	return &defaultInternalService{
		cli: cli,
	}
}

// GatewayWriteData 向用户推送数据
func (m *defaultInternalService) GatewayWriteData(ctx context.Context, in *GatewayWriteDataReq, opts ...grpc.CallOption) (*GatewayWriteDataResp, error) {
	client := peerpb.NewInternalServiceClient(m.cli.Conn())
	return client.GatewayWriteData(ctx, in, opts...)
}
