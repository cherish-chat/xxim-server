// Code generated by goctl. DO NOT EDIT.
// Source: gateway.peer.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-proto/peerpb"
	"github.com/cherish-chat/xxim-server/app/api/gateway/internal/logic/interfaceservice"
	"github.com/cherish-chat/xxim-server/app/api/gateway/internal/svc"
)

type InterfaceServiceServer struct {
	svcCtx *svc.ServiceContext
	peerpb.UnimplementedInterfaceServiceServer
}

func NewInterfaceServiceServer(svcCtx *svc.ServiceContext) *InterfaceServiceServer {
	return &InterfaceServiceServer{
		svcCtx: svcCtx,
	}
}

// GatewayKeepAlive 保持连接
func (s *InterfaceServiceServer) GatewayKeepAlive(ctx context.Context, in *peerpb.GatewayKeepAliveReq) (*peerpb.GatewayKeepAliveResp, error) {
	l := interfaceservicelogic.NewGatewayKeepAliveLogic(ctx, s.svcCtx)
	return l.GatewayKeepAlive(in)
}

// VerifyConnection 验证连接
func (s *InterfaceServiceServer) VerifyConnection(ctx context.Context, in *peerpb.VerifyConnectionReq) (*peerpb.VerifyConnectionResp, error) {
	l := interfaceservicelogic.NewVerifyConnectionLogic(ctx, s.svcCtx)
	return l.VerifyConnection(in)
}

// AuthConnection 验证连接用户id和token
func (s *InterfaceServiceServer) AuthConnection(ctx context.Context, in *peerpb.AuthConnectionReq) (*peerpb.AuthConnectionResp, error) {
	l := interfaceservicelogic.NewAuthConnectionLogic(ctx, s.svcCtx)
	return l.AuthConnection(in)
}
