// Code generated by goctl. DO NOT EDIT!
// Source: conn.proto

package connservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AfterConnectBody   = pb.AfterConnectBody
	AfterConnectReq    = pb.AfterConnectReq
	AfterDisconnectReq = pb.AfterDisconnectReq
	ConnMQBody         = pb.ConnMQBody
	ConnParam          = pb.ConnParam
	GetUserConnReq     = pb.GetUserConnReq
	GetUserConnResp    = pb.GetUserConnResp
	KeepAliveReq       = pb.KeepAliveReq
	KeepAliveResp      = pb.KeepAliveResp
	KickUserConnReq    = pb.KickUserConnReq
	KickUserConnResp   = pb.KickUserConnResp
	PushBody           = pb.PushBody
	RequestBody        = pb.RequestBody
	ResponseBody       = pb.ResponseBody
	SendMsgReq         = pb.SendMsgReq
	SendMsgResp        = pb.SendMsgResp
	SetCxnParamsReq    = pb.SetCxnParamsReq
	SetCxnParamsResp   = pb.SetCxnParamsResp
	SetUserParamsReq   = pb.SetUserParamsReq
	SetUserParamsResp  = pb.SetUserParamsResp

	ConnService interface {
		KickUserConn(ctx context.Context, in *KickUserConnReq, opts ...grpc.CallOption) (*KickUserConnResp, error)
		GetUserConn(ctx context.Context, in *GetUserConnReq, opts ...grpc.CallOption) (*GetUserConnResp, error)
		SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
		KeepAlive(ctx context.Context, in *KeepAliveReq, opts ...grpc.CallOption) (*KeepAliveResp, error)
	}

	defaultConnService struct {
		cli zrpc.Client
	}
)

func NewConnService(cli zrpc.Client) ConnService {
	return &defaultConnService{
		cli: cli,
	}
}

func (m *defaultConnService) KickUserConn(ctx context.Context, in *KickUserConnReq, opts ...grpc.CallOption) (*KickUserConnResp, error) {
	client := pb.NewConnServiceClient(m.cli.Conn())
	return client.KickUserConn(ctx, in, opts...)
}

func (m *defaultConnService) GetUserConn(ctx context.Context, in *GetUserConnReq, opts ...grpc.CallOption) (*GetUserConnResp, error) {
	client := pb.NewConnServiceClient(m.cli.Conn())
	return client.GetUserConn(ctx, in, opts...)
}

func (m *defaultConnService) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	client := pb.NewConnServiceClient(m.cli.Conn())
	return client.SendMsg(ctx, in, opts...)
}

func (m *defaultConnService) KeepAlive(ctx context.Context, in *KeepAliveReq, opts ...grpc.CallOption) (*KeepAliveResp, error) {
	client := pb.NewConnServiceClient(m.cli.Conn())
	return client.KeepAlive(ctx, in, opts...)
}
