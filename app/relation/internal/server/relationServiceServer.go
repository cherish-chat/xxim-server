// Code generated by goctl. DO NOT EDIT!
// Source: relation.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-server/app/relation/internal/logic"
	"github.com/cherish-chat/xxim-server/app/relation/internal/svc"
	"github.com/cherish-chat/xxim-server/common/pb"
)

type RelationServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedRelationServiceServer
}

func NewRelationServiceServer(svcCtx *svc.ServiceContext) *RelationServiceServer {
	return &RelationServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *RelationServiceServer) AreFriends(ctx context.Context, in *pb.AreFriendsReq) (*pb.AreFriendsResp, error) {
	l := logic.NewAreFriendsLogic(ctx, s.svcCtx)
	return l.AreFriends(in)
}

func (s *RelationServiceServer) AreBlackList(ctx context.Context, in *pb.AreBlackListReq) (*pb.AreBlackListResp, error) {
	l := logic.NewAreBlackListLogic(ctx, s.svcCtx)
	return l.AreBlackList(in)
}

func (s *RelationServiceServer) RequestAddFriend(ctx context.Context, in *pb.RequestAddFriendReq) (*pb.RequestAddFriendResp, error) {
	l := logic.NewRequestAddFriendLogic(ctx, s.svcCtx)
	return l.RequestAddFriend(in)
}

func (s *RelationServiceServer) AcceptAddFriend(ctx context.Context, in *pb.AcceptAddFriendReq) (*pb.AcceptAddFriendResp, error) {
	l := logic.NewAcceptAddFriendLogic(ctx, s.svcCtx)
	return l.AcceptAddFriend(in)
}

func (s *RelationServiceServer) RejectAddFriend(ctx context.Context, in *pb.RejectAddFriendReq) (*pb.RejectAddFriendResp, error) {
	l := logic.NewRejectAddFriendLogic(ctx, s.svcCtx)
	return l.RejectAddFriend(in)
}

func (s *RelationServiceServer) GetFriendCount(ctx context.Context, in *pb.GetFriendCountReq) (*pb.GetFriendCountResp, error) {
	l := logic.NewGetFriendCountLogic(ctx, s.svcCtx)
	return l.GetFriendCount(in)
}

func (s *RelationServiceServer) BlockUser(ctx context.Context, in *pb.BlockUserReq) (*pb.BlockUserResp, error) {
	l := logic.NewBlockUserLogic(ctx, s.svcCtx)
	return l.BlockUser(in)
}

func (s *RelationServiceServer) DeleteBlockUser(ctx context.Context, in *pb.DeleteBlockUserReq) (*pb.DeleteBlockUserResp, error) {
	l := logic.NewDeleteBlockUserLogic(ctx, s.svcCtx)
	return l.DeleteBlockUser(in)
}

func (s *RelationServiceServer) DeleteFriend(ctx context.Context, in *pb.DeleteFriendReq) (*pb.DeleteFriendResp, error) {
	l := logic.NewDeleteFriendLogic(ctx, s.svcCtx)
	return l.DeleteFriend(in)
}

func (s *RelationServiceServer) SetSingleConvSetting(ctx context.Context, in *pb.SetSingleConvSettingReq) (*pb.SetSingleConvSettingResp, error) {
	l := logic.NewSetSingleConvSettingLogic(ctx, s.svcCtx)
	return l.SetSingleConvSetting(in)
}

func (s *RelationServiceServer) GetSingleConvSetting(ctx context.Context, in *pb.GetSingleConvSettingReq) (*pb.GetSingleConvSettingResp, error) {
	l := logic.NewGetSingleConvSettingLogic(ctx, s.svcCtx)
	return l.GetSingleConvSetting(in)
}

func (s *RelationServiceServer) GetFriendList(ctx context.Context, in *pb.GetFriendListReq) (*pb.GetFriendListResp, error) {
	l := logic.NewGetFriendListLogic(ctx, s.svcCtx)
	return l.GetFriendList(in)
}

func (s *RelationServiceServer) GetMyFriendEventList(ctx context.Context, in *pb.GetMyFriendEventListReq) (*pb.GetMyFriendEventListResp, error) {
	l := logic.NewGetMyFriendEventListLogic(ctx, s.svcCtx)
	return l.GetMyFriendEventList(in)
}

func (s *RelationServiceServer) GetFriendListByUserId(ctx context.Context, in *pb.GetFriendListByUserIdReq) (*pb.GetFriendListByUserIdResp, error) {
	l := logic.NewGetFriendListByUserIdLogic(ctx, s.svcCtx)
	return l.GetFriendListByUserId(in)
}
