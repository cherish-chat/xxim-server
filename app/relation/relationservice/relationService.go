// Code generated by goctl. DO NOT EDIT!
// Source: relation.proto

package relationservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AcceptAddFriendReq        = pb.AcceptAddFriendReq
	AcceptAddFriendResp       = pb.AcceptAddFriendResp
	AreBlackListReq           = pb.AreBlackListReq
	AreBlackListResp          = pb.AreBlackListResp
	AreFriendsReq             = pb.AreFriendsReq
	AreFriendsResp            = pb.AreFriendsResp
	BlockUserReq              = pb.BlockUserReq
	BlockUserResp             = pb.BlockUserResp
	DeleteBlockUserReq        = pb.DeleteBlockUserReq
	DeleteBlockUserResp       = pb.DeleteBlockUserResp
	DeleteFriendReq           = pb.DeleteFriendReq
	DeleteFriendResp          = pb.DeleteFriendResp
	FriendEvent               = pb.FriendEvent
	GetFriendCountReq         = pb.GetFriendCountReq
	GetFriendCountResp        = pb.GetFriendCountResp
	GetFriendListByUserIdItem = pb.GetFriendListByUserIdItem
	GetFriendListByUserIdReq  = pb.GetFriendListByUserIdReq
	GetFriendListByUserIdResp = pb.GetFriendListByUserIdResp
	GetFriendListReq          = pb.GetFriendListReq
	GetFriendListResp         = pb.GetFriendListResp
	GetMyFriendEventListReq   = pb.GetMyFriendEventListReq
	GetMyFriendEventListResp  = pb.GetMyFriendEventListResp
	RejectAddFriendReq        = pb.RejectAddFriendReq
	RejectAddFriendResp       = pb.RejectAddFriendResp
	RequestAddFriendExtra     = pb.RequestAddFriendExtra
	RequestAddFriendReq       = pb.RequestAddFriendReq
	RequestAddFriendResp      = pb.RequestAddFriendResp

	RelationService interface {
		AreFriends(ctx context.Context, in *AreFriendsReq, opts ...grpc.CallOption) (*AreFriendsResp, error)
		AreBlackList(ctx context.Context, in *AreBlackListReq, opts ...grpc.CallOption) (*AreBlackListResp, error)
		RequestAddFriend(ctx context.Context, in *RequestAddFriendReq, opts ...grpc.CallOption) (*RequestAddFriendResp, error)
		AcceptAddFriend(ctx context.Context, in *AcceptAddFriendReq, opts ...grpc.CallOption) (*AcceptAddFriendResp, error)
		RejectAddFriend(ctx context.Context, in *RejectAddFriendReq, opts ...grpc.CallOption) (*RejectAddFriendResp, error)
		GetFriendCount(ctx context.Context, in *GetFriendCountReq, opts ...grpc.CallOption) (*GetFriendCountResp, error)
		BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
		DeleteBlockUser(ctx context.Context, in *DeleteBlockUserReq, opts ...grpc.CallOption) (*DeleteBlockUserResp, error)
		DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
		GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error)
		GetMyFriendEventList(ctx context.Context, in *GetMyFriendEventListReq, opts ...grpc.CallOption) (*GetMyFriendEventListResp, error)
		GetFriendListByUserId(ctx context.Context, in *GetFriendListByUserIdReq, opts ...grpc.CallOption) (*GetFriendListByUserIdResp, error)
	}

	defaultRelationService struct {
		cli zrpc.Client
	}
)

func NewRelationService(cli zrpc.Client) RelationService {
	return &defaultRelationService{
		cli: cli,
	}
}

func (m *defaultRelationService) AreFriends(ctx context.Context, in *AreFriendsReq, opts ...grpc.CallOption) (*AreFriendsResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.AreFriends(ctx, in, opts...)
}

func (m *defaultRelationService) AreBlackList(ctx context.Context, in *AreBlackListReq, opts ...grpc.CallOption) (*AreBlackListResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.AreBlackList(ctx, in, opts...)
}

func (m *defaultRelationService) RequestAddFriend(ctx context.Context, in *RequestAddFriendReq, opts ...grpc.CallOption) (*RequestAddFriendResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.RequestAddFriend(ctx, in, opts...)
}

func (m *defaultRelationService) AcceptAddFriend(ctx context.Context, in *AcceptAddFriendReq, opts ...grpc.CallOption) (*AcceptAddFriendResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.AcceptAddFriend(ctx, in, opts...)
}

func (m *defaultRelationService) RejectAddFriend(ctx context.Context, in *RejectAddFriendReq, opts ...grpc.CallOption) (*RejectAddFriendResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.RejectAddFriend(ctx, in, opts...)
}

func (m *defaultRelationService) GetFriendCount(ctx context.Context, in *GetFriendCountReq, opts ...grpc.CallOption) (*GetFriendCountResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.GetFriendCount(ctx, in, opts...)
}

func (m *defaultRelationService) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.BlockUser(ctx, in, opts...)
}

func (m *defaultRelationService) DeleteBlockUser(ctx context.Context, in *DeleteBlockUserReq, opts ...grpc.CallOption) (*DeleteBlockUserResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.DeleteBlockUser(ctx, in, opts...)
}

func (m *defaultRelationService) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.DeleteFriend(ctx, in, opts...)
}

func (m *defaultRelationService) GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.GetFriendList(ctx, in, opts...)
}

func (m *defaultRelationService) GetMyFriendEventList(ctx context.Context, in *GetMyFriendEventListReq, opts ...grpc.CallOption) (*GetMyFriendEventListResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.GetMyFriendEventList(ctx, in, opts...)
}

func (m *defaultRelationService) GetFriendListByUserId(ctx context.Context, in *GetFriendListByUserIdReq, opts ...grpc.CallOption) (*GetFriendListByUserIdResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.GetFriendListByUserId(ctx, in, opts...)
}
