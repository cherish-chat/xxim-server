// Code generated by goctl. DO NOT EDIT.
// Source: message.peer.proto

package messageservice

import (
	"context"

	"github.com/cherish-chat/xxim-proto/peerpb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	MessageContentText            = peerpb.MessageContentText
	MessageContentText_Item       = peerpb.MessageContentText_Item
	MessageContentText_Item_At    = peerpb.MessageContentText_Item_At
	MessageContentText_Item_Image = peerpb.MessageContentText_Item_Image
	MessageInsertReq              = peerpb.MessageInsertReq
	MessageInsertResp             = peerpb.MessageInsertResp
	MessagePushReq                = peerpb.MessagePushReq
	MessagePushResp               = peerpb.MessagePushResp
	MessageSendReq                = peerpb.MessageSendReq
	MessageSendResp               = peerpb.MessageSendResp
	NoticeContentJoinNewGroup     = peerpb.NoticeContentJoinNewGroup
	NoticeContentNewFriendRequest = peerpb.NoticeContentNewFriendRequest
	NoticeContentOnlineStatus     = peerpb.NoticeContentOnlineStatus
	NoticeSendReq                 = peerpb.NoticeSendReq
	NoticeSendResp                = peerpb.NoticeSendResp

	MessageService interface {
		// MessageInsert 插入消息
		MessageInsert(ctx context.Context, in *MessageInsertReq, opts ...grpc.CallOption) (*MessageInsertResp, error)
		// MessageSend 发送消息
		MessageSend(ctx context.Context, in *MessageSendReq, opts ...grpc.CallOption) (*MessageSendResp, error)
		// MessagePush 推送消息
		MessagePush(ctx context.Context, in *MessagePushReq, opts ...grpc.CallOption) (*MessagePushResp, error)
	}

	defaultMessageService struct {
		cli zrpc.Client
	}
)

func NewMessageService(cli zrpc.Client) MessageService {
	return &defaultMessageService{
		cli: cli,
	}
}

// MessageInsert 插入消息
func (m *defaultMessageService) MessageInsert(ctx context.Context, in *MessageInsertReq, opts ...grpc.CallOption) (*MessageInsertResp, error) {
	client := peerpb.NewMessageServiceClient(m.cli.Conn())
	return client.MessageInsert(ctx, in, opts...)
}

// MessageSend 发送消息
func (m *defaultMessageService) MessageSend(ctx context.Context, in *MessageSendReq, opts ...grpc.CallOption) (*MessageSendResp, error) {
	client := peerpb.NewMessageServiceClient(m.cli.Conn())
	return client.MessageSend(ctx, in, opts...)
}

// MessagePush 推送消息
func (m *defaultMessageService) MessagePush(ctx context.Context, in *MessagePushReq, opts ...grpc.CallOption) (*MessagePushResp, error) {
	client := peerpb.NewMessageServiceClient(m.cli.Conn())
	return client.MessagePush(ctx, in, opts...)
}
