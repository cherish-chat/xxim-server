// Code generated by goctl. DO NOT EDIT.
// Source: user.peer.proto

package accountservice

import (
	"context"

	"github.com/cherish-chat/xxim-proto/peerpb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateRobotReq           = peerpb.CreateRobotReq
	CreateRobotResp          = peerpb.CreateRobotResp
	RefreshUserTokenReq      = peerpb.RefreshUserTokenReq
	RefreshUserTokenResp     = peerpb.RefreshUserTokenResp
	ResetUserAccountMapReq   = peerpb.ResetUserAccountMapReq
	ResetUserAccountMapResp  = peerpb.ResetUserAccountMapResp
	RevokeUserTokenReq       = peerpb.RevokeUserTokenReq
	RevokeUserTokenResp      = peerpb.RevokeUserTokenResp
	UpdateUserAccountMapReq  = peerpb.UpdateUserAccountMapReq
	UpdateUserAccountMapResp = peerpb.UpdateUserAccountMapResp
	UserAfterKeepAliveReq    = peerpb.UserAfterKeepAliveReq
	UserAfterKeepAliveResp   = peerpb.UserAfterKeepAliveResp
	UserAfterOfflineReq      = peerpb.UserAfterOfflineReq
	UserAfterOfflineResp     = peerpb.UserAfterOfflineResp
	UserAfterOnlineReq       = peerpb.UserAfterOnlineReq
	UserAfterOnlineResp      = peerpb.UserAfterOnlineResp
	UserBeforeConnectReq     = peerpb.UserBeforeConnectReq
	UserBeforeConnectResp    = peerpb.UserBeforeConnectResp
	UserBeforeRequestReq     = peerpb.UserBeforeRequestReq
	UserBeforeRequestResp    = peerpb.UserBeforeRequestResp
	UserDestroyReq           = peerpb.UserDestroyReq
	UserDestroyResp          = peerpb.UserDestroyResp
	UserRegisterReq          = peerpb.UserRegisterReq
	UserRegisterResp         = peerpb.UserRegisterResp
	UserTokenReq             = peerpb.UserTokenReq
	UserTokenResp            = peerpb.UserTokenResp

	AccountService interface {
		// UserRegister 用户注册
		UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
		// UserDestroy 用户注销
		UserDestroy(ctx context.Context, in *UserDestroyReq, opts ...grpc.CallOption) (*UserDestroyResp, error)
		// UserToken 用户登录
		UserToken(ctx context.Context, in *UserTokenReq, opts ...grpc.CallOption) (*UserTokenResp, error)
		// RefreshUserToken 刷新用户token
		RefreshUserToken(ctx context.Context, in *RefreshUserTokenReq, opts ...grpc.CallOption) (*RefreshUserTokenResp, error)
		// RevokeUserToken 注销用户token
		RevokeUserToken(ctx context.Context, in *RevokeUserTokenReq, opts ...grpc.CallOption) (*RevokeUserTokenResp, error)
		// UpdateUserAccountMap 更新用户账号信息
		UpdateUserAccountMap(ctx context.Context, in *UpdateUserAccountMapReq, opts ...grpc.CallOption) (*UpdateUserAccountMapResp, error)
		// ResetUserAccountMap 重置用户账号信息
		ResetUserAccountMap(ctx context.Context, in *ResetUserAccountMapReq, opts ...grpc.CallOption) (*ResetUserAccountMapResp, error)
	}

	defaultAccountService struct {
		cli zrpc.Client
	}
)

func NewAccountService(cli zrpc.Client) AccountService {
	return &defaultAccountService{
		cli: cli,
	}
}

// UserRegister 用户注册
func (m *defaultAccountService) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	client := peerpb.NewAccountServiceClient(m.cli.Conn())
	return client.UserRegister(ctx, in, opts...)
}

// UserDestroy 用户注销
func (m *defaultAccountService) UserDestroy(ctx context.Context, in *UserDestroyReq, opts ...grpc.CallOption) (*UserDestroyResp, error) {
	client := peerpb.NewAccountServiceClient(m.cli.Conn())
	return client.UserDestroy(ctx, in, opts...)
}

// UserToken 用户登录
func (m *defaultAccountService) UserToken(ctx context.Context, in *UserTokenReq, opts ...grpc.CallOption) (*UserTokenResp, error) {
	client := peerpb.NewAccountServiceClient(m.cli.Conn())
	return client.UserToken(ctx, in, opts...)
}

// RefreshUserToken 刷新用户token
func (m *defaultAccountService) RefreshUserToken(ctx context.Context, in *RefreshUserTokenReq, opts ...grpc.CallOption) (*RefreshUserTokenResp, error) {
	client := peerpb.NewAccountServiceClient(m.cli.Conn())
	return client.RefreshUserToken(ctx, in, opts...)
}

// RevokeUserToken 注销用户token
func (m *defaultAccountService) RevokeUserToken(ctx context.Context, in *RevokeUserTokenReq, opts ...grpc.CallOption) (*RevokeUserTokenResp, error) {
	client := peerpb.NewAccountServiceClient(m.cli.Conn())
	return client.RevokeUserToken(ctx, in, opts...)
}

// UpdateUserAccountMap 更新用户账号信息
func (m *defaultAccountService) UpdateUserAccountMap(ctx context.Context, in *UpdateUserAccountMapReq, opts ...grpc.CallOption) (*UpdateUserAccountMapResp, error) {
	client := peerpb.NewAccountServiceClient(m.cli.Conn())
	return client.UpdateUserAccountMap(ctx, in, opts...)
}

// ResetUserAccountMap 重置用户账号信息
func (m *defaultAccountService) ResetUserAccountMap(ctx context.Context, in *ResetUserAccountMapReq, opts ...grpc.CallOption) (*ResetUserAccountMapResp, error) {
	client := peerpb.NewAccountServiceClient(m.cli.Conn())
	return client.ResetUserAccountMap(ctx, in, opts...)
}
