// Code generated by goctl. DO NOT EDIT.
// Source: user.peer.proto

package callbackservice

import (
	"context"

	"github.com/cherish-chat/xxim-proto/peerpb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	UserAfterOfflineReq   = peerpb.UserAfterOfflineReq
	UserAfterOfflineResp  = peerpb.UserAfterOfflineResp
	UserAfterOnlineReq    = peerpb.UserAfterOnlineReq
	UserAfterOnlineResp   = peerpb.UserAfterOnlineResp
	UserBeforeConnectReq  = peerpb.UserBeforeConnectReq
	UserBeforeConnectResp = peerpb.UserBeforeConnectResp
	UserBeforeRequestReq  = peerpb.UserBeforeRequestReq
	UserBeforeRequestResp = peerpb.UserBeforeRequestResp

	CallbackService interface {
		UserAfterOnline(ctx context.Context, in *UserAfterOnlineReq, opts ...grpc.CallOption) (*UserAfterOnlineResp, error)
		UserAfterOffline(ctx context.Context, in *UserAfterOfflineReq, opts ...grpc.CallOption) (*UserAfterOfflineResp, error)
		UserBeforeConnect(ctx context.Context, in *UserBeforeConnectReq, opts ...grpc.CallOption) (*UserBeforeConnectResp, error)
		UserBeforeRequest(ctx context.Context, in *UserBeforeRequestReq, opts ...grpc.CallOption) (*UserBeforeRequestResp, error)
	}

	defaultCallbackService struct {
		cli zrpc.Client
	}
)

func NewCallbackService(cli zrpc.Client) CallbackService {
	return &defaultCallbackService{
		cli: cli,
	}
}

func (m *defaultCallbackService) UserAfterOnline(ctx context.Context, in *UserAfterOnlineReq, opts ...grpc.CallOption) (*UserAfterOnlineResp, error) {
	client := peerpb.NewCallbackServiceClient(m.cli.Conn())
	return client.UserAfterOnline(ctx, in, opts...)
}

func (m *defaultCallbackService) UserAfterOffline(ctx context.Context, in *UserAfterOfflineReq, opts ...grpc.CallOption) (*UserAfterOfflineResp, error) {
	client := peerpb.NewCallbackServiceClient(m.cli.Conn())
	return client.UserAfterOffline(ctx, in, opts...)
}

func (m *defaultCallbackService) UserBeforeConnect(ctx context.Context, in *UserBeforeConnectReq, opts ...grpc.CallOption) (*UserBeforeConnectResp, error) {
	client := peerpb.NewCallbackServiceClient(m.cli.Conn())
	return client.UserBeforeConnect(ctx, in, opts...)
}

func (m *defaultCallbackService) UserBeforeRequest(ctx context.Context, in *UserBeforeRequestReq, opts ...grpc.CallOption) (*UserBeforeRequestResp, error) {
	client := peerpb.NewCallbackServiceClient(m.cli.Conn())
	return client.UserBeforeRequest(ctx, in, opts...)
}
