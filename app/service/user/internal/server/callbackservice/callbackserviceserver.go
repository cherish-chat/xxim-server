// Code generated by goctl. DO NOT EDIT.
// Source: user.peer.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-proto/peerpb"
	"github.com/cherish-chat/xxim-server/app/service/user/internal/logic/callbackservice"
	"github.com/cherish-chat/xxim-server/app/service/user/internal/svc"
)

type CallbackServiceServer struct {
	svcCtx *svc.ServiceContext
	peerpb.UnimplementedCallbackServiceServer
}

func NewCallbackServiceServer(svcCtx *svc.ServiceContext) *CallbackServiceServer {
	return &CallbackServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *CallbackServiceServer) UserAfterOnline(ctx context.Context, in *peerpb.UserAfterOnlineReq) (*peerpb.UserAfterOnlineResp, error) {
	l := callbackservicelogic.NewUserAfterOnlineLogic(ctx, s.svcCtx)
	return l.UserAfterOnline(in)
}

func (s *CallbackServiceServer) UserAfterOffline(ctx context.Context, in *peerpb.UserAfterOfflineReq) (*peerpb.UserAfterOfflineResp, error) {
	l := callbackservicelogic.NewUserAfterOfflineLogic(ctx, s.svcCtx)
	return l.UserAfterOffline(in)
}

func (s *CallbackServiceServer) UserBeforeConnect(ctx context.Context, in *peerpb.UserBeforeConnectReq) (*peerpb.UserBeforeConnectResp, error) {
	l := callbackservicelogic.NewUserBeforeConnectLogic(ctx, s.svcCtx)
	return l.UserBeforeConnect(in)
}

func (s *CallbackServiceServer) UserBeforeRequest(ctx context.Context, in *peerpb.UserBeforeRequestReq) (*peerpb.UserBeforeRequestResp, error) {
	l := callbackservicelogic.NewUserBeforeRequestLogic(ctx, s.svcCtx)
	return l.UserBeforeRequest(in)
}

func (s *CallbackServiceServer) UserAfterKeepAlive(ctx context.Context, in *peerpb.UserAfterKeepAliveReq) (*peerpb.UserAfterKeepAliveResp, error) {
	l := callbackservicelogic.NewUserAfterKeepAliveLogic(ctx, s.svcCtx)
	return l.UserAfterKeepAlive(in)
}
