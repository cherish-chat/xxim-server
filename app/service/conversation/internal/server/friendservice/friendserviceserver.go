// Code generated by goctl. DO NOT EDIT.
// Source: conversation.peer.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-proto/peerpb"
	"github.com/cherish-chat/xxim-server/app/service/conversation/internal/logic/friendservice"
	"github.com/cherish-chat/xxim-server/app/service/conversation/internal/svc"
)

type FriendServiceServer struct {
	svcCtx *svc.ServiceContext
	peerpb.UnimplementedFriendServiceServer
}

func NewFriendServiceServer(svcCtx *svc.ServiceContext) *FriendServiceServer {
	return &FriendServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *FriendServiceServer) FriendAfterKeepAlive(ctx context.Context, in *peerpb.FriendAfterKeepAliveReq) (*peerpb.FriendAfterKeepAliveResp, error) {
	l := friendservicelogic.NewFriendAfterKeepAliveLogic(ctx, s.svcCtx)
	return l.FriendAfterKeepAlive(in)
}

func (s *FriendServiceServer) FriendAfterOnline(ctx context.Context, in *peerpb.FriendAfterOnlineReq) (*peerpb.FriendAfterOnlineResp, error) {
	l := friendservicelogic.NewFriendAfterOnlineLogic(ctx, s.svcCtx)
	return l.FriendAfterOnline(in)
}

func (s *FriendServiceServer) FriendAfterOffline(ctx context.Context, in *peerpb.FriendAfterOfflineReq) (*peerpb.FriendAfterOfflineResp, error) {
	l := friendservicelogic.NewFriendAfterOfflineLogic(ctx, s.svcCtx)
	return l.FriendAfterOffline(in)
}

func (s *FriendServiceServer) FriendApply(ctx context.Context, in *peerpb.FriendApplyReq) (*peerpb.FriendApplyResp, error) {
	l := friendservicelogic.NewFriendApplyLogic(ctx, s.svcCtx)
	return l.FriendApply(in)
}

func (s *FriendServiceServer) FriendApplyHandle(ctx context.Context, in *peerpb.FriendApplyHandleReq) (*peerpb.FriendApplyHandleResp, error) {
	l := friendservicelogic.NewFriendApplyHandleLogic(ctx, s.svcCtx)
	return l.FriendApplyHandle(in)
}

func (s *FriendServiceServer) ListFriendApply(ctx context.Context, in *peerpb.ListFriendApplyReq) (*peerpb.ListFriendApplyResp, error) {
	l := friendservicelogic.NewListFriendApplyLogic(ctx, s.svcCtx)
	return l.ListFriendApply(in)
}

func (s *FriendServiceServer) CountFriend(ctx context.Context, in *peerpb.CountFriendReq) (*peerpb.CountFriendResp, error) {
	l := friendservicelogic.NewCountFriendLogic(ctx, s.svcCtx)
	return l.CountFriend(in)
}
