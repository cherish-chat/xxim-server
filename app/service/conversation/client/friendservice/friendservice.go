// Code generated by goctl. DO NOT EDIT.
// Source: conversation.peer.proto

package friendservice

import (
	"context"

	"github.com/cherish-chat/xxim-proto/peerpb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChannelAfterKeepAliveReq                                = peerpb.ChannelAfterKeepAliveReq
	ChannelAfterKeepAliveResp                               = peerpb.ChannelAfterKeepAliveResp
	ChannelAfterOfflineReq                                  = peerpb.ChannelAfterOfflineReq
	ChannelAfterOfflineResp                                 = peerpb.ChannelAfterOfflineResp
	ChannelAfterOnlineReq                                   = peerpb.ChannelAfterOnlineReq
	ChannelAfterOnlineResp                                  = peerpb.ChannelAfterOnlineResp
	CountCreateGroupReq                                     = peerpb.CountCreateGroupReq
	CountCreateGroupResp                                    = peerpb.CountCreateGroupResp
	CountFriendReq                                          = peerpb.CountFriendReq
	CountFriendResp                                         = peerpb.CountFriendResp
	CountJoinGroupReq                                       = peerpb.CountJoinGroupReq
	CountJoinGroupResp                                      = peerpb.CountJoinGroupResp
	DeleteChannelMemberReq                                  = peerpb.DeleteChannelMemberReq
	DeleteChannelMemberResp                                 = peerpb.DeleteChannelMemberResp
	FriendAfterKeepAliveReq                                 = peerpb.FriendAfterKeepAliveReq
	FriendAfterKeepAliveResp                                = peerpb.FriendAfterKeepAliveResp
	FriendAfterOfflineReq                                   = peerpb.FriendAfterOfflineReq
	FriendAfterOfflineResp                                  = peerpb.FriendAfterOfflineResp
	FriendAfterOnlineReq                                    = peerpb.FriendAfterOnlineReq
	FriendAfterOnlineResp                                   = peerpb.FriendAfterOnlineResp
	FriendApplyHandleReq                                    = peerpb.FriendApplyHandleReq
	FriendApplyHandleResp                                   = peerpb.FriendApplyHandleResp
	FriendApplyReq                                          = peerpb.FriendApplyReq
	FriendApplyResp                                         = peerpb.FriendApplyResp
	GroupAfterKeepAliveReq                                  = peerpb.GroupAfterKeepAliveReq
	GroupAfterKeepAliveResp                                 = peerpb.GroupAfterKeepAliveResp
	GroupAfterOfflineReq                                    = peerpb.GroupAfterOfflineReq
	GroupAfterOfflineResp                                   = peerpb.GroupAfterOfflineResp
	GroupAfterOnlineReq                                     = peerpb.GroupAfterOnlineReq
	GroupAfterOnlineResp                                    = peerpb.GroupAfterOnlineResp
	GroupCreateReq                                          = peerpb.GroupCreateReq
	GroupCreateResp                                         = peerpb.GroupCreateResp
	ListChannelSubscribersReq                               = peerpb.ListChannelSubscribersReq
	ListChannelSubscribersReq_Filter                        = peerpb.ListChannelSubscribersReq_Filter
	ListChannelSubscribersReq_Option                        = peerpb.ListChannelSubscribersReq_Option
	ListChannelSubscribersResp                              = peerpb.ListChannelSubscribersResp
	ListChannelSubscribersResp_Subscriber                   = peerpb.ListChannelSubscribersResp_Subscriber
	ListFriendApplyReq                                      = peerpb.ListFriendApplyReq
	ListFriendApplyReq_Filter                               = peerpb.ListFriendApplyReq_Filter
	ListFriendApplyReq_Option                               = peerpb.ListFriendApplyReq_Option
	ListFriendApplyResp                                     = peerpb.ListFriendApplyResp
	ListFriendApplyResp_FriendApply                         = peerpb.ListFriendApplyResp_FriendApply
	ListGroupSubscribersReq                                 = peerpb.ListGroupSubscribersReq
	ListGroupSubscribersReq_Filter                          = peerpb.ListGroupSubscribersReq_Filter
	ListGroupSubscribersReq_Option                          = peerpb.ListGroupSubscribersReq_Option
	ListGroupSubscribersResp                                = peerpb.ListGroupSubscribersResp
	ListGroupSubscribersResp_Subscriber                     = peerpb.ListGroupSubscribersResp_Subscriber
	ListJoinedConversationsReq                              = peerpb.ListJoinedConversationsReq
	ListJoinedConversationsReq_Filter                       = peerpb.ListJoinedConversationsReq_Filter
	ListJoinedConversationsReq_Filter_SettingKV             = peerpb.ListJoinedConversationsReq_Filter_SettingKV
	ListJoinedConversationsReq_Option                       = peerpb.ListJoinedConversationsReq_Option
	ListJoinedConversationsResp                             = peerpb.ListJoinedConversationsResp
	ListJoinedConversationsResp_Conversation                = peerpb.ListJoinedConversationsResp_Conversation
	ListJoinedConversationsResp_Conversation_SelfMemberInfo = peerpb.ListJoinedConversationsResp_Conversation_SelfMemberInfo
	ListMyChannelsReq                                       = peerpb.ListMyChannelsReq
	ListMyChannelsReq_Filter                                = peerpb.ListMyChannelsReq_Filter
	ListMyChannelsReq_Option                                = peerpb.ListMyChannelsReq_Option
	ListMyChannelsResp                                      = peerpb.ListMyChannelsResp
	ListMyChannelsResp_MyChannel                            = peerpb.ListMyChannelsResp_MyChannel
	UpsertChannelMemberReq                                  = peerpb.UpsertChannelMemberReq
	UpsertChannelMemberResp                                 = peerpb.UpsertChannelMemberResp

	FriendService interface {
		FriendAfterKeepAlive(ctx context.Context, in *FriendAfterKeepAliveReq, opts ...grpc.CallOption) (*FriendAfterKeepAliveResp, error)
		FriendAfterOnline(ctx context.Context, in *FriendAfterOnlineReq, opts ...grpc.CallOption) (*FriendAfterOnlineResp, error)
		FriendAfterOffline(ctx context.Context, in *FriendAfterOfflineReq, opts ...grpc.CallOption) (*FriendAfterOfflineResp, error)
		FriendApply(ctx context.Context, in *FriendApplyReq, opts ...grpc.CallOption) (*FriendApplyResp, error)
		FriendApplyHandle(ctx context.Context, in *FriendApplyHandleReq, opts ...grpc.CallOption) (*FriendApplyHandleResp, error)
		ListFriendApply(ctx context.Context, in *ListFriendApplyReq, opts ...grpc.CallOption) (*ListFriendApplyResp, error)
		CountFriend(ctx context.Context, in *CountFriendReq, opts ...grpc.CallOption) (*CountFriendResp, error)
	}

	defaultFriendService struct {
		cli zrpc.Client
	}
)

func NewFriendService(cli zrpc.Client) FriendService {
	return &defaultFriendService{
		cli: cli,
	}
}

func (m *defaultFriendService) FriendAfterKeepAlive(ctx context.Context, in *FriendAfterKeepAliveReq, opts ...grpc.CallOption) (*FriendAfterKeepAliveResp, error) {
	client := peerpb.NewFriendServiceClient(m.cli.Conn())
	return client.FriendAfterKeepAlive(ctx, in, opts...)
}

func (m *defaultFriendService) FriendAfterOnline(ctx context.Context, in *FriendAfterOnlineReq, opts ...grpc.CallOption) (*FriendAfterOnlineResp, error) {
	client := peerpb.NewFriendServiceClient(m.cli.Conn())
	return client.FriendAfterOnline(ctx, in, opts...)
}

func (m *defaultFriendService) FriendAfterOffline(ctx context.Context, in *FriendAfterOfflineReq, opts ...grpc.CallOption) (*FriendAfterOfflineResp, error) {
	client := peerpb.NewFriendServiceClient(m.cli.Conn())
	return client.FriendAfterOffline(ctx, in, opts...)
}

func (m *defaultFriendService) FriendApply(ctx context.Context, in *FriendApplyReq, opts ...grpc.CallOption) (*FriendApplyResp, error) {
	client := peerpb.NewFriendServiceClient(m.cli.Conn())
	return client.FriendApply(ctx, in, opts...)
}

func (m *defaultFriendService) FriendApplyHandle(ctx context.Context, in *FriendApplyHandleReq, opts ...grpc.CallOption) (*FriendApplyHandleResp, error) {
	client := peerpb.NewFriendServiceClient(m.cli.Conn())
	return client.FriendApplyHandle(ctx, in, opts...)
}

func (m *defaultFriendService) ListFriendApply(ctx context.Context, in *ListFriendApplyReq, opts ...grpc.CallOption) (*ListFriendApplyResp, error) {
	client := peerpb.NewFriendServiceClient(m.cli.Conn())
	return client.ListFriendApply(ctx, in, opts...)
}

func (m *defaultFriendService) CountFriend(ctx context.Context, in *CountFriendReq, opts ...grpc.CallOption) (*CountFriendResp, error) {
	client := peerpb.NewFriendServiceClient(m.cli.Conn())
	return client.CountFriend(ctx, in, opts...)
}
