// Code generated by goctl. DO NOT EDIT.
// Source: conversation.peer.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-proto/peerpb"
	"github.com/cherish-chat/xxim-server/app/service/conversation/internal/logic/channelservice"
	"github.com/cherish-chat/xxim-server/app/service/conversation/internal/svc"
)

type ChannelServiceServer struct {
	svcCtx *svc.ServiceContext
	peerpb.UnimplementedChannelServiceServer
}

func NewChannelServiceServer(svcCtx *svc.ServiceContext) *ChannelServiceServer {
	return &ChannelServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *ChannelServiceServer) ChannelAfterKeepAlive(ctx context.Context, in *peerpb.ChannelAfterKeepAliveReq) (*peerpb.ChannelAfterKeepAliveResp, error) {
	l := channelservicelogic.NewChannelAfterKeepAliveLogic(ctx, s.svcCtx)
	return l.ChannelAfterKeepAlive(in)
}

func (s *ChannelServiceServer) ChannelAfterOnline(ctx context.Context, in *peerpb.ChannelAfterOnlineReq) (*peerpb.ChannelAfterOnlineResp, error) {
	l := channelservicelogic.NewChannelAfterOnlineLogic(ctx, s.svcCtx)
	return l.ChannelAfterOnline(in)
}

func (s *ChannelServiceServer) ChannelAfterOffline(ctx context.Context, in *peerpb.ChannelAfterOfflineReq) (*peerpb.ChannelAfterOfflineResp, error) {
	l := channelservicelogic.NewChannelAfterOfflineLogic(ctx, s.svcCtx)
	return l.ChannelAfterOffline(in)
}

func (s *ChannelServiceServer) UpsertChannelMember(ctx context.Context, in *peerpb.UpsertChannelMemberReq) (*peerpb.UpsertChannelMemberResp, error) {
	l := channelservicelogic.NewUpsertChannelMemberLogic(ctx, s.svcCtx)
	return l.UpsertChannelMember(in)
}

func (s *ChannelServiceServer) DeleteChannelMember(ctx context.Context, in *peerpb.DeleteChannelMemberReq) (*peerpb.DeleteChannelMemberResp, error) {
	l := channelservicelogic.NewDeleteChannelMemberLogic(ctx, s.svcCtx)
	return l.DeleteChannelMember(in)
}

func (s *ChannelServiceServer) ListChannelSubscribers(ctx context.Context, in *peerpb.ListChannelSubscribersReq) (*peerpb.ListChannelSubscribersResp, error) {
	l := channelservicelogic.NewListChannelSubscribersLogic(ctx, s.svcCtx)
	return l.ListChannelSubscribers(in)
}

func (s *ChannelServiceServer) ListMyChannels(ctx context.Context, in *peerpb.ListMyChannelsReq) (*peerpb.ListMyChannelsResp, error) {
	l := channelservicelogic.NewListMyChannelsLogic(ctx, s.svcCtx)
	return l.ListMyChannels(in)
}
