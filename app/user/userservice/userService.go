// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BirthdayInfo             = pb.BirthdayInfo
	ConfirmRegisterReq       = pb.ConfirmRegisterReq
	ConfirmRegisterResp      = pb.ConfirmRegisterResp
	GetUserHomeReq           = pb.GetUserHomeReq
	GetUserHomeResp          = pb.GetUserHomeResp
	LevelInfo                = pb.LevelInfo
	LoginReq                 = pb.LoginReq
	LoginResp                = pb.LoginResp
	MapUserByIdsReq          = pb.MapUserByIdsReq
	MapUserByIdsResp         = pb.MapUserByIdsResp
	SearchUsersByKeywordReq  = pb.SearchUsersByKeywordReq
	SearchUsersByKeywordResp = pb.SearchUsersByKeywordResp
	UserBaseInfo             = pb.UserBaseInfo

	UserService interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		ConfirmRegister(ctx context.Context, in *ConfirmRegisterReq, opts ...grpc.CallOption) (*ConfirmRegisterResp, error)
		MapUserByIds(ctx context.Context, in *MapUserByIdsReq, opts ...grpc.CallOption) (*MapUserByIdsResp, error)
		SearchUsersByKeyword(ctx context.Context, in *SearchUsersByKeywordReq, opts ...grpc.CallOption) (*SearchUsersByKeywordResp, error)
		GetUserHome(ctx context.Context, in *GetUserHomeReq, opts ...grpc.CallOption) (*GetUserHomeResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) ConfirmRegister(ctx context.Context, in *ConfirmRegisterReq, opts ...grpc.CallOption) (*ConfirmRegisterResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.ConfirmRegister(ctx, in, opts...)
}

func (m *defaultUserService) MapUserByIds(ctx context.Context, in *MapUserByIdsReq, opts ...grpc.CallOption) (*MapUserByIdsResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.MapUserByIds(ctx, in, opts...)
}

func (m *defaultUserService) SearchUsersByKeyword(ctx context.Context, in *SearchUsersByKeywordReq, opts ...grpc.CallOption) (*SearchUsersByKeywordResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.SearchUsersByKeyword(ctx, in, opts...)
}

func (m *defaultUserService) GetUserHome(ctx context.Context, in *GetUserHomeReq, opts ...grpc.CallOption) (*GetUserHomeResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.GetUserHome(ctx, in, opts...)
}
