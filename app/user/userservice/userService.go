// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchGetUserAllDevicesReq             = pb.BatchGetUserAllDevicesReq
	BatchGetUserAllDevicesResp            = pb.BatchGetUserAllDevicesResp
	BatchGetUserAllDevicesResp_AllDevices = pb.BatchGetUserAllDevicesResp_AllDevices
	BatchGetUserBaseInfoReq               = pb.BatchGetUserBaseInfoReq
	BatchGetUserBaseInfoResp              = pb.BatchGetUserBaseInfoResp
	BirthdayInfo                          = pb.BirthdayInfo
	ConfirmRegisterReq                    = pb.ConfirmRegisterReq
	ConfirmRegisterResp                   = pb.ConfirmRegisterResp
	GetUserHomeReq                        = pb.GetUserHomeReq
	GetUserHomeResp                       = pb.GetUserHomeResp
	GetUserSettingsReq                    = pb.GetUserSettingsReq
	GetUserSettingsResp                   = pb.GetUserSettingsResp
	LevelInfo                             = pb.LevelInfo
	LoginReq                              = pb.LoginReq
	LoginResp                             = pb.LoginResp
	MapUserByIdsReq                       = pb.MapUserByIdsReq
	MapUserByIdsResp                      = pb.MapUserByIdsResp
	SearchUsersByKeywordReq               = pb.SearchUsersByKeywordReq
	SearchUsersByKeywordResp              = pb.SearchUsersByKeywordResp
	SetUserSettingsReq                    = pb.SetUserSettingsReq
	SetUserSettingsResp                   = pb.SetUserSettingsResp
	UserBaseInfo                          = pb.UserBaseInfo
	UserSetting                           = pb.UserSetting

	UserService interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		ConfirmRegister(ctx context.Context, in *ConfirmRegisterReq, opts ...grpc.CallOption) (*ConfirmRegisterResp, error)
		MapUserByIds(ctx context.Context, in *MapUserByIdsReq, opts ...grpc.CallOption) (*MapUserByIdsResp, error)
		BatchGetUserBaseInfo(ctx context.Context, in *BatchGetUserBaseInfoReq, opts ...grpc.CallOption) (*BatchGetUserBaseInfoResp, error)
		SearchUsersByKeyword(ctx context.Context, in *SearchUsersByKeywordReq, opts ...grpc.CallOption) (*SearchUsersByKeywordResp, error)
		GetUserHome(ctx context.Context, in *GetUserHomeReq, opts ...grpc.CallOption) (*GetUserHomeResp, error)
		GetUserSettings(ctx context.Context, in *GetUserSettingsReq, opts ...grpc.CallOption) (*GetUserSettingsResp, error)
		SetUserSettings(ctx context.Context, in *SetUserSettingsReq, opts ...grpc.CallOption) (*SetUserSettingsResp, error)
		// AfterConnect conn hook
		AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error)
		// AfterDisconnect conn hook
		AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error)
		BatchGetUserAllDevices(ctx context.Context, in *BatchGetUserAllDevicesReq, opts ...grpc.CallOption) (*BatchGetUserAllDevicesResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) ConfirmRegister(ctx context.Context, in *ConfirmRegisterReq, opts ...grpc.CallOption) (*ConfirmRegisterResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.ConfirmRegister(ctx, in, opts...)
}

func (m *defaultUserService) MapUserByIds(ctx context.Context, in *MapUserByIdsReq, opts ...grpc.CallOption) (*MapUserByIdsResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.MapUserByIds(ctx, in, opts...)
}

func (m *defaultUserService) BatchGetUserBaseInfo(ctx context.Context, in *BatchGetUserBaseInfoReq, opts ...grpc.CallOption) (*BatchGetUserBaseInfoResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.BatchGetUserBaseInfo(ctx, in, opts...)
}

func (m *defaultUserService) SearchUsersByKeyword(ctx context.Context, in *SearchUsersByKeywordReq, opts ...grpc.CallOption) (*SearchUsersByKeywordResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.SearchUsersByKeyword(ctx, in, opts...)
}

func (m *defaultUserService) GetUserHome(ctx context.Context, in *GetUserHomeReq, opts ...grpc.CallOption) (*GetUserHomeResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.GetUserHome(ctx, in, opts...)
}

func (m *defaultUserService) GetUserSettings(ctx context.Context, in *GetUserSettingsReq, opts ...grpc.CallOption) (*GetUserSettingsResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.GetUserSettings(ctx, in, opts...)
}

func (m *defaultUserService) SetUserSettings(ctx context.Context, in *SetUserSettingsReq, opts ...grpc.CallOption) (*SetUserSettingsResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.SetUserSettings(ctx, in, opts...)
}

// AfterConnect conn hook
func (m *defaultUserService) AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.AfterConnect(ctx, in, opts...)
}

// AfterDisconnect conn hook
func (m *defaultUserService) AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.AfterDisconnect(ctx, in, opts...)
}

func (m *defaultUserService) BatchGetUserAllDevices(ctx context.Context, in *BatchGetUserAllDevicesReq, opts ...grpc.CallOption) (*BatchGetUserAllDevicesResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.BatchGetUserAllDevices(ctx, in, opts...)
}
