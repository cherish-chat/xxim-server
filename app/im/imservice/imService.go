// Code generated by goctl. DO NOT EDIT!
// Source: im.proto

package imservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AfterConnectReq       = pb.AfterConnectReq
	AfterDisconnectReq    = pb.AfterDisconnectReq
	BeforeConnectReq      = pb.BeforeConnectReq
	BeforeConnectResp     = pb.BeforeConnectResp
	GetUserLatestConnReq  = pb.GetUserLatestConnReq
	GetUserLatestConnResp = pb.GetUserLatestConnResp
	ImMQBody              = pb.ImMQBody

	ImService interface {
		BeforeConnect(ctx context.Context, in *BeforeConnectReq, opts ...grpc.CallOption) (*BeforeConnectResp, error)
		AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error)
		AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error)
		KickUserConn(ctx context.Context, in *KickUserConnReq, opts ...grpc.CallOption) (*KickUserConnResp, error)
		GetUserConn(ctx context.Context, in *GetUserConnReq, opts ...grpc.CallOption) (*GetUserConnResp, error)
		GetUserLatestConn(ctx context.Context, in *GetUserLatestConnReq, opts ...grpc.CallOption) (*GetUserLatestConnResp, error)
	}

	defaultImService struct {
		cli zrpc.Client
	}
)

func NewImService(cli zrpc.Client) ImService {
	return &defaultImService{
		cli: cli,
	}
}

func (m *defaultImService) BeforeConnect(ctx context.Context, in *BeforeConnectReq, opts ...grpc.CallOption) (*BeforeConnectResp, error) {
	client := pb.NewImServiceClient(m.cli.Conn())
	return client.BeforeConnect(ctx, in, opts...)
}

func (m *defaultImService) AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewImServiceClient(m.cli.Conn())
	return client.AfterConnect(ctx, in, opts...)
}

func (m *defaultImService) AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewImServiceClient(m.cli.Conn())
	return client.AfterDisconnect(ctx, in, opts...)
}

func (m *defaultImService) KickUserConn(ctx context.Context, in *KickUserConnReq, opts ...grpc.CallOption) (*KickUserConnResp, error) {
	client := pb.NewImServiceClient(m.cli.Conn())
	return client.KickUserConn(ctx, in, opts...)
}

func (m *defaultImService) GetUserConn(ctx context.Context, in *GetUserConnReq, opts ...grpc.CallOption) (*GetUserConnResp, error) {
	client := pb.NewImServiceClient(m.cli.Conn())
	return client.GetUserConn(ctx, in, opts...)
}

func (m *defaultImService) GetUserLatestConn(ctx context.Context, in *GetUserLatestConnReq, opts ...grpc.CallOption) (*GetUserLatestConnResp, error) {
	client := pb.NewImServiceClient(m.cli.Conn())
	return client.GetUserLatestConn(ctx, in, opts...)
}
