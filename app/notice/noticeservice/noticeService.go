// Code generated by goctl. DO NOT EDIT.
// Source: notice.proto

package noticeservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AckNoticeDataReq      = pb.AckNoticeDataReq
	AckNoticeDataResp     = pb.AckNoticeDataResp
	GetUserNoticeDataReq  = pb.GetUserNoticeDataReq
	GetUserNoticeDataResp = pb.GetUserNoticeDataResp
	NoticeData            = pb.NoticeData
	NoticeDataList        = pb.NoticeDataList
	NoticeData_Options    = pb.NoticeData_Options

	NoticeService interface {
		// AfterConnect conn hook
		AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error)
		// AfterDisconnect conn hook
		AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error)
		// KeepAlive
		KeepAlive(ctx context.Context, in *KeepAliveReq, opts ...grpc.CallOption) (*KeepAliveResp, error)
		// GetUserNoticeData 获取用户通知数据
		GetUserNoticeData(ctx context.Context, in *GetUserNoticeDataReq, opts ...grpc.CallOption) (*GetUserNoticeDataResp, error)
		// AckNoticeData 确认通知数据
		AckNoticeData(ctx context.Context, in *AckNoticeDataReq, opts ...grpc.CallOption) (*AckNoticeDataResp, error)
	}

	defaultNoticeService struct {
		cli zrpc.Client
	}
)

func NewNoticeService(cli zrpc.Client) NoticeService {
	return &defaultNoticeService{
		cli: cli,
	}
}

// AfterConnect conn hook
func (m *defaultNoticeService) AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewNoticeServiceClient(m.cli.Conn())
	return client.AfterConnect(ctx, in, opts...)
}

// AfterDisconnect conn hook
func (m *defaultNoticeService) AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewNoticeServiceClient(m.cli.Conn())
	return client.AfterDisconnect(ctx, in, opts...)
}

// KeepAlive
func (m *defaultNoticeService) KeepAlive(ctx context.Context, in *KeepAliveReq, opts ...grpc.CallOption) (*KeepAliveResp, error) {
	client := pb.NewNoticeServiceClient(m.cli.Conn())
	return client.KeepAlive(ctx, in, opts...)
}

// GetUserNoticeData 获取用户通知数据
func (m *defaultNoticeService) GetUserNoticeData(ctx context.Context, in *GetUserNoticeDataReq, opts ...grpc.CallOption) (*GetUserNoticeDataResp, error) {
	client := pb.NewNoticeServiceClient(m.cli.Conn())
	return client.GetUserNoticeData(ctx, in, opts...)
}

// AckNoticeData 确认通知数据
func (m *defaultNoticeService) AckNoticeData(ctx context.Context, in *AckNoticeDataReq, opts ...grpc.CallOption) (*AckNoticeDataResp, error) {
	client := pb.NewNoticeServiceClient(m.cli.Conn())
	return client.AckNoticeData(ctx, in, opts...)
}
