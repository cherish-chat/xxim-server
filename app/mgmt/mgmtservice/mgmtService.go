// Code generated by goctl. DO NOT EDIT!
// Source: mgmt.proto

package mgmtservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetServerConfigReq  = pb.GetServerConfigReq
	GetServerConfigResp = pb.GetServerConfigResp

	MgmtService interface {
		AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error)
		AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error)
		GetServerConfig(ctx context.Context, in *GetServerConfigReq, opts ...grpc.CallOption) (*GetServerConfigResp, error)
	}

	defaultMgmtService struct {
		cli zrpc.Client
	}
)

func NewMgmtService(cli zrpc.Client) MgmtService {
	return &defaultMgmtService{
		cli: cli,
	}
}

func (m *defaultMgmtService) AfterConnect(ctx context.Context, in *AfterConnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewMgmtServiceClient(m.cli.Conn())
	return client.AfterConnect(ctx, in, opts...)
}

func (m *defaultMgmtService) AfterDisconnect(ctx context.Context, in *AfterDisconnectReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewMgmtServiceClient(m.cli.Conn())
	return client.AfterDisconnect(ctx, in, opts...)
}

func (m *defaultMgmtService) GetServerConfig(ctx context.Context, in *GetServerConfigReq, opts ...grpc.CallOption) (*GetServerConfigResp, error) {
	client := pb.NewMgmtServiceClient(m.cli.Conn())
	return client.GetServerConfig(ctx, in, opts...)
}
