// Code generated by goctl. DO NOT EDIT!
// Source: group.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-server/app/group/internal/logic"
	"github.com/cherish-chat/xxim-server/app/group/internal/svc"
	"github.com/cherish-chat/xxim-server/common/pb"
)

type GroupServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedGroupServiceServer
}

func NewGroupServiceServer(svcCtx *svc.ServiceContext) *GroupServiceServer {
	return &GroupServiceServer{
		svcCtx: svcCtx,
	}
}

// CreateGroup 创建群聊
func (s *GroupServiceServer) CreateGroup(ctx context.Context, in *pb.CreateGroupReq) (*pb.CreateGroupResp, error) {
	l := logic.NewCreateGroupLogic(ctx, s.svcCtx)
	return l.CreateGroup(in)
}

// GetGroupHome 获取群聊首页
func (s *GroupServiceServer) GetGroupHome(ctx context.Context, in *pb.GetGroupHomeReq) (*pb.GetGroupHomeResp, error) {
	l := logic.NewGetGroupHomeLogic(ctx, s.svcCtx)
	return l.GetGroupHome(in)
}

// InviteFriendToGroup 邀请好友加入群聊
func (s *GroupServiceServer) InviteFriendToGroup(ctx context.Context, in *pb.InviteFriendToGroupReq) (*pb.InviteFriendToGroupResp, error) {
	l := logic.NewInviteFriendToGroupLogic(ctx, s.svcCtx)
	return l.InviteFriendToGroup(in)
}

// CreateGroupNotice 创建群公告
func (s *GroupServiceServer) CreateGroupNotice(ctx context.Context, in *pb.CreateGroupNoticeReq) (*pb.CreateGroupNoticeResp, error) {
	l := logic.NewCreateGroupNoticeLogic(ctx, s.svcCtx)
	return l.CreateGroupNotice(in)
}

// DeleteGroupNotice 删除群公告
func (s *GroupServiceServer) DeleteGroupNotice(ctx context.Context, in *pb.DeleteGroupNoticeReq) (*pb.DeleteGroupNoticeResp, error) {
	l := logic.NewDeleteGroupNoticeLogic(ctx, s.svcCtx)
	return l.DeleteGroupNotice(in)
}

// GetGroupNoticeList 获取群公告列表
func (s *GroupServiceServer) GetGroupNoticeList(ctx context.Context, in *pb.GetGroupNoticeListReq) (*pb.GetGroupNoticeListResp, error) {
	l := logic.NewGetGroupNoticeListLogic(ctx, s.svcCtx)
	return l.GetGroupNoticeList(in)
}

// SetGroupMemberInfo 设置群成员信息
func (s *GroupServiceServer) SetGroupMemberInfo(ctx context.Context, in *pb.SetGroupMemberInfoReq) (*pb.SetGroupMemberInfoResp, error) {
	l := logic.NewSetGroupMemberInfoLogic(ctx, s.svcCtx)
	return l.SetGroupMemberInfo(in)
}

// GetGroupMemberInfo 获取群成员信息
func (s *GroupServiceServer) GetGroupMemberInfo(ctx context.Context, in *pb.GetGroupMemberInfoReq) (*pb.GetGroupMemberInfoResp, error) {
	l := logic.NewGetGroupMemberInfoLogic(ctx, s.svcCtx)
	return l.GetGroupMemberInfo(in)
}

// EditGroupInfo 编辑群信息
func (s *GroupServiceServer) EditGroupInfo(ctx context.Context, in *pb.EditGroupInfoReq) (*pb.EditGroupInfoResp, error) {
	l := logic.NewEditGroupInfoLogic(ctx, s.svcCtx)
	return l.EditGroupInfo(in)
}

// TransferGroupOwner 转让群主
func (s *GroupServiceServer) TransferGroupOwner(ctx context.Context, in *pb.TransferGroupOwnerReq) (*pb.TransferGroupOwnerResp, error) {
	l := logic.NewTransferGroupOwnerLogic(ctx, s.svcCtx)
	return l.TransferGroupOwner(in)
}

// KickGroupMember 踢出群成员
func (s *GroupServiceServer) KickGroupMember(ctx context.Context, in *pb.KickGroupMemberReq) (*pb.KickGroupMemberResp, error) {
	l := logic.NewKickGroupMemberLogic(ctx, s.svcCtx)
	return l.KickGroupMember(in)
}

// GetGroupMemberList 获取群成员列表
func (s *GroupServiceServer) GetGroupMemberList(ctx context.Context, in *pb.GetGroupMemberListReq) (*pb.GetGroupMemberListResp, error) {
	l := logic.NewGetGroupMemberListLogic(ctx, s.svcCtx)
	return l.GetGroupMemberList(in)
}

// GetMyGroupList 获取我的群聊列表
func (s *GroupServiceServer) GetMyGroupList(ctx context.Context, in *pb.GetMyGroupListReq) (*pb.GetMyGroupListResp, error) {
	l := logic.NewGetMyGroupListLogic(ctx, s.svcCtx)
	return l.GetMyGroupList(in)
}

// MapGroupByIds 获取群聊信息
func (s *GroupServiceServer) MapGroupByIds(ctx context.Context, in *pb.MapGroupByIdsReq) (*pb.MapGroupByIdsResp, error) {
	l := logic.NewMapGroupByIdsLogic(ctx, s.svcCtx)
	return l.MapGroupByIds(in)
}

// SyncGroupMemberCount 同步群成员数量
func (s *GroupServiceServer) SyncGroupMemberCount(ctx context.Context, in *pb.SyncGroupMemberCountReq) (*pb.SyncGroupMemberCountResp, error) {
	l := logic.NewSyncGroupMemberCountLogic(ctx, s.svcCtx)
	return l.SyncGroupMemberCount(in)
}

// ApplyToBeGroupMember 申请加入群聊
func (s *GroupServiceServer) ApplyToBeGroupMember(ctx context.Context, in *pb.ApplyToBeGroupMemberReq) (*pb.ApplyToBeGroupMemberResp, error) {
	l := logic.NewApplyToBeGroupMemberLogic(ctx, s.svcCtx)
	return l.ApplyToBeGroupMember(in)
}

// HandleGroupApply 处理群聊申请
func (s *GroupServiceServer) HandleGroupApply(ctx context.Context, in *pb.HandleGroupApplyReq) (*pb.HandleGroupApplyResp, error) {
	l := logic.NewHandleGroupApplyLogic(ctx, s.svcCtx)
	return l.HandleGroupApply(in)
}
