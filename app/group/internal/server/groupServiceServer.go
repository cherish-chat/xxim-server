// Code generated by goctl. DO NOT EDIT!
// Source: group.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-server/app/group/internal/logic"
	"github.com/cherish-chat/xxim-server/app/group/internal/svc"
	"github.com/cherish-chat/xxim-server/common/pb"
)

type GroupServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedGroupServiceServer
}

func NewGroupServiceServer(svcCtx *svc.ServiceContext) *GroupServiceServer {
	return &GroupServiceServer{
		svcCtx: svcCtx,
	}
}

// CreateGroup 创建群聊
func (s *GroupServiceServer) CreateGroup(ctx context.Context, in *pb.CreateGroupReq) (*pb.CreateGroupResp, error) {
	l := logic.NewCreateGroupLogic(ctx, s.svcCtx)
	return l.CreateGroup(in)
}

// GetGroupHome 获取群聊首页
func (s *GroupServiceServer) GetGroupHome(ctx context.Context, in *pb.GetGroupHomeReq) (*pb.GetGroupHomeResp, error) {
	l := logic.NewGetGroupHomeLogic(ctx, s.svcCtx)
	return l.GetGroupHome(in)
}

// InviteFriendToGroup 邀请好友加入群聊
func (s *GroupServiceServer) InviteFriendToGroup(ctx context.Context, in *pb.InviteFriendToGroupReq) (*pb.InviteFriendToGroupResp, error) {
	l := logic.NewInviteFriendToGroupLogic(ctx, s.svcCtx)
	return l.InviteFriendToGroup(in)
}

// CreateGroupNotice 创建群公告
func (s *GroupServiceServer) CreateGroupNotice(ctx context.Context, in *pb.CreateGroupNoticeReq) (*pb.CreateGroupNoticeResp, error) {
	l := logic.NewCreateGroupNoticeLogic(ctx, s.svcCtx)
	return l.CreateGroupNotice(in)
}

// DeleteGroupNotice 删除群公告
func (s *GroupServiceServer) DeleteGroupNotice(ctx context.Context, in *pb.DeleteGroupNoticeReq) (*pb.DeleteGroupNoticeResp, error) {
	l := logic.NewDeleteGroupNoticeLogic(ctx, s.svcCtx)
	return l.DeleteGroupNotice(in)
}

// GetGroupNoticeList 获取群公告列表
func (s *GroupServiceServer) GetGroupNoticeList(ctx context.Context, in *pb.GetGroupNoticeListReq) (*pb.GetGroupNoticeListResp, error) {
	l := logic.NewGetGroupNoticeListLogic(ctx, s.svcCtx)
	return l.GetGroupNoticeList(in)
}

// SetGroupMemberInfo 设置群成员信息
func (s *GroupServiceServer) SetGroupMemberInfo(ctx context.Context, in *pb.SetGroupMemberInfoReq) (*pb.SetGroupMemberInfoResp, error) {
	l := logic.NewSetGroupMemberInfoLogic(ctx, s.svcCtx)
	return l.SetGroupMemberInfo(in)
}

// GetGroupMemberInfo 获取群成员信息
func (s *GroupServiceServer) GetGroupMemberInfo(ctx context.Context, in *pb.GetGroupMemberInfoReq) (*pb.GetGroupMemberInfoResp, error) {
	l := logic.NewGetGroupMemberInfoLogic(ctx, s.svcCtx)
	return l.GetGroupMemberInfo(in)
}

// EditGroupInfo 编辑群信息
func (s *GroupServiceServer) EditGroupInfo(ctx context.Context, in *pb.EditGroupInfoReq) (*pb.EditGroupInfoResp, error) {
	l := logic.NewEditGroupInfoLogic(ctx, s.svcCtx)
	return l.EditGroupInfo(in)
}

// SetGroupSetting 设置群设置
func (s *GroupServiceServer) SetGroupSetting(ctx context.Context, in *pb.SetGroupSettingReq) (*pb.SetGroupSettingResp, error) {
	l := logic.NewSetGroupSettingLogic(ctx, s.svcCtx)
	return l.SetGroupSetting(in)
}

// GetGroupSetting 获取群设置
func (s *GroupServiceServer) GetGroupSetting(ctx context.Context, in *pb.GetGroupSettingReq) (*pb.GetGroupSettingResp, error) {
	l := logic.NewGetGroupSettingLogic(ctx, s.svcCtx)
	return l.GetGroupSetting(in)
}

// TransferGroupOwner 转让群主
func (s *GroupServiceServer) TransferGroupOwner(ctx context.Context, in *pb.TransferGroupOwnerReq) (*pb.TransferGroupOwnerResp, error) {
	l := logic.NewTransferGroupOwnerLogic(ctx, s.svcCtx)
	return l.TransferGroupOwner(in)
}

// SetGroupMemberRole 设置群成员角色
func (s *GroupServiceServer) SetGroupMemberRole(ctx context.Context, in *pb.SetGroupMemberRoleReq) (*pb.SetGroupMemberRoleResp, error) {
	l := logic.NewSetGroupMemberRoleLogic(ctx, s.svcCtx)
	return l.SetGroupMemberRole(in)
}

// KickGroupMember 踢出群成员
func (s *GroupServiceServer) KickGroupMember(ctx context.Context, in *pb.KickGroupMemberReq) (*pb.KickGroupMemberResp, error) {
	l := logic.NewKickGroupMemberLogic(ctx, s.svcCtx)
	return l.KickGroupMember(in)
}

// QuitGroup 退出群聊
func (s *GroupServiceServer) QuitGroup(ctx context.Context, in *pb.QuitGroupReq) (*pb.QuitGroupResp, error) {
	l := logic.NewQuitGroupLogic(ctx, s.svcCtx)
	return l.QuitGroup(in)
}

// BanGroupMember 禁言群成员
func (s *GroupServiceServer) BanGroupMember(ctx context.Context, in *pb.BanGroupMemberReq) (*pb.BanGroupMemberResp, error) {
	l := logic.NewBanGroupMemberLogic(ctx, s.svcCtx)
	return l.BanGroupMember(in)
}

// BanAllGroupMember 禁言全部群成员
func (s *GroupServiceServer) BanAllGroupMember(ctx context.Context, in *pb.BanAllGroupMemberReq) (*pb.BanAllGroupMemberResp, error) {
	l := logic.NewBanAllGroupMemberLogic(ctx, s.svcCtx)
	return l.BanAllGroupMember(in)
}

// UnbanGroupMember 解除禁言群成员
func (s *GroupServiceServer) UnbanGroupMember(ctx context.Context, in *pb.UnbanGroupMemberReq) (*pb.UnbanGroupMemberResp, error) {
	l := logic.NewUnbanGroupMemberLogic(ctx, s.svcCtx)
	return l.UnbanGroupMember(in)
}

// UnbanAllGroupMember 解除禁言全部群成员
func (s *GroupServiceServer) UnbanAllGroupMember(ctx context.Context, in *pb.UnbanAllGroupMemberReq) (*pb.UnbanAllGroupMemberResp, error) {
	l := logic.NewUnbanAllGroupMemberLogic(ctx, s.svcCtx)
	return l.UnbanAllGroupMember(in)
}

// GetGroupMemberList 获取群成员列表
func (s *GroupServiceServer) GetGroupMemberList(ctx context.Context, in *pb.GetGroupMemberListReq) (*pb.GetGroupMemberListResp, error) {
	l := logic.NewGetGroupMemberListLogic(ctx, s.svcCtx)
	return l.GetGroupMemberList(in)
}

// DismissGroup 解散群聊
func (s *GroupServiceServer) DismissGroup(ctx context.Context, in *pb.DismissGroupReq) (*pb.DismissGroupResp, error) {
	l := logic.NewDismissGroupLogic(ctx, s.svcCtx)
	return l.DismissGroup(in)
}

// SetGroupMsgNotifyType 设置群消息通知选项
func (s *GroupServiceServer) SetGroupMsgNotifyType(ctx context.Context, in *pb.SetGroupMsgNotifyTypeReq) (*pb.SetGroupMsgNotifyTypeResp, error) {
	l := logic.NewSetGroupMsgNotifyTypeLogic(ctx, s.svcCtx)
	return l.SetGroupMsgNotifyType(in)
}

// GetMyGroupList 获取我的群聊列表
func (s *GroupServiceServer) GetMyGroupList(ctx context.Context, in *pb.GetMyGroupListReq) (*pb.GetMyGroupListResp, error) {
	l := logic.NewGetMyGroupListLogic(ctx, s.svcCtx)
	return l.GetMyGroupList(in)
}
