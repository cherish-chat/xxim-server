// Code generated by goctl. DO NOT EDIT!
// Source: xx.proto

package xxservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ClearGroupMemberReq   = pb.ClearGroupMemberReq
	ClearGroupMemberResp  = pb.ClearGroupMemberResp
	ConvMemberData        = pb.ConvMemberData
	CreateFriendReq       = pb.CreateFriendReq
	CreateFriendResp      = pb.CreateFriendResp
	CreateGroupReq        = pb.CreateGroupReq
	CreateGroupResp       = pb.CreateGroupResp
	DeleteFriendReq       = pb.DeleteFriendReq
	DeleteFriendResp      = pb.DeleteFriendResp
	FriendData            = pb.FriendData
	GetFriendReq          = pb.GetFriendReq
	GetFriendResp         = pb.GetFriendResp
	GetGroupReq           = pb.GetGroupReq
	GetGroupResp          = pb.GetGroupResp
	GetUserReq            = pb.GetUserReq
	GetUserResp           = pb.GetUserResp
	GroupData             = pb.GroupData
	InviteGroupReq        = pb.InviteGroupReq
	InviteGroupResp       = pb.InviteGroupResp
	KickGroupMemberReq    = pb.KickGroupMemberReq
	KickGroupMemberResp   = pb.KickGroupMemberResp
	LoginReq              = pb.LoginReq
	LoginResp             = pb.LoginResp
	QuitGroupMemberReq    = pb.QuitGroupMemberReq
	QuitGroupMemberResp   = pb.QuitGroupMemberResp
	RegisterReq           = pb.RegisterReq
	RegisterResp          = pb.RegisterResp
	SearchUserReq         = pb.SearchUserReq
	SearchUserResp        = pb.SearchUserResp
	UpdateFriendReq       = pb.UpdateFriendReq
	UpdateFriendResp      = pb.UpdateFriendResp
	UpdateGroupReq        = pb.UpdateGroupReq
	UpdateGroupResp       = pb.UpdateGroupResp
	UpdateUserReq         = pb.UpdateUserReq
	UpdateUserResp        = pb.UpdateUserResp
	UserData              = pb.UserData
	UserData_RegisterInfo = pb.UserData_RegisterInfo

	XxService interface {
		// Register 注册用户
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		// GetUser 获取用户信息
		GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
		// Login 登录
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// UpdateUser 更新用户信息
		UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
		// SearchUser 搜索用户
		SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
		// GetFriend 获取好友
		GetFriend(ctx context.Context, in *GetFriendReq, opts ...grpc.CallOption) (*GetFriendResp, error)
		// CreateFriend 添加好友
		CreateFriend(ctx context.Context, in *CreateFriendReq, opts ...grpc.CallOption) (*CreateFriendResp, error)
		// UpdateFriend 更新好友
		UpdateFriend(ctx context.Context, in *UpdateFriendReq, opts ...grpc.CallOption) (*UpdateFriendResp, error)
		// DeleteFriend 删除好友
		DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
		// CreateGroup 创建群组
		CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
		// GetGroup 获取群组
		GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error)
		// InviteGroup 邀请加入群组
		InviteGroup(ctx context.Context, in *InviteGroupReq, opts ...grpc.CallOption) (*InviteGroupResp, error)
		// UpdateGroup 更新群组
		UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error)
		// QuitGroupMember 退出群组
		QuitGroupMember(ctx context.Context, in *QuitGroupMemberReq, opts ...grpc.CallOption) (*QuitGroupMemberResp, error)
		// KickGroupMember 踢出群组
		KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error)
		// ClearGroupMember 清空群组成员
		ClearGroupMember(ctx context.Context, in *ClearGroupMemberReq, opts ...grpc.CallOption) (*ClearGroupMemberResp, error)
	}

	defaultXxService struct {
		cli zrpc.Client
	}
)

func NewXxService(cli zrpc.Client) XxService {
	return &defaultXxService{
		cli: cli,
	}
}

// Register 注册用户
func (m *defaultXxService) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// GetUser 获取用户信息
func (m *defaultXxService) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

// Login 登录
func (m *defaultXxService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// UpdateUser 更新用户信息
func (m *defaultXxService) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

// SearchUser 搜索用户
func (m *defaultXxService) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.SearchUser(ctx, in, opts...)
}

// GetFriend 获取好友
func (m *defaultXxService) GetFriend(ctx context.Context, in *GetFriendReq, opts ...grpc.CallOption) (*GetFriendResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.GetFriend(ctx, in, opts...)
}

// CreateFriend 添加好友
func (m *defaultXxService) CreateFriend(ctx context.Context, in *CreateFriendReq, opts ...grpc.CallOption) (*CreateFriendResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.CreateFriend(ctx, in, opts...)
}

// UpdateFriend 更新好友
func (m *defaultXxService) UpdateFriend(ctx context.Context, in *UpdateFriendReq, opts ...grpc.CallOption) (*UpdateFriendResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.UpdateFriend(ctx, in, opts...)
}

// DeleteFriend 删除好友
func (m *defaultXxService) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.DeleteFriend(ctx, in, opts...)
}

// CreateGroup 创建群组
func (m *defaultXxService) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.CreateGroup(ctx, in, opts...)
}

// GetGroup 获取群组
func (m *defaultXxService) GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.GetGroup(ctx, in, opts...)
}

// InviteGroup 邀请加入群组
func (m *defaultXxService) InviteGroup(ctx context.Context, in *InviteGroupReq, opts ...grpc.CallOption) (*InviteGroupResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.InviteGroup(ctx, in, opts...)
}

// UpdateGroup 更新群组
func (m *defaultXxService) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.UpdateGroup(ctx, in, opts...)
}

// QuitGroupMember 退出群组
func (m *defaultXxService) QuitGroupMember(ctx context.Context, in *QuitGroupMemberReq, opts ...grpc.CallOption) (*QuitGroupMemberResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.QuitGroupMember(ctx, in, opts...)
}

// KickGroupMember 踢出群组
func (m *defaultXxService) KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.KickGroupMember(ctx, in, opts...)
}

// ClearGroupMember 清空群组成员
func (m *defaultXxService) ClearGroupMember(ctx context.Context, in *ClearGroupMemberReq, opts ...grpc.CallOption) (*ClearGroupMemberResp, error) {
	client := pb.NewXxServiceClient(m.cli.Conn())
	return client.ClearGroupMember(ctx, in, opts...)
}
