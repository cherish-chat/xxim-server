// Code generated by goctl. DO NOT EDIT!
// Source: msg.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-server/app/msg/internal/logic"
	"github.com/cherish-chat/xxim-server/app/msg/internal/svc"
	"github.com/cherish-chat/xxim-server/common/pb"
)

type MsgServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedMsgServiceServer
}

func NewMsgServiceServer(svcCtx *svc.ServiceContext) *MsgServiceServer {
	return &MsgServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *MsgServiceServer) InsertMsgDataList(ctx context.Context, in *pb.MsgDataList) (*pb.MsgDataList, error) {
	l := logic.NewInsertMsgDataListLogic(ctx, s.svcCtx)
	return l.InsertMsgDataList(in)
}

func (s *MsgServiceServer) SendMsgListSync(ctx context.Context, in *pb.SendMsgListReq) (*pb.SendMsgListResp, error) {
	l := logic.NewSendMsgListSyncLogic(ctx, s.svcCtx)
	return l.SendMsgListSync(in)
}

func (s *MsgServiceServer) SendMsgListAsync(ctx context.Context, in *pb.SendMsgListReq) (*pb.SendMsgListResp, error) {
	l := logic.NewSendMsgListAsyncLogic(ctx, s.svcCtx)
	return l.SendMsgListAsync(in)
}

func (s *MsgServiceServer) BatchSendMsgSync(ctx context.Context, in *pb.BatchSendMsgReq) (*pb.BatchSendMsgResp, error) {
	l := logic.NewBatchSendMsgSyncLogic(ctx, s.svcCtx)
	return l.BatchSendMsgSync(in)
}

func (s *MsgServiceServer) BatchSendMsgAsync(ctx context.Context, in *pb.BatchSendMsgReq) (*pb.BatchSendMsgResp, error) {
	l := logic.NewBatchSendMsgAsyncLogic(ctx, s.svcCtx)
	return l.BatchSendMsgAsync(in)
}

func (s *MsgServiceServer) PushMsgList(ctx context.Context, in *pb.PushMsgListReq) (*pb.CommonResp, error) {
	l := logic.NewPushMsgListLogic(ctx, s.svcCtx)
	return l.PushMsgList(in)
}

// GetMsgListByConvId 通过seq拉取一个会话的消息
func (s *MsgServiceServer) GetMsgListByConvId(ctx context.Context, in *pb.GetMsgListByConvIdReq) (*pb.GetMsgListResp, error) {
	l := logic.NewGetMsgListByConvIdLogic(ctx, s.svcCtx)
	return l.GetMsgListByConvId(in)
}

// BatchSetMinSeq 批量设置用户某会话的minseq
func (s *MsgServiceServer) BatchSetMinSeq(ctx context.Context, in *pb.BatchSetMinSeqReq) (*pb.BatchSetMinSeqResp, error) {
	l := logic.NewBatchSetMinSeqLogic(ctx, s.svcCtx)
	return l.BatchSetMinSeq(in)
}

// BatchGetConvSeq 批量获取会话的seq
func (s *MsgServiceServer) BatchGetConvSeq(ctx context.Context, in *pb.BatchGetConvSeqReq) (*pb.BatchGetConvSeqResp, error) {
	l := logic.NewBatchGetConvSeqLogic(ctx, s.svcCtx)
	return l.BatchGetConvSeq(in)
}

//  conn hook
func (s *MsgServiceServer) AfterConnect(ctx context.Context, in *pb.AfterConnectReq) (*pb.CommonResp, error) {
	l := logic.NewAfterConnectLogic(ctx, s.svcCtx)
	return l.AfterConnect(in)
}

func (s *MsgServiceServer) AfterDisconnect(ctx context.Context, in *pb.AfterDisconnectReq) (*pb.CommonResp, error) {
	l := logic.NewAfterDisconnectLogic(ctx, s.svcCtx)
	return l.AfterDisconnect(in)
}

// GetConvSubscribers 获取一个会话里所有的消息订阅者
func (s *MsgServiceServer) GetConvSubscribers(ctx context.Context, in *pb.GetConvSubscribersReq) (*pb.GetConvSubscribersResp, error) {
	l := logic.NewGetConvSubscribersLogic(ctx, s.svcCtx)
	return l.GetConvSubscribers(in)
}
