// Code generated by goctl. DO NOT EDIT!
// Source: msg.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-server/app/msg/internal/logic"
	"github.com/cherish-chat/xxim-server/app/msg/internal/svc"
	"github.com/cherish-chat/xxim-server/common/pb"
)

type MsgServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedMsgServiceServer
}

func NewMsgServiceServer(svcCtx *svc.ServiceContext) *MsgServiceServer {
	return &MsgServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *MsgServiceServer) InsertMsgDataList(ctx context.Context, in *pb.MsgDataList) (*pb.MsgDataList, error) {
	l := logic.NewInsertMsgDataListLogic(ctx, s.svcCtx)
	return l.InsertMsgDataList(in)
}

func (s *MsgServiceServer) SendMsgListSync(ctx context.Context, in *pb.SendMsgListReq) (*pb.SendMsgListResp, error) {
	l := logic.NewSendMsgListSyncLogic(ctx, s.svcCtx)
	return l.SendMsgListSync(in)
}

func (s *MsgServiceServer) SendMsgListAsync(ctx context.Context, in *pb.SendMsgListReq) (*pb.SendMsgListResp, error) {
	l := logic.NewSendMsgListAsyncLogic(ctx, s.svcCtx)
	return l.SendMsgListAsync(in)
}

func (s *MsgServiceServer) PushMsgList(ctx context.Context, in *pb.PushMsgListReq) (*pb.CommonResp, error) {
	l := logic.NewPushMsgListLogic(ctx, s.svcCtx)
	return l.PushMsgList(in)
}

// BatchGetMsgListByConvId 通过seq拉取一个会话的消息
func (s *MsgServiceServer) BatchGetMsgListByConvId(ctx context.Context, in *pb.BatchGetMsgListByConvIdReq) (*pb.GetMsgListResp, error) {
	l := logic.NewBatchGetMsgListByConvIdLogic(ctx, s.svcCtx)
	return l.BatchGetMsgListByConvId(in)
}

// GetMsgById 通过serverMsgId或者clientMsgId拉取一条消息
func (s *MsgServiceServer) GetMsgById(ctx context.Context, in *pb.GetMsgByIdReq) (*pb.GetMsgByIdResp, error) {
	l := logic.NewGetMsgByIdLogic(ctx, s.svcCtx)
	return l.GetMsgById(in)
}

// BatchSetMinSeq 批量设置用户某会话的minseq
func (s *MsgServiceServer) BatchSetMinSeq(ctx context.Context, in *pb.BatchSetMinSeqReq) (*pb.BatchSetMinSeqResp, error) {
	l := logic.NewBatchSetMinSeqLogic(ctx, s.svcCtx)
	return l.BatchSetMinSeq(in)
}

// BatchGetConvSeq 批量获取会话的seq
func (s *MsgServiceServer) BatchGetConvSeq(ctx context.Context, in *pb.BatchGetConvSeqReq) (*pb.BatchGetConvSeqResp, error) {
	l := logic.NewBatchGetConvSeqLogic(ctx, s.svcCtx)
	return l.BatchGetConvSeq(in)
}

//  conn hook
func (s *MsgServiceServer) AfterConnect(ctx context.Context, in *pb.AfterConnectReq) (*pb.CommonResp, error) {
	l := logic.NewAfterConnectLogic(ctx, s.svcCtx)
	return l.AfterConnect(in)
}

func (s *MsgServiceServer) AfterDisconnect(ctx context.Context, in *pb.AfterDisconnectReq) (*pb.CommonResp, error) {
	l := logic.NewAfterDisconnectLogic(ctx, s.svcCtx)
	return l.AfterDisconnect(in)
}

func (s *MsgServiceServer) KeepAlive(ctx context.Context, in *pb.KeepAliveReq) (*pb.KeepAliveResp, error) {
	l := logic.NewKeepAliveLogic(ctx, s.svcCtx)
	return l.KeepAlive(in)
}

// GetConvSubscribers 获取一个会话里所有的消息订阅者
func (s *MsgServiceServer) GetConvSubscribers(ctx context.Context, in *pb.GetConvSubscribersReq) (*pb.GetConvSubscribersResp, error) {
	l := logic.NewGetConvSubscribersLogic(ctx, s.svcCtx)
	return l.GetConvSubscribers(in)
}

// OfflinePushMsg 离线推送消息
func (s *MsgServiceServer) OfflinePushMsg(ctx context.Context, in *pb.OfflinePushMsgReq) (*pb.OfflinePushMsgResp, error) {
	l := logic.NewOfflinePushMsgLogic(ctx, s.svcCtx)
	return l.OfflinePushMsg(in)
}

// GetConvOnlineCount 获取一个会话里所有的在线用户
func (s *MsgServiceServer) GetConvOnlineCount(ctx context.Context, in *pb.GetConvOnlineCountReq) (*pb.GetConvOnlineCountResp, error) {
	l := logic.NewGetConvOnlineCountLogic(ctx, s.svcCtx)
	return l.GetConvOnlineCount(in)
}

// FlushUsersSubConv 刷新用户订阅的会话
func (s *MsgServiceServer) FlushUsersSubConv(ctx context.Context, in *pb.FlushUsersSubConvReq) (*pb.CommonResp, error) {
	l := logic.NewFlushUsersSubConvLogic(ctx, s.svcCtx)
	return l.FlushUsersSubConv(in)
}

// GetAllMsgList 获取所有消息
func (s *MsgServiceServer) GetAllMsgList(ctx context.Context, in *pb.GetAllMsgListReq) (*pb.GetAllMsgListResp, error) {
	l := logic.NewGetAllMsgListLogic(ctx, s.svcCtx)
	return l.GetAllMsgList(in)
}

// ReadMsg 设置会话已读
func (s *MsgServiceServer) ReadMsg(ctx context.Context, in *pb.ReadMsgReq) (*pb.ReadMsgResp, error) {
	l := logic.NewReadMsgLogic(ctx, s.svcCtx)
	return l.ReadMsg(in)
}

// EditMsg 编辑消息
func (s *MsgServiceServer) EditMsg(ctx context.Context, in *pb.EditMsgReq) (*pb.EditMsgResp, error) {
	l := logic.NewEditMsgLogic(ctx, s.svcCtx)
	return l.EditMsg(in)
}

// FlushShieldWordTireTree 刷新屏蔽词
func (s *MsgServiceServer) FlushShieldWordTireTree(ctx context.Context, in *pb.FlushShieldWordTireTreeReq) (*pb.FlushShieldWordTireTreeResp, error) {
	l := logic.NewFlushShieldWordTireTreeLogic(ctx, s.svcCtx)
	return l.FlushShieldWordTireTree(in)
}
