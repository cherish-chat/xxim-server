// Code generated by goctl. DO NOT EDIT!
// Source: msg.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-server/app/msg/internal/logic"
	"github.com/cherish-chat/xxim-server/app/msg/internal/svc"
	"github.com/cherish-chat/xxim-server/common/pb"
)

type MsgServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedMsgServiceServer
}

func NewMsgServiceServer(svcCtx *svc.ServiceContext) *MsgServiceServer {
	return &MsgServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *MsgServiceServer) InsertMsgDataList(ctx context.Context, in *pb.MsgDataList) (*pb.CommonResp, error) {
	l := logic.NewInsertMsgDataListLogic(ctx, s.svcCtx)
	return l.InsertMsgDataList(in)
}

func (s *MsgServiceServer) SendMsgListSync(ctx context.Context, in *pb.SendMsgListReq) (*pb.CommonResp, error) {
	l := logic.NewSendMsgListSyncLogic(ctx, s.svcCtx)
	return l.SendMsgListSync(in)
}

func (s *MsgServiceServer) SendMsgListAsync(ctx context.Context, in *pb.SendMsgListReq) (*pb.CommonResp, error) {
	l := logic.NewSendMsgListAsyncLogic(ctx, s.svcCtx)
	return l.SendMsgListAsync(in)
}

func (s *MsgServiceServer) BatchSendMsgSync(ctx context.Context, in *pb.BatchSendMsgReq) (*pb.CommonResp, error) {
	l := logic.NewBatchSendMsgSyncLogic(ctx, s.svcCtx)
	return l.BatchSendMsgSync(in)
}

func (s *MsgServiceServer) BatchSendMsgAsync(ctx context.Context, in *pb.BatchSendMsgReq) (*pb.CommonResp, error) {
	l := logic.NewBatchSendMsgAsyncLogic(ctx, s.svcCtx)
	return l.BatchSendMsgAsync(in)
}

// GetSingleMsgListBySeq 通过seq拉取一个单聊会话的消息
func (s *MsgServiceServer) GetSingleMsgListBySeq(ctx context.Context, in *pb.GetSingleMsgListBySeqReq) (*pb.GetSingleMsgListBySeqResp, error) {
	l := logic.NewGetSingleMsgListBySeqLogic(ctx, s.svcCtx)
	return l.GetSingleMsgListBySeq(in)
}

// GetGroupMsgListBySeq 通过seq拉取一个群聊会话的消息
func (s *MsgServiceServer) GetGroupMsgListBySeq(ctx context.Context, in *pb.GetGroupMsgListBySeqReq) (*pb.GetGroupMsgListBySeqResp, error) {
	l := logic.NewGetGroupMsgListBySeqLogic(ctx, s.svcCtx)
	return l.GetGroupMsgListBySeq(in)
}
