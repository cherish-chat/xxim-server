// Code generated by goctl. DO NOT EDIT!
// Source: msg.proto

package msgservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchSendMsgReq       = pb.BatchSendMsgReq
	GetMsgListByConvIdReq = pb.GetMsgListByConvIdReq
	GetMsgListResp        = pb.GetMsgListResp
	MsgData               = pb.MsgData
	MsgDataList           = pb.MsgDataList
	MsgData_OfflinePush   = pb.MsgData_OfflinePush
	MsgData_Options       = pb.MsgData_Options
	MsgData_Receiver      = pb.MsgData_Receiver
	MsgMQBody             = pb.MsgMQBody
	PushMsgListReq        = pb.PushMsgListReq
	SendMsgListReq        = pb.SendMsgListReq

	MsgService interface {
		InsertMsgDataList(ctx context.Context, in *MsgDataList, opts ...grpc.CallOption) (*MsgDataList, error)
		SendMsgListSync(ctx context.Context, in *SendMsgListReq, opts ...grpc.CallOption) (*CommonResp, error)
		SendMsgListAsync(ctx context.Context, in *SendMsgListReq, opts ...grpc.CallOption) (*CommonResp, error)
		BatchSendMsgSync(ctx context.Context, in *BatchSendMsgReq, opts ...grpc.CallOption) (*CommonResp, error)
		BatchSendMsgAsync(ctx context.Context, in *BatchSendMsgReq, opts ...grpc.CallOption) (*CommonResp, error)
		PushMsgList(ctx context.Context, in *PushMsgListReq, opts ...grpc.CallOption) (*CommonResp, error)
		// GetMsgListByConvId 通过seq拉取一个会话的消息
		GetMsgListByConvId(ctx context.Context, in *GetMsgListByConvIdReq, opts ...grpc.CallOption) (*GetMsgListResp, error)
	}

	defaultMsgService struct {
		cli zrpc.Client
	}
)

func NewMsgService(cli zrpc.Client) MsgService {
	return &defaultMsgService{
		cli: cli,
	}
}

func (m *defaultMsgService) InsertMsgDataList(ctx context.Context, in *MsgDataList, opts ...grpc.CallOption) (*MsgDataList, error) {
	client := pb.NewMsgServiceClient(m.cli.Conn())
	return client.InsertMsgDataList(ctx, in, opts...)
}

func (m *defaultMsgService) SendMsgListSync(ctx context.Context, in *SendMsgListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewMsgServiceClient(m.cli.Conn())
	return client.SendMsgListSync(ctx, in, opts...)
}

func (m *defaultMsgService) SendMsgListAsync(ctx context.Context, in *SendMsgListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewMsgServiceClient(m.cli.Conn())
	return client.SendMsgListAsync(ctx, in, opts...)
}

func (m *defaultMsgService) BatchSendMsgSync(ctx context.Context, in *BatchSendMsgReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewMsgServiceClient(m.cli.Conn())
	return client.BatchSendMsgSync(ctx, in, opts...)
}

func (m *defaultMsgService) BatchSendMsgAsync(ctx context.Context, in *BatchSendMsgReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewMsgServiceClient(m.cli.Conn())
	return client.BatchSendMsgAsync(ctx, in, opts...)
}

func (m *defaultMsgService) PushMsgList(ctx context.Context, in *PushMsgListReq, opts ...grpc.CallOption) (*CommonResp, error) {
	client := pb.NewMsgServiceClient(m.cli.Conn())
	return client.PushMsgList(ctx, in, opts...)
}

// GetMsgListByConvId 通过seq拉取一个会话的消息
func (m *defaultMsgService) GetMsgListByConvId(ctx context.Context, in *GetMsgListByConvIdReq, opts ...grpc.CallOption) (*GetMsgListResp, error) {
	client := pb.NewMsgServiceClient(m.cli.Conn())
	return client.GetMsgListByConvId(ctx, in, opts...)
}
